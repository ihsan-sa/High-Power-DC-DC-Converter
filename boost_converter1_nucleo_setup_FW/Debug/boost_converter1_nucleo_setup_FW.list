
boost_converter1_nucleo_setup_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  080088b8  080088b8  000098b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f74  08008f74  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f74  08008f74  00009f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f7c  08008f7c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f7c  08008f7c  00009f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f80  08008f80  00009f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008f84  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001d8  0800915c  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800915c  0000a3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e614  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  0001881c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0001ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  0001b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fbd  00000000  00000000  0001c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010329  00000000  00000000  0003334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7bc  00000000  00000000  00043676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2e32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  000d2e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d7ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800889c 	.word	0x0800889c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800889c 	.word	0x0800889c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <debug_level>:

/* PRIVATE VARIABLES */
uint8_t _debug_level = 3;

/* API */
uint8_t debug_level(void){
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	return _debug_level;
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <debug_level+0x14>)
 800101a:	781b      	ldrb	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000

0800102c <_rbuff_p_vals>:
const bool _rbuff_busy(const ring_buffer_t *const p_rbuff);

command_t _rbuff_parse(const ring_buffer_t *const p_rbuff);

/* API */
uint8_t* const _rbuff_p_vals(const ring_buffer_t *const p_rbuff) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return (uint8_t* const ) p_rbuff->_p_vals;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_rbuff_idx>:
const uint8_t _rbuff_idx(const ring_buffer_t *const p_rbuff) {
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return (const uint8_t) p_rbuff->_idx;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_rbuff_busy>:
const bool _rbuff_busy(const ring_buffer_t *const p_rbuff) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	return (const bool) p_rbuff->_busy;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <rbuff_init>:

/* INIT */
void rbuff_init(ring_buffer_t *const p_rbuff) {
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]

	p_rbuff->_busy = true;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	p_rbuff->_idx = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	for (int idx = 0; idx < INPUT_BUFFER_SIZE; idx++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e007      	b.n	80010a4 <rbuff_init+0x2e>
		p_rbuff->_p_vals[idx] = '\0';
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
	for (int idx = 0; idx < INPUT_BUFFER_SIZE; idx++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80010a8:	ddf4      	ble.n	8001094 <rbuff_init+0x1e>
	}

	p_rbuff->_busy = false;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <rbuff_add_val>:

/* USE */
/* Add a value to the buffer */
command_t rbuff_add_val(ring_buffer_t *const p_rbuff, uint8_t val) {
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]

	if (debug_level() >= 2) {
 80010cc:	f7ff ffa2 	bl	8001014 <debug_level>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d902      	bls.n	80010dc <rbuff_add_val+0x1c>
		printf("[DBG] In rbuff_add_val()...\r\n");
 80010d6:	483d      	ldr	r0, [pc, #244]	@ (80011cc <rbuff_add_val+0x10c>)
 80010d8:	f004 ff90 	bl	8005ffc <puts>
	}

	if (_rbuff_busy(p_rbuff)) {
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffbd 	bl	800105c <_rbuff_busy>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00a      	beq.n	80010fe <rbuff_add_val+0x3e>
		if (debug_level() >= 2) {
 80010e8:	f7ff ff94 	bl	8001014 <debug_level>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d902      	bls.n	80010f8 <rbuff_add_val+0x38>
			printf("[DBG] \tBuff busy - return.\r\n");
 80010f2:	4837      	ldr	r0, [pc, #220]	@ (80011d0 <rbuff_add_val+0x110>)
 80010f4:	f004 ff82 	bl	8005ffc <puts>
		}
		return BUFF_BUSY;
 80010f8:	f06f 0301 	mvn.w	r3, #1
 80010fc:	e061      	b.n	80011c2 <rbuff_add_val+0x102>
	}

	p_rbuff->_busy = true;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	//if buffer is full, wrap around
	if (_rbuff_idx(p_rbuff) == INPUT_BUFFER_SIZE) {
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff9b 	bl	8001042 <_rbuff_idx>
 800110c:	4603      	mov	r3, r0
 800110e:	2bff      	cmp	r3, #255	@ 0xff
 8001110:	d103      	bne.n	800111a <rbuff_add_val+0x5a>
		p_rbuff->_idx = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	}

	//Add value to the buffer
	_rbuff_p_vals(p_rbuff)[_rbuff_idx(p_rbuff)] = val;
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff86 	bl	800102c <_rbuff_p_vals>
 8001120:	4604      	mov	r4, r0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff8d 	bl	8001042 <_rbuff_idx>
 8001128:	4603      	mov	r3, r0
 800112a:	4423      	add	r3, r4
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	701a      	strb	r2, [r3, #0]

	//handle deletes
	if(val == 8 || val == 127){
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b08      	cmp	r3, #8
 8001134:	d002      	beq.n	800113c <rbuff_add_val+0x7c>
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	2b7f      	cmp	r3, #127	@ 0x7f
 800113a:	d107      	bne.n	800114c <rbuff_add_val+0x8c>
		p_rbuff->_idx -= 2;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001142:	3b02      	subs	r3, #2
 8001144:	b2da      	uxtb	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
//			return NO_COMMAND;
//		}
	}

	//check if it is time to parse
	if (val == '\r' || val == '\n') {
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d002      	beq.n	8001158 <rbuff_add_val+0x98>
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d127      	bne.n	80011a8 <rbuff_add_val+0xe8>

		if (_rbuff_idx(p_rbuff) <= 1) {
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff72 	bl	8001042 <_rbuff_idx>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d807      	bhi.n	8001174 <rbuff_add_val+0xb4>
			printf("\r\n");  //newline
 8001164:	481b      	ldr	r0, [pc, #108]	@ (80011d4 <rbuff_add_val+0x114>)
 8001166:	f004 ff49 	bl	8005ffc <puts>
			rbuff_init(p_rbuff); //reinit the buffer
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff83 	bl	8001076 <rbuff_init>
			return NO_COMMAND;
 8001170:	2300      	movs	r3, #0
 8001172:	e026      	b.n	80011c2 <rbuff_add_val+0x102>
		}

		if (debug_level() >= 2) {
 8001174:	f7ff ff4e 	bl	8001014 <debug_level>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d902      	bls.n	8001184 <rbuff_add_val+0xc4>
			printf("[DBG] \tAbout to parse...\r\n");
 800117e:	4816      	ldr	r0, [pc, #88]	@ (80011d8 <rbuff_add_val+0x118>)
 8001180:	f004 ff3c 	bl	8005ffc <puts>
		}

		printf("\r\n"); //print a newline
 8001184:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <rbuff_add_val+0x114>)
 8001186:	f004 ff39 	bl	8005ffc <puts>
		command_t ret_val = _rbuff_parse(p_rbuff);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f826 	bl	80011dc <_rbuff_parse>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
		rbuff_init(p_rbuff);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff6e 	bl	8001076 <rbuff_init>
		p_rbuff->_busy = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		return ret_val;
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	e00c      	b.n	80011c2 <rbuff_add_val+0x102>
	}

	p_rbuff->_idx++; //increment buffer index
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	p_rbuff->_busy = false; //update buffer avail
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	return NO_COMMAND;
 80011c0:	2300      	movs	r3, #0

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080088b8 	.word	0x080088b8
 80011d0:	080088d8 	.word	0x080088d8
 80011d4:	080088f4 	.word	0x080088f4
 80011d8:	080088f8 	.word	0x080088f8

080011dc <_rbuff_parse>:

/* Parse */
command_t _rbuff_parse(const ring_buffer_t *const p_rbuff) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

	if (debug_level() >= 2) {
 80011e4:	f7ff ff16 	bl	8001014 <debug_level>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d902      	bls.n	80011f4 <_rbuff_parse+0x18>
		printf("[DBG] In _rbuff_parse()...\r\n");
 80011ee:	4855      	ldr	r0, [pc, #340]	@ (8001344 <_rbuff_parse+0x168>)
 80011f0:	f004 ff04 	bl	8005ffc <puts>
	}

	const char p_delims[4] = { '\r', ' ', '\0', '\n' };
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <_rbuff_parse+0x16c>)
 80011f6:	60bb      	str	r3, [r7, #8]
	const char *const p_cmd = strtok((char*) _rbuff_p_vals(p_rbuff), p_delims);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff17 	bl	800102c <_rbuff_p_vals>
 80011fe:	4602      	mov	r2, r0
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f004 fff2 	bl	80061f0 <strtok>
 800120c:	61f8      	str	r0, [r7, #28]

	if (p_cmd == NULL) {
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <_rbuff_parse+0x3c>
		return NO_COMMAND;
 8001214:	2300      	movs	r3, #0
 8001216:	e091      	b.n	800133c <_rbuff_parse+0x160>
	}

	if (debug_level() >= 2) {
 8001218:	f7ff fefc 	bl	8001014 <debug_level>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d903      	bls.n	800122a <_rbuff_parse+0x4e>
		printf("[DBG] \tCmd is %s\r\n", p_cmd);
 8001222:	69f9      	ldr	r1, [r7, #28]
 8001224:	4849      	ldr	r0, [pc, #292]	@ (800134c <_rbuff_parse+0x170>)
 8001226:	f004 fe81 	bl	8005f2c <iprintf>
	}

	if (!strcmp(p_cmd, "ack")) {
 800122a:	4949      	ldr	r1, [pc, #292]	@ (8001350 <_rbuff_parse+0x174>)
 800122c:	69f8      	ldr	r0, [r7, #28]
 800122e:	f7fe ffd7 	bl	80001e0 <strcmp>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d104      	bne.n	8001242 <_rbuff_parse+0x66>
		printf("[INFO] Ack!\r\n");
 8001238:	4846      	ldr	r0, [pc, #280]	@ (8001354 <_rbuff_parse+0x178>)
 800123a:	f004 fedf 	bl	8005ffc <puts>
		return ACK;
 800123e:	2301      	movs	r3, #1
 8001240:	e07c      	b.n	800133c <_rbuff_parse+0x160>
	}

	else if (!strcmp(p_cmd, "pwm")) {
 8001242:	4945      	ldr	r1, [pc, #276]	@ (8001358 <_rbuff_parse+0x17c>)
 8001244:	69f8      	ldr	r0, [r7, #28]
 8001246:	f7fe ffcb 	bl	80001e0 <strcmp>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d170      	bne.n	8001332 <_rbuff_parse+0x156>
		const char *const p_cmd_2 = strtok(NULL, p_delims);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4619      	mov	r1, r3
 8001256:	2000      	movs	r0, #0
 8001258:	f004 ffca 	bl	80061f0 <strtok>
 800125c:	61b8      	str	r0, [r7, #24]
		if (debug_level() >= 2) {
 800125e:	f7ff fed9 	bl	8001014 <debug_level>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d902      	bls.n	800126e <_rbuff_parse+0x92>
			printf("[DBG] \tIn PWM commands.\r\n");
 8001268:	483c      	ldr	r0, [pc, #240]	@ (800135c <_rbuff_parse+0x180>)
 800126a:	f004 fec7 	bl	8005ffc <puts>
		}

		if (p_cmd_2 == NULL) {
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d109      	bne.n	8001288 <_rbuff_parse+0xac>
			if (debug_level() >= 2) {
 8001274:	f7ff fece 	bl	8001014 <debug_level>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d902      	bls.n	8001284 <_rbuff_parse+0xa8>
				printf("[DBG] \tNo second command.\r\n");
 800127e:	4838      	ldr	r0, [pc, #224]	@ (8001360 <_rbuff_parse+0x184>)
 8001280:	f004 febc 	bl	8005ffc <puts>
			}
			return NO_COMMAND;
 8001284:	2300      	movs	r3, #0
 8001286:	e059      	b.n	800133c <_rbuff_parse+0x160>
		}

		if (!strcmp(p_cmd_2, "dc")) {
 8001288:	4936      	ldr	r1, [pc, #216]	@ (8001364 <_rbuff_parse+0x188>)
 800128a:	69b8      	ldr	r0, [r7, #24]
 800128c:	f7fe ffa8 	bl	80001e0 <strcmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d135      	bne.n	8001302 <_rbuff_parse+0x126>

			const char *const p_cmd_3 = strtok(NULL, p_delims);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	2000      	movs	r0, #0
 800129e:	f004 ffa7 	bl	80061f0 <strtok>
 80012a2:	6178      	str	r0, [r7, #20]

			if (debug_level() >= 2) {
 80012a4:	f7ff feb6 	bl	8001014 <debug_level>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d902      	bls.n	80012b4 <_rbuff_parse+0xd8>
				printf("[DBG] \tIn duty cycle commands.\r\n");
 80012ae:	482e      	ldr	r0, [pc, #184]	@ (8001368 <_rbuff_parse+0x18c>)
 80012b0:	f004 fea4 	bl	8005ffc <puts>
			}

			if (p_cmd_3 == NULL) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <_rbuff_parse+0xf2>
				if (debug_level() >= 2) {
 80012ba:	f7ff feab 	bl	8001014 <debug_level>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d902      	bls.n	80012ca <_rbuff_parse+0xee>
					printf("[DBG] \tNo duty cycle provided.\r\n");
 80012c4:	4829      	ldr	r0, [pc, #164]	@ (800136c <_rbuff_parse+0x190>)
 80012c6:	f004 fe99 	bl	8005ffc <puts>
				}
				return NO_COMMAND;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e036      	b.n	800133c <_rbuff_parse+0x160>
			}

			const float dc_percent = atof(p_cmd_3);
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f003 fafe 	bl	80048d0 <atof>
 80012d4:	ec53 2b10 	vmov	r2, r3, d0
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc9c 	bl	8000c18 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	613b      	str	r3, [r7, #16]
			const float dc = dc_percent / 100;
 80012e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001370 <_rbuff_parse+0x194>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	edc7 7a03 	vstr	s15, [r7, #12]

			return pwm_set_dc(&pwm_boost, dc);
 80012f4:	ed97 0a03 	vldr	s0, [r7, #12]
 80012f8:	481e      	ldr	r0, [pc, #120]	@ (8001374 <_rbuff_parse+0x198>)
 80012fa:	f000 faad 	bl	8001858 <pwm_set_dc>
 80012fe:	4603      	mov	r3, r0
 8001300:	e01c      	b.n	800133c <_rbuff_parse+0x160>

		} else if (!strcmp(p_cmd_2, "en")) {
 8001302:	491d      	ldr	r1, [pc, #116]	@ (8001378 <_rbuff_parse+0x19c>)
 8001304:	69b8      	ldr	r0, [r7, #24]
 8001306:	f7fe ff6b 	bl	80001e0 <strcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <_rbuff_parse+0x13e>
			return pwm_en(&pwm_boost);
 8001310:	4818      	ldr	r0, [pc, #96]	@ (8001374 <_rbuff_parse+0x198>)
 8001312:	f000 fa5f 	bl	80017d4 <pwm_en>
 8001316:	4603      	mov	r3, r0
 8001318:	e010      	b.n	800133c <_rbuff_parse+0x160>
		} else if (!strcmp(p_cmd_2, "dis")) {
 800131a:	4918      	ldr	r1, [pc, #96]	@ (800137c <_rbuff_parse+0x1a0>)
 800131c:	69b8      	ldr	r0, [r7, #24]
 800131e:	f7fe ff5f 	bl	80001e0 <strcmp>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <_rbuff_parse+0x156>
			return pwm_dis(&pwm_boost);
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <_rbuff_parse+0x198>)
 800132a:	f000 fa73 	bl	8001814 <pwm_dis>
 800132e:	4603      	mov	r3, r0
 8001330:	e004      	b.n	800133c <_rbuff_parse+0x160>
		}
	}

	printf("[ERR] Invalid command.\r\n");
 8001332:	4813      	ldr	r0, [pc, #76]	@ (8001380 <_rbuff_parse+0x1a4>)
 8001334:	f004 fe62 	bl	8005ffc <puts>
	return INVALID_COMMAND;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295

}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	08008914 	.word	0x08008914
 8001348:	0a00200d 	.word	0x0a00200d
 800134c:	08008930 	.word	0x08008930
 8001350:	08008944 	.word	0x08008944
 8001354:	08008948 	.word	0x08008948
 8001358:	08008958 	.word	0x08008958
 800135c:	0800895c 	.word	0x0800895c
 8001360:	08008978 	.word	0x08008978
 8001364:	08008994 	.word	0x08008994
 8001368:	08008998 	.word	0x08008998
 800136c:	080089b8 	.word	0x080089b8
 8001370:	42c80000 	.word	0x42c80000
 8001374:	20000284 	.word	0x20000284
 8001378:	080089d8 	.word	0x080089d8
 800137c:	080089dc 	.word	0x080089dc
 8001380:	080089e0 	.word	0x080089e0

08001384 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	b29a      	uxth	r2, r3
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	4804      	ldr	r0, [pc, #16]	@ (80013ac <_write+0x28>)
 800139c:	f002 fa88 	bl	80038b0 <HAL_UART_Transmit>
	return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000023c 	.word	0x2000023c

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0c2      	sub	sp, #264	@ 0x108
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f000 fcbb 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f84d 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 f965 	bl	800168c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013c2:	f000 f939 	bl	8001638 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013c6:	f000 f8b3 	bl	8001530 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Init input buffer */
  ring_buffer_t input_buffer;
  rbuff_init(&input_buffer);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe52 	bl	8001076 <rbuff_init>

  /* Create temp UART buffer */
  uint8_t uart_buff = '\0';
 80013d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013d6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

  /* INIT PWM */
  pwm_init(&pwm_boost, "Boost_pwm\0", ASYNC_BOOST, &htim1);
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <main+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	4919      	ldr	r1, [pc, #100]	@ (8001448 <main+0x98>)
 80013e4:	4819      	ldr	r0, [pc, #100]	@ (800144c <main+0x9c>)
 80013e6:	f000 f9c5 	bl	8001774 <pwm_init>

  printf("[INFO] Init complete.\r\n");
 80013ea:	4819      	ldr	r0, [pc, #100]	@ (8001450 <main+0xa0>)
 80013ec:	f004 fe06 	bl	8005ffc <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_UART_Receive_IT(&huart2, &uart_buff, 1);
 80013f0:	1cfb      	adds	r3, r7, #3
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	4817      	ldr	r0, [pc, #92]	@ (8001454 <main+0xa4>)
 80013f8:	f002 fae5 	bl	80039c6 <HAL_UART_Receive_IT>
	if(uart_buff != '\0'){
 80013fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001400:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f2      	beq.n	80013f0 <main+0x40>
		HAL_UART_Transmit(&huart2, &uart_buff, 1, 100); //echo
 800140a:	1cf9      	adds	r1, r7, #3
 800140c:	2364      	movs	r3, #100	@ 0x64
 800140e:	2201      	movs	r2, #1
 8001410:	4810      	ldr	r0, [pc, #64]	@ (8001454 <main+0xa4>)
 8001412:	f002 fa4d 	bl	80038b0 <HAL_UART_Transmit>
		while(rbuff_add_val(&input_buffer, uart_buff) == BUFF_BUSY);
 8001416:	bf00      	nop
 8001418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800141c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe4a 	bl	80010c0 <rbuff_add_val>
 800142c:	4603      	mov	r3, r0
 800142e:	f113 0f02 	cmn.w	r3, #2
 8001432:	d0f1      	beq.n	8001418 <main+0x68>
		uart_buff = '\0';
 8001434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001438:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &uart_buff, 1);
 8001440:	e7d6      	b.n	80013f0 <main+0x40>
 8001442:	bf00      	nop
 8001444:	200001f4 	.word	0x200001f4
 8001448:	080089f8 	.word	0x080089f8
 800144c:	20000284 	.word	0x20000284
 8001450:	08008a04 	.word	0x08008a04
 8001454:	2000023c 	.word	0x2000023c

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2230      	movs	r2, #48	@ 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fea8 	bl	80061bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	4a28      	ldr	r2, [pc, #160]	@ (8001528 <SystemClock_Config+0xd0>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
 800148c:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <SystemClock_Config+0xd0>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014a4:	4a21      	ldr	r2, [pc, #132]	@ (800152c <SystemClock_Config+0xd4>)
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <SystemClock_Config+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014cc:	2310      	movs	r3, #16
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014da:	2307      	movs	r3, #7
 80014dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 ffd8 	bl	8002498 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ee:	f000 f93b 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fa3a 	bl	8002988 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800151a:	f000 f925 	bl	8001768 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	@ 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b092      	sub	sp, #72	@ 0x48
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2220      	movs	r2, #32
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fe2e 	bl	80061bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001562:	4a34      	ldr	r2, [pc, #208]	@ (8001634 <MX_TIM1_Init+0x104>)
 8001564:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001566:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <MX_TIM1_Init+0x100>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = DFLT_CNT_PER;
 8001572:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001574:	f240 3247 	movw	r2, #839	@ 0x347
 8001578:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <MX_TIM1_Init+0x100>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001580:	4b2b      	ldr	r3, [pc, #172]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800158c:	4828      	ldr	r0, [pc, #160]	@ (8001630 <MX_TIM1_Init+0x100>)
 800158e:	f001 fc1b 	bl	8002dc8 <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001598:	f000 f8e6 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a8:	4619      	mov	r1, r3
 80015aa:	4821      	ldr	r0, [pc, #132]	@ (8001630 <MX_TIM1_Init+0x100>)
 80015ac:	f002 f870 	bl	8003690 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80015b6:	f000 f8d7 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	@ 0x60
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = DFLT_CNT_PER * DFLT_PWM_DC;
 80015be:	23a7      	movs	r3, #167	@ 0xa7
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015ca:	2304      	movs	r3, #4
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4814      	ldr	r0, [pc, #80]	@ (8001630 <MX_TIM1_Init+0x100>)
 80015e0:	f001 fd56 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80015ea:	f000 f8bd 	bl	8001768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001612:	f002 f8ab 	bl	800376c <HAL_TIMEx_ConfigBreakDeadTime>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800161c:	f000 f8a4 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM1_Init+0x100>)
 8001622:	f000 f9db 	bl	80019dc <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3748      	adds	r7, #72	@ 0x48
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001f4 	.word	0x200001f4
 8001634:	40010000 	.word	0x40010000

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f002 f8ce 	bl	8003810 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f875 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000023c 	.word	0x2000023c
 8001688:	40004400 	.word	0x40004400

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a2c      	ldr	r2, [pc, #176]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a25      	ldr	r2, [pc, #148]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b23      	ldr	r3, [pc, #140]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <MX_GPIO_Init+0xd0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <MX_GPIO_Init+0xd0>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_GPIO_Init+0xd0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2120      	movs	r1, #32
 8001716:	4812      	ldr	r0, [pc, #72]	@ (8001760 <MX_GPIO_Init+0xd4>)
 8001718:	f000 fea4 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001722:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_GPIO_Init+0xd8>)
 8001734:	f000 fd12 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001738:	2320      	movs	r3, #32
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4804      	ldr	r0, [pc, #16]	@ (8001760 <MX_GPIO_Init+0xd4>)
 8001750:	f000 fd04 	bl	800215c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020800 	.word	0x40020800

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <pwm_init>:
#include "user_commands.h"


/* INIT */
void pwm_init(pwm_t *const p_pwm, char id[PWM_INSTANCE_ID_LEN],
		control_mode_t control_mode, const TIM_HandleTypeDef *const p_timer) {
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
	p_pwm->_is_en = false;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	771a      	strb	r2, [r3, #28]
	p_pwm->_dc = DFLT_PWM_DC;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a10      	ldr	r2, [pc, #64]	@ (80017d0 <pwm_init+0x5c>)
 800178e:	601a      	str	r2, [r3, #0]
	p_pwm->_control_mode = control_mode;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	711a      	strb	r2, [r3, #4]
	p_pwm->_p_timer = (TIM_HandleTypeDef *)p_timer;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < PWM_INSTANCE_ID_LEN; i++) {
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00c      	b.n	80017bc <pwm_init+0x48>
		p_pwm->_id[i] = id[i];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4413      	add	r3, r2
 80017a8:	7819      	ldrb	r1, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	330c      	adds	r3, #12
 80017b2:	460a      	mov	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PWM_INSTANCE_ID_LEN; i++) {
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	ddef      	ble.n	80017a2 <pwm_init+0x2e>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	3e4ccccd 	.word	0x3e4ccccd

080017d4 <pwm_en>:

/* PWM CONROL */
command_t pwm_en(pwm_t *const p_pwm) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if (p_pwm == NULL) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <pwm_en+0x12>
		return NO_COMMAND;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e010      	b.n	8001808 <pwm_en+0x34>
	}

	else if (p_pwm->_control_mode == ASYNC_BOOST) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10b      	bne.n	8001806 <pwm_en+0x32>
		HAL_TIM_PWM_Start(p_pwm->_p_timer, TIM_CHANNEL_1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fb37 	bl	8002e68 <HAL_TIM_PWM_Start>
		printf("[INFO] %s PWM enabled.\r\n", p_pwm->_id);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	330c      	adds	r3, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <pwm_en+0x3c>)
 8001802:	f004 fb93 	bl	8005f2c <iprintf>
	}

	return PWM_EN;
 8001806:	2302      	movs	r3, #2
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	08008a1c 	.word	0x08008a1c

08001814 <pwm_dis>:

command_t pwm_dis(pwm_t *const p_pwm) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	if (p_pwm == NULL) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <pwm_dis+0x14>
		return INVALID_COMMAND;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e010      	b.n	800184a <pwm_dis+0x36>
	}

	else if (p_pwm->_control_mode == ASYNC_BOOST) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10b      	bne.n	8001848 <pwm_dis+0x34>
		HAL_TIM_PWM_Stop(p_pwm->_p_timer, TIM_CHANNEL_1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fbc6 	bl	8002fc8 <HAL_TIM_PWM_Stop>
		printf("[INFO] %s PWM disabled.\r\n", p_pwm->_id);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	330c      	adds	r3, #12
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	@ (8001854 <pwm_dis+0x40>)
 8001844:	f004 fb72 	bl	8005f2c <iprintf>
	}

	return PWM_DIS;
 8001848:	2303      	movs	r3, #3
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	08008a38 	.word	0x08008a38

08001858 <pwm_set_dc>:

command_t pwm_set_dc(pwm_t *const p_pwm, float dc) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af04      	add	r7, sp, #16
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	ed87 0a00 	vstr	s0, [r7]
	if (p_pwm == NULL) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <pwm_set_dc+0x18>
		return INVALID_COMMAND;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e057      	b.n	8001920 <pwm_set_dc+0xc8>
	}
	if (dc < PWM_MIN_DC || dc > PWM_MAX_DC) {
 8001870:	edd7 7a00 	vldr	s15, [r7]
 8001874:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001928 <pwm_set_dc+0xd0>
 8001878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d408      	bmi.n	8001894 <pwm_set_dc+0x3c>
 8001882:	edd7 7a00 	vldr	s15, [r7]
 8001886:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800192c <pwm_set_dc+0xd4>
 800188a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	dd1b      	ble.n	80018cc <pwm_set_dc+0x74>
		printf(
				"[ERR] Duty cycle %1.1f%% is not within the allowed range of %1.1f%% to %1.1f%%.",
				dc * 100, PWM_MIN_DC * 100, PWM_MAX_DC * 100);
 8001894:	edd7 7a00 	vldr	s15, [r7]
 8001898:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001930 <pwm_set_dc+0xd8>
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
		printf(
 80018a0:	ee17 0a90 	vmov	r0, s15
 80018a4:	f7fe fe68 	bl	8000578 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	4920      	ldr	r1, [pc, #128]	@ (8001934 <pwm_set_dc+0xdc>)
 80018b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	491f      	ldr	r1, [pc, #124]	@ (8001938 <pwm_set_dc+0xe0>)
 80018bc:	e9cd 0100 	strd	r0, r1, [sp]
 80018c0:	481e      	ldr	r0, [pc, #120]	@ (800193c <pwm_set_dc+0xe4>)
 80018c2:	f004 fb33 	bl	8005f2c <iprintf>
		return INVALID_COMMAND;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e029      	b.n	8001920 <pwm_set_dc+0xc8>
	}

	p_pwm->_p_timer->Instance->CCR1 = DFLT_CNT_PER * dc;
 80018cc:	edd7 7a00 	vldr	s15, [r7]
 80018d0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001940 <pwm_set_dc+0xe8>
 80018d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 2a90 	vmov	r2, s15
 80018e6:	635a      	str	r2, [r3, #52]	@ 0x34
	p_pwm->_dc = dc;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]

	printf("[INFO] %s PWM duty cycle set to %1.1f%% (%lu).\r\n", p_pwm->_id, dc * 100, p_pwm->_p_timer->Instance->CCR1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f103 040c 	add.w	r4, r3, #12
 80018f4:	edd7 7a00 	vldr	s15, [r7]
 80018f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001930 <pwm_set_dc+0xd8>
 80018fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f7fe fe38 	bl	8000578 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	6889      	ldr	r1, [r1, #8]
 8001910:	6809      	ldr	r1, [r1, #0]
 8001912:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001914:	9100      	str	r1, [sp, #0]
 8001916:	4621      	mov	r1, r4
 8001918:	480a      	ldr	r0, [pc, #40]	@ (8001944 <pwm_set_dc+0xec>)
 800191a:	f004 fb07 	bl	8005f2c <iprintf>

	return PWM_DC_SET;
 800191e:	2304      	movs	r3, #4

}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	3dcccccd 	.word	0x3dcccccd
 800192c:	3f666666 	.word	0x3f666666
 8001930:	42c80000 	.word	0x42c80000
 8001934:	40568000 	.word	0x40568000
 8001938:	40240000 	.word	0x40240000
 800193c:	08008a54 	.word	0x08008a54
 8001940:	4451c000 	.word	0x4451c000
 8001944:	08008aa4 	.word	0x08008aa4

08001948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001986:	2007      	movs	r0, #7
 8001988:	f000 fb14 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_TIM_PWM_MspInit+0x40>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_TIM_PWM_MspInit+0x40>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_TIM_PWM_MspInit+0x40>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <HAL_TIM_MspPostInit+0x68>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11e      	bne.n	8001a3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <HAL_TIM_MspPostInit+0x70>)
 8001a38:	f000 fb90 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d133      	bne.n	8001ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	@ (8001aec <HAL_UART_MspInit+0x9c>)
 8001ac6:	f000 fb49 	bl	800215c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2026      	movs	r0, #38	@ 0x26
 8001ad0:	f000 fa7b 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad4:	2026      	movs	r0, #38	@ 0x26
 8001ad6:	f000 fa94 	bl	8002002 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <NMI_Handler+0x4>

08001af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <MemManage_Handler+0x4>

08001b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b46:	f000 f945 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <USART2_IRQHandler+0x10>)
 8001b56:	f001 ff5b 	bl	8003a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000023c 	.word	0x2000023c

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_kill>:

int _kill(int pid, int sig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b7e:	f004 fbdd 	bl	800633c <__errno>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2216      	movs	r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
  return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe7 	bl	8001b74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba6:	bf00      	nop
 8001ba8:	e7fd      	b.n	8001ba6 <_exit+0x12>

08001baa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e00a      	b.n	8001bd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	60ba      	str	r2, [r7, #8]
 8001bc8:	b2ca      	uxtb	r2, r1
 8001bca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbf0      	blt.n	8001bbc <_read+0x12>
  }

  return len;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_isatty>:

int _isatty(int file)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f004 fb5e 	bl	800633c <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20018000 	.word	0x20018000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200002a4 	.word	0x200002a4
 8001cb4:	200003f8 	.word	0x200003f8

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce0:	f7ff ffea 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	@ (8001d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f004 fb1d 	bl	8006348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7ff fb4f 	bl	80013b0 <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d20:	08008f84 	.word	0x08008f84
  ldr r2, =_sbss
 8001d24:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d28:	200003f8 	.word	0x200003f8

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 f92b 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fdf0 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f943 	bl	800201e <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f90b 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	@ (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	200002a8 	.word	0x200002a8

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200002a8 	.word	0x200002a8

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	@ (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	@ (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	@ (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	@ 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	@ 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff feda 	bl	8001dfc <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2280      	movs	r2, #128	@ 0x80
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e052      	b.n	800210e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0216 	bic.w	r2, r2, #22
 8002076:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002086:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_DMA_Abort+0x62>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b8:	e013      	b.n	80020e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ba:	f7ff fe9f 	bl	8001dfc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d90c      	bls.n	80020e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2203      	movs	r2, #3
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e015      	b.n	800210e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e4      	bne.n	80020ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	223f      	movs	r2, #63	@ 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00c      	b.n	800214e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2205      	movs	r2, #5
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e159      	b.n	800242c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8148 	bne.w	8002426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d005      	beq.n	80021ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d130      	bne.n	8002210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a2 	beq.w	8002426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b57      	ldr	r3, [pc, #348]	@ (8002444 <HAL_GPIO_Init+0x2e8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a56      	ldr	r2, [pc, #344]	@ (8002444 <HAL_GPIO_Init+0x2e8>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	4b54      	ldr	r3, [pc, #336]	@ (8002444 <HAL_GPIO_Init+0x2e8>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_GPIO_Init+0x2ec>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a49      	ldr	r2, [pc, #292]	@ (800244c <HAL_GPIO_Init+0x2f0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d019      	beq.n	800235e <HAL_GPIO_Init+0x202>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a48      	ldr	r2, [pc, #288]	@ (8002450 <HAL_GPIO_Init+0x2f4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0x1fe>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a47      	ldr	r2, [pc, #284]	@ (8002454 <HAL_GPIO_Init+0x2f8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_GPIO_Init+0x1fa>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a46      	ldr	r2, [pc, #280]	@ (8002458 <HAL_GPIO_Init+0x2fc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x1f6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a45      	ldr	r2, [pc, #276]	@ (800245c <HAL_GPIO_Init+0x300>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_GPIO_Init+0x1f2>
 800234a:	2304      	movs	r3, #4
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800234e:	2307      	movs	r3, #7
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x204>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x204>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800235e:	2300      	movs	r3, #0
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002370:	4935      	ldr	r1, [pc, #212]	@ (8002448 <HAL_GPIO_Init+0x2ec>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b38      	ldr	r3, [pc, #224]	@ (8002460 <HAL_GPIO_Init+0x304>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002460 <HAL_GPIO_Init+0x304>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_GPIO_Init+0x304>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023cc:	4a24      	ldr	r2, [pc, #144]	@ (8002460 <HAL_GPIO_Init+0x304>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d2:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <HAL_GPIO_Init+0x304>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <HAL_GPIO_Init+0x304>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <HAL_GPIO_Init+0x304>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002420:	4a0f      	ldr	r2, [pc, #60]	@ (8002460 <HAL_GPIO_Init+0x304>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	f67f aea2 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3724      	adds	r7, #36	@ 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40013800 	.word	0x40013800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020400 	.word	0x40020400
 8002454:	40020800 	.word	0x40020800
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40021000 	.word	0x40021000
 8002460:	40013c00 	.word	0x40013c00

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002480:	e003      	b.n	800248a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e267      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d075      	beq.n	80025a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b85      	ldr	r3, [pc, #532]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b7e      	ldr	r3, [pc, #504]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e242      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x74>
 80024fe:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6f      	ldr	r2, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6d      	ldr	r3, [pc, #436]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6c      	ldr	r2, [pc, #432]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 8002530:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a68      	ldr	r2, [pc, #416]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b66      	ldr	r3, [pc, #408]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fc54 	bl	8001dfc <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fc50 	bl	8001dfc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e207      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5b      	ldr	r3, [pc, #364]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xc0>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fc40 	bl	8001dfc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fc3c 	bl	8001dfc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1f3      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b51      	ldr	r3, [pc, #324]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0xe8>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ae:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c7      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4937      	ldr	r1, [pc, #220]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff fbf5 	bl	8001dfc <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff fbf1 	bl	8001dfc <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a8      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4925      	ldr	r1, [pc, #148]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff fbd4 	bl	8001dfc <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff fbd0 	bl	8001dfc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e187      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_RCC_OscConfig+0x248>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff fbb4 	bl	8001dfc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff fbb0 	bl	8001dfc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e167      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x200>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_OscConfig+0x248>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7ff fb9d 	bl	8001dfc <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00e      	b.n	80026e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c6:	f7ff fb99 	bl	8001dfc <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d907      	bls.n	80026e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e150      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ea      	bne.n	80026c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b81      	ldr	r3, [pc, #516]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b7d      	ldr	r3, [pc, #500]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a7c      	ldr	r2, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b7a      	ldr	r3, [pc, #488]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b77      	ldr	r3, [pc, #476]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b74      	ldr	r3, [pc, #464]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a73      	ldr	r2, [pc, #460]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7ff fb59 	bl	8001dfc <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7ff fb55 	bl	8001dfc <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e10c      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x2ea>
 8002774:	4b64      	ldr	r3, [pc, #400]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a63      	ldr	r2, [pc, #396]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x30c>
 800278a:	4b5f      	ldr	r3, [pc, #380]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	4a5e      	ldr	r2, [pc, #376]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	@ 0x70
 8002796:	4b5c      	ldr	r3, [pc, #368]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a5b      	ldr	r2, [pc, #364]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 80027a4:	4b58      	ldr	r3, [pc, #352]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b0:	4b55      	ldr	r3, [pc, #340]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a54      	ldr	r2, [pc, #336]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff fb1a 	bl	8001dfc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7ff fb16 	bl	8001dfc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0cb      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7ff fb04 	bl	8001dfc <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7ff fb00 	bl	8001dfc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0b5      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	4b3e      	ldr	r3, [pc, #248]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	4a38      	ldr	r2, [pc, #224]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a1 	beq.w	8002978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002836:	4b34      	ldr	r3, [pc, #208]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d05c      	beq.n	80028fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d141      	bne.n	80028ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <HAL_RCC_OscConfig+0x478>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fad4 	bl	8001dfc <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7ff fad0 	bl	8001dfc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e087      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	491b      	ldr	r1, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x478>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff faa9 	bl	8001dfc <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ae:	f7ff faa5 	bl	8001dfc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e05c      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x416>
 80028cc:	e054      	b.n	8002978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff fa92 	bl	8001dfc <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7ff fa8e 	bl	8001dfc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e045      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
 80028fa:	e03d      	b.n	8002978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e038      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x4ec>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d028      	beq.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d121      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d11a      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800294a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
 800295e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7ff f9c0 	bl	8001dfc <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7ff f9bc 	bl	8001dfc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f920 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08008ad8 	.word	0x08008ad8
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	20000008 	.word	0x20000008

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b094      	sub	sp, #80	@ 0x50
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6c:	4b79      	ldr	r3, [pc, #484]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d00d      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x40>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	f200 80e1 	bhi.w	8002d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x34>
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b86:	e0db      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b73      	ldr	r3, [pc, #460]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8c:	e0db      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8e:	4b73      	ldr	r3, [pc, #460]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b92:	e0d8      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4b6f      	ldr	r3, [pc, #444]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b6a      	ldr	r3, [pc, #424]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0159      	lsls	r1, r3, #5
 8002bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd8:	0150      	lsls	r0, r2, #5
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4621      	mov	r1, r4
 8002be0:	1a51      	subs	r1, r2, r1
 8002be2:	6139      	str	r1, [r7, #16]
 8002be4:	4629      	mov	r1, r5
 8002be6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	018b      	lsls	r3, r1, #6
 8002bfc:	4651      	mov	r1, sl
 8002bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c02:	4651      	mov	r1, sl
 8002c04:	018a      	lsls	r2, r1, #6
 8002c06:	4651      	mov	r1, sl
 8002c08:	ebb2 0801 	subs.w	r8, r2, r1
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c26:	4690      	mov	r8, r2
 8002c28:	4699      	mov	r9, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	eb18 0303 	adds.w	r3, r8, r3
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	462b      	mov	r3, r5
 8002c34:	eb49 0303 	adc.w	r3, r9, r3
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c46:	4629      	mov	r1, r5
 8002c48:	024b      	lsls	r3, r1, #9
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c50:	4621      	mov	r1, r4
 8002c52:	024a      	lsls	r2, r1, #9
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c64:	f7fe f828 	bl	8000cb8 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c70:	e058      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	0159      	lsls	r1, r3, #5
 8002c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9e:	0150      	lsls	r0, r2, #5
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002caa:	4649      	mov	r1, r9
 8002cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	eb45 0303 	adc.w	r3, r5, r3
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	028b      	lsls	r3, r1, #10
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d04:	4621      	mov	r1, r4
 8002d06:	028a      	lsls	r2, r1, #10
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	61fa      	str	r2, [r7, #28]
 8002d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d18:	f7fd ffce 	bl	8000cb8 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3750      	adds	r7, #80	@ 0x50
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a9b      	lsrs	r3, r3, #10
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08008ae8 	.word	0x08008ae8

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da4:	f7ff ffdc 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0b5b      	lsrs	r3, r3, #13
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08008ae8 	.word	0x08008ae8

08002dc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e041      	b.n	8002e5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fdd2 	bl	8001998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 fa04 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x24>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e022      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d109      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x3e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e015      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d109      	bne.n	8002ec0 <HAL_TIM_PWM_Start+0x58>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e068      	b.n	8002fac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0x82>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0x92>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f08:	e003      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2201      	movs	r2, #1
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb92 	bl	8003644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a23      	ldr	r2, [pc, #140]	@ (8002fb4 <HAL_TIM_PWM_Start+0x14c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d107      	bne.n	8002f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <HAL_TIM_PWM_Start+0x14c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x10e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4c:	d013      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x10e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_TIM_PWM_Start+0x150>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x10e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a17      	ldr	r2, [pc, #92]	@ (8002fbc <HAL_TIM_PWM_Start+0x154>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x10e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a16      	ldr	r2, [pc, #88]	@ (8002fc0 <HAL_TIM_PWM_Start+0x158>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x10e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <HAL_TIM_PWM_Start+0x15c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d111      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d010      	beq.n	8002faa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	e007      	b.n	8002faa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	40000c00 	.word	0x40000c00
 8002fc4:	40014000 	.word	0x40014000

08002fc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fb32 	bl	8003644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a29      	ldr	r2, [pc, #164]	@ (800308c <HAL_TIM_PWM_Stop+0xc4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d117      	bne.n	800301a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a1a      	ldr	r2, [r3, #32]
 8002ff0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_TIM_PWM_Stop+0x52>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	f240 4344 	movw	r3, #1092	@ 0x444
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d107      	bne.n	800301a <HAL_TIM_PWM_Stop+0x52>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <HAL_TIM_PWM_Stop+0x82>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	f240 4344 	movw	r3, #1092	@ 0x444
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_TIM_PWM_Stop+0x82>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_TIM_PWM_Stop+0x92>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003058:	e013      	b.n	8003082 <HAL_TIM_PWM_Stop+0xba>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d104      	bne.n	800306a <HAL_TIM_PWM_Stop+0xa2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003068:	e00b      	b.n	8003082 <HAL_TIM_PWM_Stop+0xba>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d104      	bne.n	800307a <HAL_TIM_PWM_Stop+0xb2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003078:	e003      	b.n	8003082 <HAL_TIM_PWM_Stop+0xba>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40010000 	.word	0x40010000

08003090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0ae      	b.n	800320c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f200 809f 	bhi.w	80031fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030be:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080031fd 	.word	0x080031fd
 80030cc:	080031fd 	.word	0x080031fd
 80030d0:	080031fd 	.word	0x080031fd
 80030d4:	08003139 	.word	0x08003139
 80030d8:	080031fd 	.word	0x080031fd
 80030dc:	080031fd 	.word	0x080031fd
 80030e0:	080031fd 	.word	0x080031fd
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	080031fd 	.word	0x080031fd
 80030ec:	080031fd 	.word	0x080031fd
 80030f0:	080031fd 	.word	0x080031fd
 80030f4:	080031bb 	.word	0x080031bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f914 	bl	800332c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6999      	ldr	r1, [r3, #24]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	619a      	str	r2, [r3, #24]
      break;
 8003136:	e064      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f95a 	bl	80033f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6999      	ldr	r1, [r3, #24]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	619a      	str	r2, [r3, #24]
      break;
 8003178:	e043      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f9a5 	bl	80034d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0208 	orr.w	r2, r2, #8
 8003194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69d9      	ldr	r1, [r3, #28]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
      break;
 80031b8:	e023      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f9ef 	bl	80035a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3a      	ldr	r2, [pc, #232]	@ (8003310 <TIM_Base_SetConfig+0xfc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00f      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a37      	ldr	r2, [pc, #220]	@ (8003314 <TIM_Base_SetConfig+0x100>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a36      	ldr	r2, [pc, #216]	@ (8003318 <TIM_Base_SetConfig+0x104>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a35      	ldr	r2, [pc, #212]	@ (800331c <TIM_Base_SetConfig+0x108>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <TIM_Base_SetConfig+0xfc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a28      	ldr	r2, [pc, #160]	@ (8003314 <TIM_Base_SetConfig+0x100>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a27      	ldr	r2, [pc, #156]	@ (8003318 <TIM_Base_SetConfig+0x104>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a26      	ldr	r2, [pc, #152]	@ (800331c <TIM_Base_SetConfig+0x108>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a25      	ldr	r2, [pc, #148]	@ (8003320 <TIM_Base_SetConfig+0x10c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a24      	ldr	r2, [pc, #144]	@ (8003324 <TIM_Base_SetConfig+0x110>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a23      	ldr	r2, [pc, #140]	@ (8003328 <TIM_Base_SetConfig+0x114>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003310 <TIM_Base_SetConfig+0xfc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f023 0201 	bic.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]
  }
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800

0800332c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f023 0201 	bic.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0302 	bic.w	r3, r3, #2
 8003374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <TIM_OC1_SetConfig+0xc8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10c      	bne.n	80033a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0308 	bic.w	r3, r3, #8
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <TIM_OC1_SetConfig+0xc8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d111      	bne.n	80033ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010000 	.word	0x40010000

080033f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 0210 	bic.w	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0320 	bic.w	r3, r3, #32
 8003442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1e      	ldr	r2, [pc, #120]	@ (80034cc <TIM_OC2_SetConfig+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10d      	bne.n	8003474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800345e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <TIM_OC2_SetConfig+0xd4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d113      	bne.n	80034a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000

080034d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <TIM_OC3_SetConfig+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d10d      	bne.n	800354a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <TIM_OC3_SetConfig+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d113      	bne.n	800357a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40010000 	.word	0x40010000

080035a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a10      	ldr	r2, [pc, #64]	@ (8003640 <TIM_OC4_SetConfig+0x9c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800360a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000

08003644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2201      	movs	r2, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	43db      	mvns	r3, r3
 8003666:	401a      	ands	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e050      	b.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d013      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a18      	ldr	r2, [pc, #96]	@ (800375c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10c      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000

0800376c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003784:	2302      	movs	r3, #2
 8003786:	e03d      	b.n	8003804 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe f90a 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	@ 0x24
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fdc7 	bl	80043e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	@ 0x28
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d175      	bne.n	80039bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_UART_Transmit+0x2c>
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e06e      	b.n	80039be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2221      	movs	r2, #33	@ 0x21
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fe fa85 	bl	8001dfc <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003908:	d108      	bne.n	800391c <HAL_UART_Transmit+0x6c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e003      	b.n	8003924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003924:	e02e      	b.n	8003984 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	@ 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fb29 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e03a      	b.n	80039be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3302      	adds	r3, #2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e007      	b.n	8003976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cb      	bne.n	8003926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2140      	movs	r1, #64	@ 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 faf5 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e006      	b.n	80039be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d112      	bne.n	8003a06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_UART_Receive_IT+0x26>
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e00b      	b.n	8003a08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	461a      	mov	r2, r3
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fb1c 	bl	800403a <UART_Start_Receive_IT>
 8003a02:	4603      	mov	r3, r0
 8003a04:	e000      	b.n	8003a08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0ba      	sub	sp, #232	@ 0xe8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_UART_IRQHandler+0x66>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fbfc 	bl	800426c <UART_Receive_IT>
      return;
 8003a74:	e25b      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80de 	beq.w	8003c3c <HAL_UART_IRQHandler+0x22c>
 8003a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80d1 	beq.w	8003c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xae>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xd2>
 8003aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	f043 0202 	orr.w	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_UART_IRQHandler+0xf6>
 8003aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d011      	beq.n	8003b36 <HAL_UART_IRQHandler+0x126>
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f043 0208 	orr.w	r2, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 81f2 	beq.w	8003f24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x14e>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb87 	bl	800426c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_UART_IRQHandler+0x17a>
 8003b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d04f      	beq.n	8003c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fa8f 	bl	80040ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d141      	bne.n	8003c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d9      	bne.n	8003b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d013      	beq.n	8003c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_UART_IRQHandler+0x3e0>)
 8003bf8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fa89 	bl	8002116 <HAL_DMA_Abort_IT>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c14:	4610      	mov	r0, r2
 8003c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	e00e      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f99e 	bl	8003f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	e00a      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f99a 	bl	8003f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e006      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f996 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c36:	e175      	b.n	8003f24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	bf00      	nop
    return;
 8003c3a:	e173      	b.n	8003f24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 814f 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8148 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8141 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	f040 80b6 	bne.w	8003df4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8145 	beq.w	8003f28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	f080 813e 	bcs.w	8003f28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cbe:	f000 8088 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1d9      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3314      	adds	r3, #20
 8003d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e1      	bne.n	8003d0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e3      	bne.n	8003d4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da2:	f023 0310 	bic.w	r3, r3, #16
 8003da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003db4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003db6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e3      	bne.n	8003d90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe f932 	bl	8002036 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f8c1 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dee:	e09b      	b.n	8003f28 <HAL_UART_IRQHandler+0x518>
 8003df0:	08004175 	.word	0x08004175
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 808e 	beq.w	8003f2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8089 	beq.w	8003f2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	623b      	str	r3, [r7, #32]
   return(result);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f847 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee2:	e023      	b.n	8003f2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_UART_IRQHandler+0x4f4>
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f94d 	bl	800419c <UART_Transmit_IT>
    return;
 8003f02:	e014      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_UART_IRQHandler+0x51e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f98d 	bl	800423c <UART_EndTransmit_IT>
    return;
 8003f22:	e004      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f24:	bf00      	nop
 8003f26:	e002      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f2c:	bf00      	nop
  }
}
 8003f2e:	37e8      	adds	r7, #232	@ 0xe8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	e03b      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d037      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa2:	f7fd ff2b 	bl	8001dfc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e03a      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d023      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b80      	cmp	r3, #128	@ 0x80
 8003fce:	d020      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d01d      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d116      	bne.n	8004012 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f857 	bl	80040ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2208      	movs	r2, #8
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	429a      	cmp	r2, r3
 800402e:	d0b4      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	4613      	mov	r3, r2
 8004046:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2222      	movs	r2, #34	@ 0x22
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0220 	orr.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b095      	sub	sp, #84	@ 0x54
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80040d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800410a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	2b01      	cmp	r3, #1
 8004124:	d119      	bne.n	800415a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	60bb      	str	r3, [r7, #8]
   return(result);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f023 0310 	bic.w	r3, r3, #16
 800413c:	647b      	str	r3, [r7, #68]	@ 0x44
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004146:	61ba      	str	r2, [r7, #24]
 8004148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	613b      	str	r3, [r7, #16]
   return(result);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004168:	bf00      	nop
 800416a:	3754      	adds	r7, #84	@ 0x54
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff fee4 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b21      	cmp	r3, #33	@ 0x21
 80041ae:	d13e      	bne.n	800422e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b8:	d114      	bne.n	80041e4 <UART_Transmit_IT+0x48>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d110      	bne.n	80041e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]
 80041e2:	e008      	b.n	80041f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6211      	str	r1, [r2, #32]
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4619      	mov	r1, r3
 8004204:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004218:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004228:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004252:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fe69 	bl	8003f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	@ 0x30
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b22      	cmp	r3, #34	@ 0x22
 800427e:	f040 80ae 	bne.w	80043de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d117      	bne.n	80042bc <UART_Receive_IT+0x50>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	1c9a      	adds	r2, r3, #2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ba:	e026      	b.n	800430a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ce:	d007      	beq.n	80042e0 <UART_Receive_IT+0x74>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <UART_Receive_IT+0x82>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e008      	b.n	8004300 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4619      	mov	r1, r3
 8004318:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800431a:	2b00      	cmp	r3, #0
 800431c:	d15d      	bne.n	80043da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0220 	bic.w	r2, r2, #32
 800432c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800433c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d135      	bne.n	80043d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	613b      	str	r3, [r7, #16]
   return(result);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438a:	623a      	str	r2, [r7, #32]
 800438c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	69f9      	ldr	r1, [r7, #28]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	61bb      	str	r3, [r7, #24]
   return(result);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d10a      	bne.n	80043c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fdd1 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
 80043ce:	e002      	b.n	80043d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fdb9 	bl	8003f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e002      	b.n	80043e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3730      	adds	r7, #48	@ 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b0c0      	sub	sp, #256	@ 0x100
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	ea40 0301 	orr.w	r3, r0, r1
 8004410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	431a      	orrs	r2, r3
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004440:	f021 010c 	bic.w	r1, r1, #12
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800444e:	430b      	orrs	r3, r1
 8004450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004462:	6999      	ldr	r1, [r3, #24]
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	ea40 0301 	orr.w	r3, r0, r1
 800446e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b8f      	ldr	r3, [pc, #572]	@ (80046b4 <UART_SetConfig+0x2cc>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d005      	beq.n	8004488 <UART_SetConfig+0xa0>
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b8d      	ldr	r3, [pc, #564]	@ (80046b8 <UART_SetConfig+0x2d0>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d104      	bne.n	8004492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe fc8a 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 800448c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004490:	e003      	b.n	800449a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004492:	f7fe fc71 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004496:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a4:	f040 810c 	bne.w	80046c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044c2:	415b      	adcs	r3, r3
 80044c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044ca:	4621      	mov	r1, r4
 80044cc:	eb12 0801 	adds.w	r8, r2, r1
 80044d0:	4629      	mov	r1, r5
 80044d2:	eb43 0901 	adc.w	r9, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ea:	4690      	mov	r8, r2
 80044ec:	4699      	mov	r9, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb18 0303 	adds.w	r3, r8, r3
 80044f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044f8:	462b      	mov	r3, r5
 80044fa:	eb49 0303 	adc.w	r3, r9, r3
 80044fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800450e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004516:	460b      	mov	r3, r1
 8004518:	18db      	adds	r3, r3, r3
 800451a:	653b      	str	r3, [r7, #80]	@ 0x50
 800451c:	4613      	mov	r3, r2
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	657b      	str	r3, [r7, #84]	@ 0x54
 8004524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800452c:	f7fc fbc4 	bl	8000cb8 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4b61      	ldr	r3, [pc, #388]	@ (80046bc <UART_SetConfig+0x2d4>)
 8004536:	fba3 2302 	umull	r2, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	011c      	lsls	r4, r3, #4
 800453e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800454c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004558:	415b      	adcs	r3, r3
 800455a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800455c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004560:	4641      	mov	r1, r8
 8004562:	eb12 0a01 	adds.w	sl, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb43 0b01 	adc.w	fp, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800457c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004580:	4692      	mov	sl, r2
 8004582:	469b      	mov	fp, r3
 8004584:	4643      	mov	r3, r8
 8004586:	eb1a 0303 	adds.w	r3, sl, r3
 800458a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800458e:	464b      	mov	r3, r9
 8004590:	eb4b 0303 	adc.w	r3, fp, r3
 8004594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045ac:	460b      	mov	r3, r1
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b2:	4613      	mov	r3, r2
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045c2:	f7fc fb79 	bl	8000cb8 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	4b3b      	ldr	r3, [pc, #236]	@ (80046bc <UART_SetConfig+0x2d4>)
 80045ce:	fba3 2301 	umull	r2, r3, r3, r1
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2264      	movs	r2, #100	@ 0x64
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045e2:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <UART_SetConfig+0x2d4>)
 80045e4:	fba3 2302 	umull	r2, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045f0:	441c      	add	r4, r3
 80045f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	1891      	adds	r1, r2, r2
 800460a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800460c:	415b      	adcs	r3, r3
 800460e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004614:	4641      	mov	r1, r8
 8004616:	1851      	adds	r1, r2, r1
 8004618:	6339      	str	r1, [r7, #48]	@ 0x30
 800461a:	4649      	mov	r1, r9
 800461c:	414b      	adcs	r3, r1
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800462c:	4659      	mov	r1, fp
 800462e:	00cb      	lsls	r3, r1, #3
 8004630:	4651      	mov	r1, sl
 8004632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004636:	4651      	mov	r1, sl
 8004638:	00ca      	lsls	r2, r1, #3
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	4603      	mov	r3, r0
 8004640:	4642      	mov	r2, r8
 8004642:	189b      	adds	r3, r3, r2
 8004644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004648:	464b      	mov	r3, r9
 800464a:	460a      	mov	r2, r1
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004660:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800467a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800467e:	f7fc fb1b 	bl	8000cb8 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <UART_SetConfig+0x2d4>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	@ 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	@ 0x32
 800469a:	4a08      	ldr	r2, [pc, #32]	@ (80046bc <UART_SetConfig+0x2d4>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4422      	add	r2, r4
 80046ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b0:	e106      	b.n	80048c0 <UART_SetConfig+0x4d8>
 80046b2:	bf00      	nop
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046d2:	4642      	mov	r2, r8
 80046d4:	464b      	mov	r3, r9
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	6239      	str	r1, [r7, #32]
 80046da:	415b      	adcs	r3, r3
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046e2:	4641      	mov	r1, r8
 80046e4:	1854      	adds	r4, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb43 0501 	adc.w	r5, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	00eb      	lsls	r3, r5, #3
 80046f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fa:	00e2      	lsls	r2, r4, #3
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	4643      	mov	r3, r8
 8004702:	18e3      	adds	r3, r4, r3
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004708:	464b      	mov	r3, r9
 800470a:	eb45 0303 	adc.w	r3, r5, r3
 800470e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800472e:	4629      	mov	r1, r5
 8004730:	008b      	lsls	r3, r1, #2
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004738:	4621      	mov	r1, r4
 800473a:	008a      	lsls	r2, r1, #2
 800473c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004740:	f7fc faba 	bl	8000cb8 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4b60      	ldr	r3, [pc, #384]	@ (80048cc <UART_SetConfig+0x4e4>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	011c      	lsls	r4, r3, #4
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800475c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	61b9      	str	r1, [r7, #24]
 800476c:	415b      	adcs	r3, r3
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004774:	4641      	mov	r1, r8
 8004776:	1851      	adds	r1, r2, r1
 8004778:	6139      	str	r1, [r7, #16]
 800477a:	4649      	mov	r1, r9
 800477c:	414b      	adcs	r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4651      	mov	r1, sl
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4642      	mov	r2, r8
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047a8:	464b      	mov	r3, r9
 80047aa:	460a      	mov	r2, r1
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047cc:	4649      	mov	r1, r9
 80047ce:	008b      	lsls	r3, r1, #2
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d6:	4641      	mov	r1, r8
 80047d8:	008a      	lsls	r2, r1, #2
 80047da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047de:	f7fc fa6b 	bl	8000cb8 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	4b38      	ldr	r3, [pc, #224]	@ (80048cc <UART_SetConfig+0x4e4>)
 80047ea:	fba3 2301 	umull	r2, r3, r3, r1
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2264      	movs	r2, #100	@ 0x64
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	1acb      	subs	r3, r1, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	@ 0x32
 80047fc:	4a33      	ldr	r2, [pc, #204]	@ (80048cc <UART_SetConfig+0x4e4>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004808:	441c      	add	r4, r3
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	673b      	str	r3, [r7, #112]	@ 0x70
 8004812:	677a      	str	r2, [r7, #116]	@ 0x74
 8004814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	1891      	adds	r1, r2, r2
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	415b      	adcs	r3, r3
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004828:	4641      	mov	r1, r8
 800482a:	1851      	adds	r1, r2, r1
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	4649      	mov	r1, r9
 8004830:	414b      	adcs	r3, r1
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004840:	4659      	mov	r1, fp
 8004842:	00cb      	lsls	r3, r1, #3
 8004844:	4651      	mov	r1, sl
 8004846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484a:	4651      	mov	r1, sl
 800484c:	00ca      	lsls	r2, r1, #3
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	4603      	mov	r3, r0
 8004854:	4642      	mov	r2, r8
 8004856:	189b      	adds	r3, r3, r2
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800485a:	464b      	mov	r3, r9
 800485c:	460a      	mov	r2, r1
 800485e:	eb42 0303 	adc.w	r3, r2, r3
 8004862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	663b      	str	r3, [r7, #96]	@ 0x60
 800486e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800487c:	4649      	mov	r1, r9
 800487e:	008b      	lsls	r3, r1, #2
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004886:	4641      	mov	r1, r8
 8004888:	008a      	lsls	r2, r1, #2
 800488a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800488e:	f7fc fa13 	bl	8000cb8 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <UART_SetConfig+0x4e4>)
 8004898:	fba3 1302 	umull	r1, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2164      	movs	r1, #100	@ 0x64
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	3332      	adds	r3, #50	@ 0x32
 80048aa:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <UART_SetConfig+0x4e4>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4422      	add	r2, r4
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048c6:	46bd      	mov	sp, r7
 80048c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <atof>:
 80048d0:	2100      	movs	r1, #0
 80048d2:	f000 be05 	b.w	80054e0 <strtod>

080048d6 <sulp>:
 80048d6:	b570      	push	{r4, r5, r6, lr}
 80048d8:	4604      	mov	r4, r0
 80048da:	460d      	mov	r5, r1
 80048dc:	ec45 4b10 	vmov	d0, r4, r5
 80048e0:	4616      	mov	r6, r2
 80048e2:	f003 fb9d 	bl	8008020 <__ulp>
 80048e6:	ec51 0b10 	vmov	r0, r1, d0
 80048ea:	b17e      	cbz	r6, 800490c <sulp+0x36>
 80048ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80048f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dd09      	ble.n	800490c <sulp+0x36>
 80048f8:	051b      	lsls	r3, r3, #20
 80048fa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80048fe:	2400      	movs	r4, #0
 8004900:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	f7fb fe8e 	bl	8000628 <__aeabi_dmul>
 800490c:	ec41 0b10 	vmov	d0, r0, r1
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	0000      	movs	r0, r0
 8004914:	0000      	movs	r0, r0
	...

08004918 <_strtod_l>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	b09f      	sub	sp, #124	@ 0x7c
 800491e:	460c      	mov	r4, r1
 8004920:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004922:	2200      	movs	r2, #0
 8004924:	921a      	str	r2, [sp, #104]	@ 0x68
 8004926:	9005      	str	r0, [sp, #20]
 8004928:	f04f 0a00 	mov.w	sl, #0
 800492c:	f04f 0b00 	mov.w	fp, #0
 8004930:	460a      	mov	r2, r1
 8004932:	9219      	str	r2, [sp, #100]	@ 0x64
 8004934:	7811      	ldrb	r1, [r2, #0]
 8004936:	292b      	cmp	r1, #43	@ 0x2b
 8004938:	d04a      	beq.n	80049d0 <_strtod_l+0xb8>
 800493a:	d838      	bhi.n	80049ae <_strtod_l+0x96>
 800493c:	290d      	cmp	r1, #13
 800493e:	d832      	bhi.n	80049a6 <_strtod_l+0x8e>
 8004940:	2908      	cmp	r1, #8
 8004942:	d832      	bhi.n	80049aa <_strtod_l+0x92>
 8004944:	2900      	cmp	r1, #0
 8004946:	d03b      	beq.n	80049c0 <_strtod_l+0xa8>
 8004948:	2200      	movs	r2, #0
 800494a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800494c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800494e:	782a      	ldrb	r2, [r5, #0]
 8004950:	2a30      	cmp	r2, #48	@ 0x30
 8004952:	f040 80b3 	bne.w	8004abc <_strtod_l+0x1a4>
 8004956:	786a      	ldrb	r2, [r5, #1]
 8004958:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800495c:	2a58      	cmp	r2, #88	@ 0x58
 800495e:	d16e      	bne.n	8004a3e <_strtod_l+0x126>
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	ab1a      	add	r3, sp, #104	@ 0x68
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4a8e      	ldr	r2, [pc, #568]	@ (8004ba4 <_strtod_l+0x28c>)
 800496c:	9805      	ldr	r0, [sp, #20]
 800496e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004970:	a919      	add	r1, sp, #100	@ 0x64
 8004972:	f002 fc47 	bl	8007204 <__gethex>
 8004976:	f010 060f 	ands.w	r6, r0, #15
 800497a:	4604      	mov	r4, r0
 800497c:	d005      	beq.n	800498a <_strtod_l+0x72>
 800497e:	2e06      	cmp	r6, #6
 8004980:	d128      	bne.n	80049d4 <_strtod_l+0xbc>
 8004982:	3501      	adds	r5, #1
 8004984:	2300      	movs	r3, #0
 8004986:	9519      	str	r5, [sp, #100]	@ 0x64
 8004988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800498a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 858e 	bne.w	80054ae <_strtod_l+0xb96>
 8004992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004994:	b1cb      	cbz	r3, 80049ca <_strtod_l+0xb2>
 8004996:	4652      	mov	r2, sl
 8004998:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800499c:	ec43 2b10 	vmov	d0, r2, r3
 80049a0:	b01f      	add	sp, #124	@ 0x7c
 80049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a6:	2920      	cmp	r1, #32
 80049a8:	d1ce      	bne.n	8004948 <_strtod_l+0x30>
 80049aa:	3201      	adds	r2, #1
 80049ac:	e7c1      	b.n	8004932 <_strtod_l+0x1a>
 80049ae:	292d      	cmp	r1, #45	@ 0x2d
 80049b0:	d1ca      	bne.n	8004948 <_strtod_l+0x30>
 80049b2:	2101      	movs	r1, #1
 80049b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80049b6:	1c51      	adds	r1, r2, #1
 80049b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80049ba:	7852      	ldrb	r2, [r2, #1]
 80049bc:	2a00      	cmp	r2, #0
 80049be:	d1c5      	bne.n	800494c <_strtod_l+0x34>
 80049c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80049c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 8570 	bne.w	80054aa <_strtod_l+0xb92>
 80049ca:	4652      	mov	r2, sl
 80049cc:	465b      	mov	r3, fp
 80049ce:	e7e5      	b.n	800499c <_strtod_l+0x84>
 80049d0:	2100      	movs	r1, #0
 80049d2:	e7ef      	b.n	80049b4 <_strtod_l+0x9c>
 80049d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80049d6:	b13a      	cbz	r2, 80049e8 <_strtod_l+0xd0>
 80049d8:	2135      	movs	r1, #53	@ 0x35
 80049da:	a81c      	add	r0, sp, #112	@ 0x70
 80049dc:	f003 fc1a 	bl	8008214 <__copybits>
 80049e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80049e2:	9805      	ldr	r0, [sp, #20]
 80049e4:	f002 ffe8 	bl	80079b8 <_Bfree>
 80049e8:	3e01      	subs	r6, #1
 80049ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80049ec:	2e04      	cmp	r6, #4
 80049ee:	d806      	bhi.n	80049fe <_strtod_l+0xe6>
 80049f0:	e8df f006 	tbb	[pc, r6]
 80049f4:	201d0314 	.word	0x201d0314
 80049f8:	14          	.byte	0x14
 80049f9:	00          	.byte	0x00
 80049fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80049fe:	05e1      	lsls	r1, r4, #23
 8004a00:	bf48      	it	mi
 8004a02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004a0a:	0d1b      	lsrs	r3, r3, #20
 8004a0c:	051b      	lsls	r3, r3, #20
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1bb      	bne.n	800498a <_strtod_l+0x72>
 8004a12:	f001 fc93 	bl	800633c <__errno>
 8004a16:	2322      	movs	r3, #34	@ 0x22
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	e7b6      	b.n	800498a <_strtod_l+0x72>
 8004a1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004a20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004a24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a2c:	e7e7      	b.n	80049fe <_strtod_l+0xe6>
 8004a2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004bac <_strtod_l+0x294>
 8004a32:	e7e4      	b.n	80049fe <_strtod_l+0xe6>
 8004a34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004a38:	f04f 3aff 	mov.w	sl, #4294967295
 8004a3c:	e7df      	b.n	80049fe <_strtod_l+0xe6>
 8004a3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b30      	cmp	r3, #48	@ 0x30
 8004a48:	d0f9      	beq.n	8004a3e <_strtod_l+0x126>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d09d      	beq.n	800498a <_strtod_l+0x72>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a54:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a56:	2300      	movs	r3, #0
 8004a58:	9308      	str	r3, [sp, #32]
 8004a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a5c:	461f      	mov	r7, r3
 8004a5e:	220a      	movs	r2, #10
 8004a60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004a62:	7805      	ldrb	r5, [r0, #0]
 8004a64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004a68:	b2d9      	uxtb	r1, r3
 8004a6a:	2909      	cmp	r1, #9
 8004a6c:	d928      	bls.n	8004ac0 <_strtod_l+0x1a8>
 8004a6e:	494e      	ldr	r1, [pc, #312]	@ (8004ba8 <_strtod_l+0x290>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	f001 fbab 	bl	80061cc <strncmp>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d032      	beq.n	8004ae0 <_strtod_l+0x1c8>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	4681      	mov	r9, r0
 8004a80:	463d      	mov	r5, r7
 8004a82:	4603      	mov	r3, r0
 8004a84:	2a65      	cmp	r2, #101	@ 0x65
 8004a86:	d001      	beq.n	8004a8c <_strtod_l+0x174>
 8004a88:	2a45      	cmp	r2, #69	@ 0x45
 8004a8a:	d114      	bne.n	8004ab6 <_strtod_l+0x19e>
 8004a8c:	b91d      	cbnz	r5, 8004a96 <_strtod_l+0x17e>
 8004a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a90:	4302      	orrs	r2, r0
 8004a92:	d095      	beq.n	80049c0 <_strtod_l+0xa8>
 8004a94:	2500      	movs	r5, #0
 8004a96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004a98:	1c62      	adds	r2, r4, #1
 8004a9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a9c:	7862      	ldrb	r2, [r4, #1]
 8004a9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8004aa0:	d077      	beq.n	8004b92 <_strtod_l+0x27a>
 8004aa2:	2a2d      	cmp	r2, #45	@ 0x2d
 8004aa4:	d07b      	beq.n	8004b9e <_strtod_l+0x286>
 8004aa6:	f04f 0c00 	mov.w	ip, #0
 8004aaa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004aae:	2909      	cmp	r1, #9
 8004ab0:	f240 8082 	bls.w	8004bb8 <_strtod_l+0x2a0>
 8004ab4:	9419      	str	r4, [sp, #100]	@ 0x64
 8004ab6:	f04f 0800 	mov.w	r8, #0
 8004aba:	e0a2      	b.n	8004c02 <_strtod_l+0x2ea>
 8004abc:	2300      	movs	r3, #0
 8004abe:	e7c7      	b.n	8004a50 <_strtod_l+0x138>
 8004ac0:	2f08      	cmp	r7, #8
 8004ac2:	bfd5      	itete	le
 8004ac4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004ac6:	9908      	ldrgt	r1, [sp, #32]
 8004ac8:	fb02 3301 	mlale	r3, r2, r1, r3
 8004acc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004ad0:	f100 0001 	add.w	r0, r0, #1
 8004ad4:	bfd4      	ite	le
 8004ad6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004ad8:	9308      	strgt	r3, [sp, #32]
 8004ada:	3701      	adds	r7, #1
 8004adc:	9019      	str	r0, [sp, #100]	@ 0x64
 8004ade:	e7bf      	b.n	8004a60 <_strtod_l+0x148>
 8004ae0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ae6:	785a      	ldrb	r2, [r3, #1]
 8004ae8:	b37f      	cbz	r7, 8004b4a <_strtod_l+0x232>
 8004aea:	4681      	mov	r9, r0
 8004aec:	463d      	mov	r5, r7
 8004aee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d912      	bls.n	8004b1c <_strtod_l+0x204>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e7c4      	b.n	8004a84 <_strtod_l+0x16c>
 8004afa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b00:	785a      	ldrb	r2, [r3, #1]
 8004b02:	3001      	adds	r0, #1
 8004b04:	2a30      	cmp	r2, #48	@ 0x30
 8004b06:	d0f8      	beq.n	8004afa <_strtod_l+0x1e2>
 8004b08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	f200 84d3 	bhi.w	80054b8 <_strtod_l+0xba0>
 8004b12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b14:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b16:	4681      	mov	r9, r0
 8004b18:	2000      	movs	r0, #0
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	3a30      	subs	r2, #48	@ 0x30
 8004b1e:	f100 0301 	add.w	r3, r0, #1
 8004b22:	d02a      	beq.n	8004b7a <_strtod_l+0x262>
 8004b24:	4499      	add	r9, r3
 8004b26:	eb00 0c05 	add.w	ip, r0, r5
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	210a      	movs	r1, #10
 8004b2e:	4563      	cmp	r3, ip
 8004b30:	d10d      	bne.n	8004b4e <_strtod_l+0x236>
 8004b32:	1c69      	adds	r1, r5, #1
 8004b34:	4401      	add	r1, r0
 8004b36:	4428      	add	r0, r5
 8004b38:	2808      	cmp	r0, #8
 8004b3a:	dc16      	bgt.n	8004b6a <_strtod_l+0x252>
 8004b3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b3e:	230a      	movs	r3, #10
 8004b40:	fb03 2300 	mla	r3, r3, r0, r2
 8004b44:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b46:	2300      	movs	r3, #0
 8004b48:	e018      	b.n	8004b7c <_strtod_l+0x264>
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	e7da      	b.n	8004b04 <_strtod_l+0x1ec>
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	f103 0301 	add.w	r3, r3, #1
 8004b54:	dc03      	bgt.n	8004b5e <_strtod_l+0x246>
 8004b56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004b58:	434e      	muls	r6, r1
 8004b5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8004b5c:	e7e7      	b.n	8004b2e <_strtod_l+0x216>
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	bfde      	ittt	le
 8004b62:	9e08      	ldrle	r6, [sp, #32]
 8004b64:	434e      	mulle	r6, r1
 8004b66:	9608      	strle	r6, [sp, #32]
 8004b68:	e7e1      	b.n	8004b2e <_strtod_l+0x216>
 8004b6a:	280f      	cmp	r0, #15
 8004b6c:	dceb      	bgt.n	8004b46 <_strtod_l+0x22e>
 8004b6e:	9808      	ldr	r0, [sp, #32]
 8004b70:	230a      	movs	r3, #10
 8004b72:	fb03 2300 	mla	r3, r3, r0, r2
 8004b76:	9308      	str	r3, [sp, #32]
 8004b78:	e7e5      	b.n	8004b46 <_strtod_l+0x22e>
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004b7e:	1c50      	adds	r0, r2, #1
 8004b80:	9019      	str	r0, [sp, #100]	@ 0x64
 8004b82:	7852      	ldrb	r2, [r2, #1]
 8004b84:	4618      	mov	r0, r3
 8004b86:	460d      	mov	r5, r1
 8004b88:	e7b1      	b.n	8004aee <_strtod_l+0x1d6>
 8004b8a:	f04f 0900 	mov.w	r9, #0
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e77d      	b.n	8004a8e <_strtod_l+0x176>
 8004b92:	f04f 0c00 	mov.w	ip, #0
 8004b96:	1ca2      	adds	r2, r4, #2
 8004b98:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b9a:	78a2      	ldrb	r2, [r4, #2]
 8004b9c:	e785      	b.n	8004aaa <_strtod_l+0x192>
 8004b9e:	f04f 0c01 	mov.w	ip, #1
 8004ba2:	e7f8      	b.n	8004b96 <_strtod_l+0x27e>
 8004ba4:	08008b08 	.word	0x08008b08
 8004ba8:	08008af0 	.word	0x08008af0
 8004bac:	7ff00000 	.word	0x7ff00000
 8004bb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bb2:	1c51      	adds	r1, r2, #1
 8004bb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8004bb6:	7852      	ldrb	r2, [r2, #1]
 8004bb8:	2a30      	cmp	r2, #48	@ 0x30
 8004bba:	d0f9      	beq.n	8004bb0 <_strtod_l+0x298>
 8004bbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004bc0:	2908      	cmp	r1, #8
 8004bc2:	f63f af78 	bhi.w	8004ab6 <_strtod_l+0x19e>
 8004bc6:	3a30      	subs	r2, #48	@ 0x30
 8004bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004bca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bcc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004bce:	f04f 080a 	mov.w	r8, #10
 8004bd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bd4:	1c56      	adds	r6, r2, #1
 8004bd6:	9619      	str	r6, [sp, #100]	@ 0x64
 8004bd8:	7852      	ldrb	r2, [r2, #1]
 8004bda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004bde:	f1be 0f09 	cmp.w	lr, #9
 8004be2:	d939      	bls.n	8004c58 <_strtod_l+0x340>
 8004be4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004be6:	1a76      	subs	r6, r6, r1
 8004be8:	2e08      	cmp	r6, #8
 8004bea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004bee:	dc03      	bgt.n	8004bf8 <_strtod_l+0x2e0>
 8004bf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004bf2:	4588      	cmp	r8, r1
 8004bf4:	bfa8      	it	ge
 8004bf6:	4688      	movge	r8, r1
 8004bf8:	f1bc 0f00 	cmp.w	ip, #0
 8004bfc:	d001      	beq.n	8004c02 <_strtod_l+0x2ea>
 8004bfe:	f1c8 0800 	rsb	r8, r8, #0
 8004c02:	2d00      	cmp	r5, #0
 8004c04:	d14e      	bne.n	8004ca4 <_strtod_l+0x38c>
 8004c06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c08:	4308      	orrs	r0, r1
 8004c0a:	f47f aebe 	bne.w	800498a <_strtod_l+0x72>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f47f aed6 	bne.w	80049c0 <_strtod_l+0xa8>
 8004c14:	2a69      	cmp	r2, #105	@ 0x69
 8004c16:	d028      	beq.n	8004c6a <_strtod_l+0x352>
 8004c18:	dc25      	bgt.n	8004c66 <_strtod_l+0x34e>
 8004c1a:	2a49      	cmp	r2, #73	@ 0x49
 8004c1c:	d025      	beq.n	8004c6a <_strtod_l+0x352>
 8004c1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004c20:	f47f aece 	bne.w	80049c0 <_strtod_l+0xa8>
 8004c24:	499b      	ldr	r1, [pc, #620]	@ (8004e94 <_strtod_l+0x57c>)
 8004c26:	a819      	add	r0, sp, #100	@ 0x64
 8004c28:	f002 fd0e 	bl	8007648 <__match>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f43f aec7 	beq.w	80049c0 <_strtod_l+0xa8>
 8004c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b28      	cmp	r3, #40	@ 0x28
 8004c38:	d12e      	bne.n	8004c98 <_strtod_l+0x380>
 8004c3a:	4997      	ldr	r1, [pc, #604]	@ (8004e98 <_strtod_l+0x580>)
 8004c3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8004c3e:	a819      	add	r0, sp, #100	@ 0x64
 8004c40:	f002 fd16 	bl	8007670 <__hexnan>
 8004c44:	2805      	cmp	r0, #5
 8004c46:	d127      	bne.n	8004c98 <_strtod_l+0x380>
 8004c48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004c4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004c52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004c56:	e698      	b.n	800498a <_strtod_l+0x72>
 8004c58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004c5a:	fb08 2101 	mla	r1, r8, r1, r2
 8004c5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004c62:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c64:	e7b5      	b.n	8004bd2 <_strtod_l+0x2ba>
 8004c66:	2a6e      	cmp	r2, #110	@ 0x6e
 8004c68:	e7da      	b.n	8004c20 <_strtod_l+0x308>
 8004c6a:	498c      	ldr	r1, [pc, #560]	@ (8004e9c <_strtod_l+0x584>)
 8004c6c:	a819      	add	r0, sp, #100	@ 0x64
 8004c6e:	f002 fceb 	bl	8007648 <__match>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f43f aea4 	beq.w	80049c0 <_strtod_l+0xa8>
 8004c78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c7a:	4989      	ldr	r1, [pc, #548]	@ (8004ea0 <_strtod_l+0x588>)
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	a819      	add	r0, sp, #100	@ 0x64
 8004c80:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c82:	f002 fce1 	bl	8007648 <__match>
 8004c86:	b910      	cbnz	r0, 8004c8e <_strtod_l+0x376>
 8004c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004eb0 <_strtod_l+0x598>
 8004c92:	f04f 0a00 	mov.w	sl, #0
 8004c96:	e678      	b.n	800498a <_strtod_l+0x72>
 8004c98:	4882      	ldr	r0, [pc, #520]	@ (8004ea4 <_strtod_l+0x58c>)
 8004c9a:	f001 fb8d 	bl	80063b8 <nan>
 8004c9e:	ec5b ab10 	vmov	sl, fp, d0
 8004ca2:	e672      	b.n	800498a <_strtod_l+0x72>
 8004ca4:	eba8 0309 	sub.w	r3, r8, r9
 8004ca8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cac:	2f00      	cmp	r7, #0
 8004cae:	bf08      	it	eq
 8004cb0:	462f      	moveq	r7, r5
 8004cb2:	2d10      	cmp	r5, #16
 8004cb4:	462c      	mov	r4, r5
 8004cb6:	bfa8      	it	ge
 8004cb8:	2410      	movge	r4, #16
 8004cba:	f7fb fc3b 	bl	8000534 <__aeabi_ui2d>
 8004cbe:	2d09      	cmp	r5, #9
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	468b      	mov	fp, r1
 8004cc4:	dc13      	bgt.n	8004cee <_strtod_l+0x3d6>
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f43f ae5e 	beq.w	800498a <_strtod_l+0x72>
 8004cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd0:	dd78      	ble.n	8004dc4 <_strtod_l+0x4ac>
 8004cd2:	2b16      	cmp	r3, #22
 8004cd4:	dc5f      	bgt.n	8004d96 <_strtod_l+0x47e>
 8004cd6:	4974      	ldr	r1, [pc, #464]	@ (8004ea8 <_strtod_l+0x590>)
 8004cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ce0:	4652      	mov	r2, sl
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	f7fb fca0 	bl	8000628 <__aeabi_dmul>
 8004ce8:	4682      	mov	sl, r0
 8004cea:	468b      	mov	fp, r1
 8004cec:	e64d      	b.n	800498a <_strtod_l+0x72>
 8004cee:	4b6e      	ldr	r3, [pc, #440]	@ (8004ea8 <_strtod_l+0x590>)
 8004cf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004cf8:	f7fb fc96 	bl	8000628 <__aeabi_dmul>
 8004cfc:	4682      	mov	sl, r0
 8004cfe:	9808      	ldr	r0, [sp, #32]
 8004d00:	468b      	mov	fp, r1
 8004d02:	f7fb fc17 	bl	8000534 <__aeabi_ui2d>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	f7fb fad5 	bl	80002bc <__adddf3>
 8004d12:	2d0f      	cmp	r5, #15
 8004d14:	4682      	mov	sl, r0
 8004d16:	468b      	mov	fp, r1
 8004d18:	ddd5      	ble.n	8004cc6 <_strtod_l+0x3ae>
 8004d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d1c:	1b2c      	subs	r4, r5, r4
 8004d1e:	441c      	add	r4, r3
 8004d20:	2c00      	cmp	r4, #0
 8004d22:	f340 8096 	ble.w	8004e52 <_strtod_l+0x53a>
 8004d26:	f014 030f 	ands.w	r3, r4, #15
 8004d2a:	d00a      	beq.n	8004d42 <_strtod_l+0x42a>
 8004d2c:	495e      	ldr	r1, [pc, #376]	@ (8004ea8 <_strtod_l+0x590>)
 8004d2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d32:	4652      	mov	r2, sl
 8004d34:	465b      	mov	r3, fp
 8004d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d3a:	f7fb fc75 	bl	8000628 <__aeabi_dmul>
 8004d3e:	4682      	mov	sl, r0
 8004d40:	468b      	mov	fp, r1
 8004d42:	f034 040f 	bics.w	r4, r4, #15
 8004d46:	d073      	beq.n	8004e30 <_strtod_l+0x518>
 8004d48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004d4c:	dd48      	ble.n	8004de0 <_strtod_l+0x4c8>
 8004d4e:	2400      	movs	r4, #0
 8004d50:	46a0      	mov	r8, r4
 8004d52:	940a      	str	r4, [sp, #40]	@ 0x28
 8004d54:	46a1      	mov	r9, r4
 8004d56:	9a05      	ldr	r2, [sp, #20]
 8004d58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8004eb0 <_strtod_l+0x598>
 8004d5c:	2322      	movs	r3, #34	@ 0x22
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	f04f 0a00 	mov.w	sl, #0
 8004d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f43f ae0f 	beq.w	800498a <_strtod_l+0x72>
 8004d6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d6e:	9805      	ldr	r0, [sp, #20]
 8004d70:	f002 fe22 	bl	80079b8 <_Bfree>
 8004d74:	9805      	ldr	r0, [sp, #20]
 8004d76:	4649      	mov	r1, r9
 8004d78:	f002 fe1e 	bl	80079b8 <_Bfree>
 8004d7c:	9805      	ldr	r0, [sp, #20]
 8004d7e:	4641      	mov	r1, r8
 8004d80:	f002 fe1a 	bl	80079b8 <_Bfree>
 8004d84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d86:	9805      	ldr	r0, [sp, #20]
 8004d88:	f002 fe16 	bl	80079b8 <_Bfree>
 8004d8c:	9805      	ldr	r0, [sp, #20]
 8004d8e:	4621      	mov	r1, r4
 8004d90:	f002 fe12 	bl	80079b8 <_Bfree>
 8004d94:	e5f9      	b.n	800498a <_strtod_l+0x72>
 8004d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	dbbc      	blt.n	8004d1a <_strtod_l+0x402>
 8004da0:	4c41      	ldr	r4, [pc, #260]	@ (8004ea8 <_strtod_l+0x590>)
 8004da2:	f1c5 050f 	rsb	r5, r5, #15
 8004da6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004daa:	4652      	mov	r2, sl
 8004dac:	465b      	mov	r3, fp
 8004dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db2:	f7fb fc39 	bl	8000628 <__aeabi_dmul>
 8004db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db8:	1b5d      	subs	r5, r3, r5
 8004dba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004dbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004dc2:	e78f      	b.n	8004ce4 <_strtod_l+0x3cc>
 8004dc4:	3316      	adds	r3, #22
 8004dc6:	dba8      	blt.n	8004d1a <_strtod_l+0x402>
 8004dc8:	4b37      	ldr	r3, [pc, #220]	@ (8004ea8 <_strtod_l+0x590>)
 8004dca:	eba9 0808 	sub.w	r8, r9, r8
 8004dce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004dd2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	4659      	mov	r1, fp
 8004dda:	f7fb fd4f 	bl	800087c <__aeabi_ddiv>
 8004dde:	e783      	b.n	8004ce8 <_strtod_l+0x3d0>
 8004de0:	4b32      	ldr	r3, [pc, #200]	@ (8004eac <_strtod_l+0x594>)
 8004de2:	9308      	str	r3, [sp, #32]
 8004de4:	2300      	movs	r3, #0
 8004de6:	1124      	asrs	r4, r4, #4
 8004de8:	4650      	mov	r0, sl
 8004dea:	4659      	mov	r1, fp
 8004dec:	461e      	mov	r6, r3
 8004dee:	2c01      	cmp	r4, #1
 8004df0:	dc21      	bgt.n	8004e36 <_strtod_l+0x51e>
 8004df2:	b10b      	cbz	r3, 8004df8 <_strtod_l+0x4e0>
 8004df4:	4682      	mov	sl, r0
 8004df6:	468b      	mov	fp, r1
 8004df8:	492c      	ldr	r1, [pc, #176]	@ (8004eac <_strtod_l+0x594>)
 8004dfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004dfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004e02:	4652      	mov	r2, sl
 8004e04:	465b      	mov	r3, fp
 8004e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e0a:	f7fb fc0d 	bl	8000628 <__aeabi_dmul>
 8004e0e:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <_strtod_l+0x598>)
 8004e10:	460a      	mov	r2, r1
 8004e12:	400b      	ands	r3, r1
 8004e14:	4927      	ldr	r1, [pc, #156]	@ (8004eb4 <_strtod_l+0x59c>)
 8004e16:	428b      	cmp	r3, r1
 8004e18:	4682      	mov	sl, r0
 8004e1a:	d898      	bhi.n	8004d4e <_strtod_l+0x436>
 8004e1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004e20:	428b      	cmp	r3, r1
 8004e22:	bf86      	itte	hi
 8004e24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8004eb8 <_strtod_l+0x5a0>
 8004e28:	f04f 3aff 	movhi.w	sl, #4294967295
 8004e2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004e30:	2300      	movs	r3, #0
 8004e32:	9308      	str	r3, [sp, #32]
 8004e34:	e07a      	b.n	8004f2c <_strtod_l+0x614>
 8004e36:	07e2      	lsls	r2, r4, #31
 8004e38:	d505      	bpl.n	8004e46 <_strtod_l+0x52e>
 8004e3a:	9b08      	ldr	r3, [sp, #32]
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f7fb fbf2 	bl	8000628 <__aeabi_dmul>
 8004e44:	2301      	movs	r3, #1
 8004e46:	9a08      	ldr	r2, [sp, #32]
 8004e48:	3208      	adds	r2, #8
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	1064      	asrs	r4, r4, #1
 8004e4e:	9208      	str	r2, [sp, #32]
 8004e50:	e7cd      	b.n	8004dee <_strtod_l+0x4d6>
 8004e52:	d0ed      	beq.n	8004e30 <_strtod_l+0x518>
 8004e54:	4264      	negs	r4, r4
 8004e56:	f014 020f 	ands.w	r2, r4, #15
 8004e5a:	d00a      	beq.n	8004e72 <_strtod_l+0x55a>
 8004e5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ea8 <_strtod_l+0x590>)
 8004e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e62:	4650      	mov	r0, sl
 8004e64:	4659      	mov	r1, fp
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb fd07 	bl	800087c <__aeabi_ddiv>
 8004e6e:	4682      	mov	sl, r0
 8004e70:	468b      	mov	fp, r1
 8004e72:	1124      	asrs	r4, r4, #4
 8004e74:	d0dc      	beq.n	8004e30 <_strtod_l+0x518>
 8004e76:	2c1f      	cmp	r4, #31
 8004e78:	dd20      	ble.n	8004ebc <_strtod_l+0x5a4>
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	46a0      	mov	r8, r4
 8004e7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004e80:	46a1      	mov	r9, r4
 8004e82:	9a05      	ldr	r2, [sp, #20]
 8004e84:	2322      	movs	r3, #34	@ 0x22
 8004e86:	f04f 0a00 	mov.w	sl, #0
 8004e8a:	f04f 0b00 	mov.w	fp, #0
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e768      	b.n	8004d64 <_strtod_l+0x44c>
 8004e92:	bf00      	nop
 8004e94:	08008b55 	.word	0x08008b55
 8004e98:	08008af4 	.word	0x08008af4
 8004e9c:	08008b4d 	.word	0x08008b4d
 8004ea0:	08008c34 	.word	0x08008c34
 8004ea4:	08008c30 	.word	0x08008c30
 8004ea8:	08008d98 	.word	0x08008d98
 8004eac:	08008d70 	.word	0x08008d70
 8004eb0:	7ff00000 	.word	0x7ff00000
 8004eb4:	7ca00000 	.word	0x7ca00000
 8004eb8:	7fefffff 	.word	0x7fefffff
 8004ebc:	f014 0310 	ands.w	r3, r4, #16
 8004ec0:	bf18      	it	ne
 8004ec2:	236a      	movne	r3, #106	@ 0x6a
 8004ec4:	4ea9      	ldr	r6, [pc, #676]	@ (800516c <_strtod_l+0x854>)
 8004ec6:	9308      	str	r3, [sp, #32]
 8004ec8:	4650      	mov	r0, sl
 8004eca:	4659      	mov	r1, fp
 8004ecc:	2300      	movs	r3, #0
 8004ece:	07e2      	lsls	r2, r4, #31
 8004ed0:	d504      	bpl.n	8004edc <_strtod_l+0x5c4>
 8004ed2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ed6:	f7fb fba7 	bl	8000628 <__aeabi_dmul>
 8004eda:	2301      	movs	r3, #1
 8004edc:	1064      	asrs	r4, r4, #1
 8004ede:	f106 0608 	add.w	r6, r6, #8
 8004ee2:	d1f4      	bne.n	8004ece <_strtod_l+0x5b6>
 8004ee4:	b10b      	cbz	r3, 8004eea <_strtod_l+0x5d2>
 8004ee6:	4682      	mov	sl, r0
 8004ee8:	468b      	mov	fp, r1
 8004eea:	9b08      	ldr	r3, [sp, #32]
 8004eec:	b1b3      	cbz	r3, 8004f1c <_strtod_l+0x604>
 8004eee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004ef2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	4659      	mov	r1, fp
 8004efa:	dd0f      	ble.n	8004f1c <_strtod_l+0x604>
 8004efc:	2b1f      	cmp	r3, #31
 8004efe:	dd55      	ble.n	8004fac <_strtod_l+0x694>
 8004f00:	2b34      	cmp	r3, #52	@ 0x34
 8004f02:	bfde      	ittt	le
 8004f04:	f04f 33ff 	movle.w	r3, #4294967295
 8004f08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004f0c:	4093      	lslle	r3, r2
 8004f0e:	f04f 0a00 	mov.w	sl, #0
 8004f12:	bfcc      	ite	gt
 8004f14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004f18:	ea03 0b01 	andle.w	fp, r3, r1
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4650      	mov	r0, sl
 8004f22:	4659      	mov	r1, fp
 8004f24:	f7fb fde8 	bl	8000af8 <__aeabi_dcmpeq>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d1a6      	bne.n	8004e7a <_strtod_l+0x562>
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004f32:	9805      	ldr	r0, [sp, #20]
 8004f34:	462b      	mov	r3, r5
 8004f36:	463a      	mov	r2, r7
 8004f38:	f002 fda6 	bl	8007a88 <__s2b>
 8004f3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	f43f af05 	beq.w	8004d4e <_strtod_l+0x436>
 8004f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	eba9 0308 	sub.w	r3, r9, r8
 8004f4c:	bfa8      	it	ge
 8004f4e:	2300      	movge	r3, #0
 8004f50:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f52:	2400      	movs	r4, #0
 8004f54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004f58:	9316      	str	r3, [sp, #88]	@ 0x58
 8004f5a:	46a0      	mov	r8, r4
 8004f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f5e:	9805      	ldr	r0, [sp, #20]
 8004f60:	6859      	ldr	r1, [r3, #4]
 8004f62:	f002 fce9 	bl	8007938 <_Balloc>
 8004f66:	4681      	mov	r9, r0
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	f43f aef4 	beq.w	8004d56 <_strtod_l+0x43e>
 8004f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	3202      	adds	r2, #2
 8004f74:	f103 010c 	add.w	r1, r3, #12
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	300c      	adds	r0, #12
 8004f7c:	f001 fa0b 	bl	8006396 <memcpy>
 8004f80:	ec4b ab10 	vmov	d0, sl, fp
 8004f84:	9805      	ldr	r0, [sp, #20]
 8004f86:	aa1c      	add	r2, sp, #112	@ 0x70
 8004f88:	a91b      	add	r1, sp, #108	@ 0x6c
 8004f8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004f8e:	f003 f8b7 	bl	8008100 <__d2b>
 8004f92:	901a      	str	r0, [sp, #104]	@ 0x68
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f43f aede 	beq.w	8004d56 <_strtod_l+0x43e>
 8004f9a:	9805      	ldr	r0, [sp, #20]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f002 fe09 	bl	8007bb4 <__i2b>
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	b948      	cbnz	r0, 8004fba <_strtod_l+0x6a2>
 8004fa6:	f04f 0800 	mov.w	r8, #0
 8004faa:	e6d4      	b.n	8004d56 <_strtod_l+0x43e>
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	ea03 0a0a 	and.w	sl, r3, sl
 8004fb8:	e7b0      	b.n	8004f1c <_strtod_l+0x604>
 8004fba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004fbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	bfab      	itete	ge
 8004fc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004fc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004fc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004fc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004fca:	bfac      	ite	ge
 8004fcc:	18ef      	addge	r7, r5, r3
 8004fce:	1b5e      	sublt	r6, r3, r5
 8004fd0:	9b08      	ldr	r3, [sp, #32]
 8004fd2:	1aed      	subs	r5, r5, r3
 8004fd4:	4415      	add	r5, r2
 8004fd6:	4b66      	ldr	r3, [pc, #408]	@ (8005170 <_strtod_l+0x858>)
 8004fd8:	3d01      	subs	r5, #1
 8004fda:	429d      	cmp	r5, r3
 8004fdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004fe0:	da50      	bge.n	8005084 <_strtod_l+0x76c>
 8004fe2:	1b5b      	subs	r3, r3, r5
 8004fe4:	2b1f      	cmp	r3, #31
 8004fe6:	eba2 0203 	sub.w	r2, r2, r3
 8004fea:	f04f 0101 	mov.w	r1, #1
 8004fee:	dc3d      	bgt.n	800506c <_strtod_l+0x754>
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ffa:	18bd      	adds	r5, r7, r2
 8004ffc:	9b08      	ldr	r3, [sp, #32]
 8004ffe:	42af      	cmp	r7, r5
 8005000:	4416      	add	r6, r2
 8005002:	441e      	add	r6, r3
 8005004:	463b      	mov	r3, r7
 8005006:	bfa8      	it	ge
 8005008:	462b      	movge	r3, r5
 800500a:	42b3      	cmp	r3, r6
 800500c:	bfa8      	it	ge
 800500e:	4633      	movge	r3, r6
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfc2      	ittt	gt
 8005014:	1aed      	subgt	r5, r5, r3
 8005016:	1af6      	subgt	r6, r6, r3
 8005018:	1aff      	subgt	r7, r7, r3
 800501a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800501c:	2b00      	cmp	r3, #0
 800501e:	dd16      	ble.n	800504e <_strtod_l+0x736>
 8005020:	4641      	mov	r1, r8
 8005022:	9805      	ldr	r0, [sp, #20]
 8005024:	461a      	mov	r2, r3
 8005026:	f002 fe85 	bl	8007d34 <__pow5mult>
 800502a:	4680      	mov	r8, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	d0ba      	beq.n	8004fa6 <_strtod_l+0x68e>
 8005030:	4601      	mov	r1, r0
 8005032:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005034:	9805      	ldr	r0, [sp, #20]
 8005036:	f002 fdd3 	bl	8007be0 <__multiply>
 800503a:	900e      	str	r0, [sp, #56]	@ 0x38
 800503c:	2800      	cmp	r0, #0
 800503e:	f43f ae8a 	beq.w	8004d56 <_strtod_l+0x43e>
 8005042:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005044:	9805      	ldr	r0, [sp, #20]
 8005046:	f002 fcb7 	bl	80079b8 <_Bfree>
 800504a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800504c:	931a      	str	r3, [sp, #104]	@ 0x68
 800504e:	2d00      	cmp	r5, #0
 8005050:	dc1d      	bgt.n	800508e <_strtod_l+0x776>
 8005052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	dd23      	ble.n	80050a0 <_strtod_l+0x788>
 8005058:	4649      	mov	r1, r9
 800505a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800505c:	9805      	ldr	r0, [sp, #20]
 800505e:	f002 fe69 	bl	8007d34 <__pow5mult>
 8005062:	4681      	mov	r9, r0
 8005064:	b9e0      	cbnz	r0, 80050a0 <_strtod_l+0x788>
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	e674      	b.n	8004d56 <_strtod_l+0x43e>
 800506c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005070:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005074:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005078:	35e2      	adds	r5, #226	@ 0xe2
 800507a:	fa01 f305 	lsl.w	r3, r1, r5
 800507e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005080:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005082:	e7ba      	b.n	8004ffa <_strtod_l+0x6e2>
 8005084:	2300      	movs	r3, #0
 8005086:	9310      	str	r3, [sp, #64]	@ 0x40
 8005088:	2301      	movs	r3, #1
 800508a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800508c:	e7b5      	b.n	8004ffa <_strtod_l+0x6e2>
 800508e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005090:	9805      	ldr	r0, [sp, #20]
 8005092:	462a      	mov	r2, r5
 8005094:	f002 fea8 	bl	8007de8 <__lshift>
 8005098:	901a      	str	r0, [sp, #104]	@ 0x68
 800509a:	2800      	cmp	r0, #0
 800509c:	d1d9      	bne.n	8005052 <_strtod_l+0x73a>
 800509e:	e65a      	b.n	8004d56 <_strtod_l+0x43e>
 80050a0:	2e00      	cmp	r6, #0
 80050a2:	dd07      	ble.n	80050b4 <_strtod_l+0x79c>
 80050a4:	4649      	mov	r1, r9
 80050a6:	9805      	ldr	r0, [sp, #20]
 80050a8:	4632      	mov	r2, r6
 80050aa:	f002 fe9d 	bl	8007de8 <__lshift>
 80050ae:	4681      	mov	r9, r0
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d0d8      	beq.n	8005066 <_strtod_l+0x74e>
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	dd08      	ble.n	80050ca <_strtod_l+0x7b2>
 80050b8:	4641      	mov	r1, r8
 80050ba:	9805      	ldr	r0, [sp, #20]
 80050bc:	463a      	mov	r2, r7
 80050be:	f002 fe93 	bl	8007de8 <__lshift>
 80050c2:	4680      	mov	r8, r0
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f43f ae46 	beq.w	8004d56 <_strtod_l+0x43e>
 80050ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050cc:	9805      	ldr	r0, [sp, #20]
 80050ce:	464a      	mov	r2, r9
 80050d0:	f002 ff12 	bl	8007ef8 <__mdiff>
 80050d4:	4604      	mov	r4, r0
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f ae3d 	beq.w	8004d56 <_strtod_l+0x43e>
 80050dc:	68c3      	ldr	r3, [r0, #12]
 80050de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050e0:	2300      	movs	r3, #0
 80050e2:	60c3      	str	r3, [r0, #12]
 80050e4:	4641      	mov	r1, r8
 80050e6:	f002 feeb 	bl	8007ec0 <__mcmp>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	da46      	bge.n	800517c <_strtod_l+0x864>
 80050ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050f0:	ea53 030a 	orrs.w	r3, r3, sl
 80050f4:	d16c      	bne.n	80051d0 <_strtod_l+0x8b8>
 80050f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d168      	bne.n	80051d0 <_strtod_l+0x8b8>
 80050fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005102:	0d1b      	lsrs	r3, r3, #20
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800510a:	d961      	bls.n	80051d0 <_strtod_l+0x8b8>
 800510c:	6963      	ldr	r3, [r4, #20]
 800510e:	b913      	cbnz	r3, 8005116 <_strtod_l+0x7fe>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	2b01      	cmp	r3, #1
 8005114:	dd5c      	ble.n	80051d0 <_strtod_l+0x8b8>
 8005116:	4621      	mov	r1, r4
 8005118:	2201      	movs	r2, #1
 800511a:	9805      	ldr	r0, [sp, #20]
 800511c:	f002 fe64 	bl	8007de8 <__lshift>
 8005120:	4641      	mov	r1, r8
 8005122:	4604      	mov	r4, r0
 8005124:	f002 fecc 	bl	8007ec0 <__mcmp>
 8005128:	2800      	cmp	r0, #0
 800512a:	dd51      	ble.n	80051d0 <_strtod_l+0x8b8>
 800512c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005130:	9a08      	ldr	r2, [sp, #32]
 8005132:	0d1b      	lsrs	r3, r3, #20
 8005134:	051b      	lsls	r3, r3, #20
 8005136:	2a00      	cmp	r2, #0
 8005138:	d06b      	beq.n	8005212 <_strtod_l+0x8fa>
 800513a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800513e:	d868      	bhi.n	8005212 <_strtod_l+0x8fa>
 8005140:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005144:	f67f ae9d 	bls.w	8004e82 <_strtod_l+0x56a>
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <_strtod_l+0x85c>)
 800514a:	4650      	mov	r0, sl
 800514c:	4659      	mov	r1, fp
 800514e:	2200      	movs	r2, #0
 8005150:	f7fb fa6a 	bl	8000628 <__aeabi_dmul>
 8005154:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <_strtod_l+0x860>)
 8005156:	400b      	ands	r3, r1
 8005158:	4682      	mov	sl, r0
 800515a:	468b      	mov	fp, r1
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f ae05 	bne.w	8004d6c <_strtod_l+0x454>
 8005162:	9a05      	ldr	r2, [sp, #20]
 8005164:	2322      	movs	r3, #34	@ 0x22
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e600      	b.n	8004d6c <_strtod_l+0x454>
 800516a:	bf00      	nop
 800516c:	08008b20 	.word	0x08008b20
 8005170:	fffffc02 	.word	0xfffffc02
 8005174:	39500000 	.word	0x39500000
 8005178:	7ff00000 	.word	0x7ff00000
 800517c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005180:	d165      	bne.n	800524e <_strtod_l+0x936>
 8005182:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005188:	b35a      	cbz	r2, 80051e2 <_strtod_l+0x8ca>
 800518a:	4a9f      	ldr	r2, [pc, #636]	@ (8005408 <_strtod_l+0xaf0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d12b      	bne.n	80051e8 <_strtod_l+0x8d0>
 8005190:	9b08      	ldr	r3, [sp, #32]
 8005192:	4651      	mov	r1, sl
 8005194:	b303      	cbz	r3, 80051d8 <_strtod_l+0x8c0>
 8005196:	4b9d      	ldr	r3, [pc, #628]	@ (800540c <_strtod_l+0xaf4>)
 8005198:	465a      	mov	r2, fp
 800519a:	4013      	ands	r3, r2
 800519c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	d81b      	bhi.n	80051de <_strtod_l+0x8c6>
 80051a6:	0d1b      	lsrs	r3, r3, #20
 80051a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	4299      	cmp	r1, r3
 80051b2:	d119      	bne.n	80051e8 <_strtod_l+0x8d0>
 80051b4:	4b96      	ldr	r3, [pc, #600]	@ (8005410 <_strtod_l+0xaf8>)
 80051b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d102      	bne.n	80051c2 <_strtod_l+0x8aa>
 80051bc:	3101      	adds	r1, #1
 80051be:	f43f adca 	beq.w	8004d56 <_strtod_l+0x43e>
 80051c2:	4b92      	ldr	r3, [pc, #584]	@ (800540c <_strtod_l+0xaf4>)
 80051c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051c6:	401a      	ands	r2, r3
 80051c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80051cc:	f04f 0a00 	mov.w	sl, #0
 80051d0:	9b08      	ldr	r3, [sp, #32]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1b8      	bne.n	8005148 <_strtod_l+0x830>
 80051d6:	e5c9      	b.n	8004d6c <_strtod_l+0x454>
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	e7e8      	b.n	80051b0 <_strtod_l+0x898>
 80051de:	4613      	mov	r3, r2
 80051e0:	e7e6      	b.n	80051b0 <_strtod_l+0x898>
 80051e2:	ea53 030a 	orrs.w	r3, r3, sl
 80051e6:	d0a1      	beq.n	800512c <_strtod_l+0x814>
 80051e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051ea:	b1db      	cbz	r3, 8005224 <_strtod_l+0x90c>
 80051ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051ee:	4213      	tst	r3, r2
 80051f0:	d0ee      	beq.n	80051d0 <_strtod_l+0x8b8>
 80051f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051f4:	9a08      	ldr	r2, [sp, #32]
 80051f6:	4650      	mov	r0, sl
 80051f8:	4659      	mov	r1, fp
 80051fa:	b1bb      	cbz	r3, 800522c <_strtod_l+0x914>
 80051fc:	f7ff fb6b 	bl	80048d6 <sulp>
 8005200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005204:	ec53 2b10 	vmov	r2, r3, d0
 8005208:	f7fb f858 	bl	80002bc <__adddf3>
 800520c:	4682      	mov	sl, r0
 800520e:	468b      	mov	fp, r1
 8005210:	e7de      	b.n	80051d0 <_strtod_l+0x8b8>
 8005212:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005216:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800521a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800521e:	f04f 3aff 	mov.w	sl, #4294967295
 8005222:	e7d5      	b.n	80051d0 <_strtod_l+0x8b8>
 8005224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005226:	ea13 0f0a 	tst.w	r3, sl
 800522a:	e7e1      	b.n	80051f0 <_strtod_l+0x8d8>
 800522c:	f7ff fb53 	bl	80048d6 <sulp>
 8005230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005234:	ec53 2b10 	vmov	r2, r3, d0
 8005238:	f7fb f83e 	bl	80002b8 <__aeabi_dsub>
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	4682      	mov	sl, r0
 8005242:	468b      	mov	fp, r1
 8005244:	f7fb fc58 	bl	8000af8 <__aeabi_dcmpeq>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0c1      	beq.n	80051d0 <_strtod_l+0x8b8>
 800524c:	e619      	b.n	8004e82 <_strtod_l+0x56a>
 800524e:	4641      	mov	r1, r8
 8005250:	4620      	mov	r0, r4
 8005252:	f002 ffad 	bl	80081b0 <__ratio>
 8005256:	ec57 6b10 	vmov	r6, r7, d0
 800525a:	2200      	movs	r2, #0
 800525c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005260:	4630      	mov	r0, r6
 8005262:	4639      	mov	r1, r7
 8005264:	f7fb fc5c 	bl	8000b20 <__aeabi_dcmple>
 8005268:	2800      	cmp	r0, #0
 800526a:	d06f      	beq.n	800534c <_strtod_l+0xa34>
 800526c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d17a      	bne.n	8005368 <_strtod_l+0xa50>
 8005272:	f1ba 0f00 	cmp.w	sl, #0
 8005276:	d158      	bne.n	800532a <_strtod_l+0xa12>
 8005278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800527a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800527e:	2b00      	cmp	r3, #0
 8005280:	d15a      	bne.n	8005338 <_strtod_l+0xa20>
 8005282:	4b64      	ldr	r3, [pc, #400]	@ (8005414 <_strtod_l+0xafc>)
 8005284:	2200      	movs	r2, #0
 8005286:	4630      	mov	r0, r6
 8005288:	4639      	mov	r1, r7
 800528a:	f7fb fc3f 	bl	8000b0c <__aeabi_dcmplt>
 800528e:	2800      	cmp	r0, #0
 8005290:	d159      	bne.n	8005346 <_strtod_l+0xa2e>
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	4b60      	ldr	r3, [pc, #384]	@ (8005418 <_strtod_l+0xb00>)
 8005298:	2200      	movs	r2, #0
 800529a:	f7fb f9c5 	bl	8000628 <__aeabi_dmul>
 800529e:	4606      	mov	r6, r0
 80052a0:	460f      	mov	r7, r1
 80052a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80052a6:	9606      	str	r6, [sp, #24]
 80052a8:	9307      	str	r3, [sp, #28]
 80052aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ae:	4d57      	ldr	r5, [pc, #348]	@ (800540c <_strtod_l+0xaf4>)
 80052b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80052b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052b6:	401d      	ands	r5, r3
 80052b8:	4b58      	ldr	r3, [pc, #352]	@ (800541c <_strtod_l+0xb04>)
 80052ba:	429d      	cmp	r5, r3
 80052bc:	f040 80b2 	bne.w	8005424 <_strtod_l+0xb0c>
 80052c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80052c6:	ec4b ab10 	vmov	d0, sl, fp
 80052ca:	f002 fea9 	bl	8008020 <__ulp>
 80052ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052d2:	ec51 0b10 	vmov	r0, r1, d0
 80052d6:	f7fb f9a7 	bl	8000628 <__aeabi_dmul>
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	f7fa ffed 	bl	80002bc <__adddf3>
 80052e2:	460b      	mov	r3, r1
 80052e4:	4949      	ldr	r1, [pc, #292]	@ (800540c <_strtod_l+0xaf4>)
 80052e6:	4a4e      	ldr	r2, [pc, #312]	@ (8005420 <_strtod_l+0xb08>)
 80052e8:	4019      	ands	r1, r3
 80052ea:	4291      	cmp	r1, r2
 80052ec:	4682      	mov	sl, r0
 80052ee:	d942      	bls.n	8005376 <_strtod_l+0xa5e>
 80052f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80052f2:	4b47      	ldr	r3, [pc, #284]	@ (8005410 <_strtod_l+0xaf8>)
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d103      	bne.n	8005300 <_strtod_l+0x9e8>
 80052f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052fa:	3301      	adds	r3, #1
 80052fc:	f43f ad2b 	beq.w	8004d56 <_strtod_l+0x43e>
 8005300:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005410 <_strtod_l+0xaf8>
 8005304:	f04f 3aff 	mov.w	sl, #4294967295
 8005308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800530a:	9805      	ldr	r0, [sp, #20]
 800530c:	f002 fb54 	bl	80079b8 <_Bfree>
 8005310:	9805      	ldr	r0, [sp, #20]
 8005312:	4649      	mov	r1, r9
 8005314:	f002 fb50 	bl	80079b8 <_Bfree>
 8005318:	9805      	ldr	r0, [sp, #20]
 800531a:	4641      	mov	r1, r8
 800531c:	f002 fb4c 	bl	80079b8 <_Bfree>
 8005320:	9805      	ldr	r0, [sp, #20]
 8005322:	4621      	mov	r1, r4
 8005324:	f002 fb48 	bl	80079b8 <_Bfree>
 8005328:	e618      	b.n	8004f5c <_strtod_l+0x644>
 800532a:	f1ba 0f01 	cmp.w	sl, #1
 800532e:	d103      	bne.n	8005338 <_strtod_l+0xa20>
 8005330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005332:	2b00      	cmp	r3, #0
 8005334:	f43f ada5 	beq.w	8004e82 <_strtod_l+0x56a>
 8005338:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80053e8 <_strtod_l+0xad0>
 800533c:	4f35      	ldr	r7, [pc, #212]	@ (8005414 <_strtod_l+0xafc>)
 800533e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005342:	2600      	movs	r6, #0
 8005344:	e7b1      	b.n	80052aa <_strtod_l+0x992>
 8005346:	4f34      	ldr	r7, [pc, #208]	@ (8005418 <_strtod_l+0xb00>)
 8005348:	2600      	movs	r6, #0
 800534a:	e7aa      	b.n	80052a2 <_strtod_l+0x98a>
 800534c:	4b32      	ldr	r3, [pc, #200]	@ (8005418 <_strtod_l+0xb00>)
 800534e:	4630      	mov	r0, r6
 8005350:	4639      	mov	r1, r7
 8005352:	2200      	movs	r2, #0
 8005354:	f7fb f968 	bl	8000628 <__aeabi_dmul>
 8005358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800535a:	4606      	mov	r6, r0
 800535c:	460f      	mov	r7, r1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d09f      	beq.n	80052a2 <_strtod_l+0x98a>
 8005362:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005366:	e7a0      	b.n	80052aa <_strtod_l+0x992>
 8005368:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80053f0 <_strtod_l+0xad8>
 800536c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005370:	ec57 6b17 	vmov	r6, r7, d7
 8005374:	e799      	b.n	80052aa <_strtod_l+0x992>
 8005376:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800537a:	9b08      	ldr	r3, [sp, #32]
 800537c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1c1      	bne.n	8005308 <_strtod_l+0x9f0>
 8005384:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005388:	0d1b      	lsrs	r3, r3, #20
 800538a:	051b      	lsls	r3, r3, #20
 800538c:	429d      	cmp	r5, r3
 800538e:	d1bb      	bne.n	8005308 <_strtod_l+0x9f0>
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb fca8 	bl	8000ce8 <__aeabi_d2lz>
 8005398:	f7fb f918 	bl	80005cc <__aeabi_l2d>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fa ff88 	bl	80002b8 <__aeabi_dsub>
 80053a8:	460b      	mov	r3, r1
 80053aa:	4602      	mov	r2, r0
 80053ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80053b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80053b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053b6:	ea46 060a 	orr.w	r6, r6, sl
 80053ba:	431e      	orrs	r6, r3
 80053bc:	d06f      	beq.n	800549e <_strtod_l+0xb86>
 80053be:	a30e      	add	r3, pc, #56	@ (adr r3, 80053f8 <_strtod_l+0xae0>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fb fba2 	bl	8000b0c <__aeabi_dcmplt>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f47f accf 	bne.w	8004d6c <_strtod_l+0x454>
 80053ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8005400 <_strtod_l+0xae8>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053d8:	f7fb fbb6 	bl	8000b48 <__aeabi_dcmpgt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d093      	beq.n	8005308 <_strtod_l+0x9f0>
 80053e0:	e4c4      	b.n	8004d6c <_strtod_l+0x454>
 80053e2:	bf00      	nop
 80053e4:	f3af 8000 	nop.w
 80053e8:	00000000 	.word	0x00000000
 80053ec:	bff00000 	.word	0xbff00000
 80053f0:	00000000 	.word	0x00000000
 80053f4:	3ff00000 	.word	0x3ff00000
 80053f8:	94a03595 	.word	0x94a03595
 80053fc:	3fdfffff 	.word	0x3fdfffff
 8005400:	35afe535 	.word	0x35afe535
 8005404:	3fe00000 	.word	0x3fe00000
 8005408:	000fffff 	.word	0x000fffff
 800540c:	7ff00000 	.word	0x7ff00000
 8005410:	7fefffff 	.word	0x7fefffff
 8005414:	3ff00000 	.word	0x3ff00000
 8005418:	3fe00000 	.word	0x3fe00000
 800541c:	7fe00000 	.word	0x7fe00000
 8005420:	7c9fffff 	.word	0x7c9fffff
 8005424:	9b08      	ldr	r3, [sp, #32]
 8005426:	b323      	cbz	r3, 8005472 <_strtod_l+0xb5a>
 8005428:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800542c:	d821      	bhi.n	8005472 <_strtod_l+0xb5a>
 800542e:	a328      	add	r3, pc, #160	@ (adr r3, 80054d0 <_strtod_l+0xbb8>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fb fb72 	bl	8000b20 <__aeabi_dcmple>
 800543c:	b1a0      	cbz	r0, 8005468 <_strtod_l+0xb50>
 800543e:	4639      	mov	r1, r7
 8005440:	4630      	mov	r0, r6
 8005442:	f7fb fbc9 	bl	8000bd8 <__aeabi_d2uiz>
 8005446:	2801      	cmp	r0, #1
 8005448:	bf38      	it	cc
 800544a:	2001      	movcc	r0, #1
 800544c:	f7fb f872 	bl	8000534 <__aeabi_ui2d>
 8005450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005452:	4606      	mov	r6, r0
 8005454:	460f      	mov	r7, r1
 8005456:	b9fb      	cbnz	r3, 8005498 <_strtod_l+0xb80>
 8005458:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800545c:	9014      	str	r0, [sp, #80]	@ 0x50
 800545e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005460:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005464:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005468:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800546a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800546e:	1b5b      	subs	r3, r3, r5
 8005470:	9311      	str	r3, [sp, #68]	@ 0x44
 8005472:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005476:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800547a:	f002 fdd1 	bl	8008020 <__ulp>
 800547e:	4650      	mov	r0, sl
 8005480:	ec53 2b10 	vmov	r2, r3, d0
 8005484:	4659      	mov	r1, fp
 8005486:	f7fb f8cf 	bl	8000628 <__aeabi_dmul>
 800548a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800548e:	f7fa ff15 	bl	80002bc <__adddf3>
 8005492:	4682      	mov	sl, r0
 8005494:	468b      	mov	fp, r1
 8005496:	e770      	b.n	800537a <_strtod_l+0xa62>
 8005498:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800549c:	e7e0      	b.n	8005460 <_strtod_l+0xb48>
 800549e:	a30e      	add	r3, pc, #56	@ (adr r3, 80054d8 <_strtod_l+0xbc0>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fb fb32 	bl	8000b0c <__aeabi_dcmplt>
 80054a8:	e798      	b.n	80053dc <_strtod_l+0xac4>
 80054aa:	2300      	movs	r3, #0
 80054ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80054b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	f7ff ba6d 	b.w	8004992 <_strtod_l+0x7a>
 80054b8:	2a65      	cmp	r2, #101	@ 0x65
 80054ba:	f43f ab66 	beq.w	8004b8a <_strtod_l+0x272>
 80054be:	2a45      	cmp	r2, #69	@ 0x45
 80054c0:	f43f ab63 	beq.w	8004b8a <_strtod_l+0x272>
 80054c4:	2301      	movs	r3, #1
 80054c6:	f7ff bb9e 	b.w	8004c06 <_strtod_l+0x2ee>
 80054ca:	bf00      	nop
 80054cc:	f3af 8000 	nop.w
 80054d0:	ffc00000 	.word	0xffc00000
 80054d4:	41dfffff 	.word	0x41dfffff
 80054d8:	94a03595 	.word	0x94a03595
 80054dc:	3fcfffff 	.word	0x3fcfffff

080054e0 <strtod>:
 80054e0:	460a      	mov	r2, r1
 80054e2:	4601      	mov	r1, r0
 80054e4:	4802      	ldr	r0, [pc, #8]	@ (80054f0 <strtod+0x10>)
 80054e6:	4b03      	ldr	r3, [pc, #12]	@ (80054f4 <strtod+0x14>)
 80054e8:	6800      	ldr	r0, [r0, #0]
 80054ea:	f7ff ba15 	b.w	8004918 <_strtod_l>
 80054ee:	bf00      	nop
 80054f0:	20000188 	.word	0x20000188
 80054f4:	2000001c 	.word	0x2000001c

080054f8 <__cvt>:
 80054f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	ec57 6b10 	vmov	r6, r7, d0
 8005500:	2f00      	cmp	r7, #0
 8005502:	460c      	mov	r4, r1
 8005504:	4619      	mov	r1, r3
 8005506:	463b      	mov	r3, r7
 8005508:	bfbb      	ittet	lt
 800550a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800550e:	461f      	movlt	r7, r3
 8005510:	2300      	movge	r3, #0
 8005512:	232d      	movlt	r3, #45	@ 0x2d
 8005514:	700b      	strb	r3, [r1, #0]
 8005516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005518:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800551c:	4691      	mov	r9, r2
 800551e:	f023 0820 	bic.w	r8, r3, #32
 8005522:	bfbc      	itt	lt
 8005524:	4632      	movlt	r2, r6
 8005526:	4616      	movlt	r6, r2
 8005528:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800552c:	d005      	beq.n	800553a <__cvt+0x42>
 800552e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005532:	d100      	bne.n	8005536 <__cvt+0x3e>
 8005534:	3401      	adds	r4, #1
 8005536:	2102      	movs	r1, #2
 8005538:	e000      	b.n	800553c <__cvt+0x44>
 800553a:	2103      	movs	r1, #3
 800553c:	ab03      	add	r3, sp, #12
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	ab02      	add	r3, sp, #8
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	ec47 6b10 	vmov	d0, r6, r7
 8005548:	4653      	mov	r3, sl
 800554a:	4622      	mov	r2, r4
 800554c:	f000 ffe4 	bl	8006518 <_dtoa_r>
 8005550:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005554:	4605      	mov	r5, r0
 8005556:	d119      	bne.n	800558c <__cvt+0x94>
 8005558:	f019 0f01 	tst.w	r9, #1
 800555c:	d00e      	beq.n	800557c <__cvt+0x84>
 800555e:	eb00 0904 	add.w	r9, r0, r4
 8005562:	2200      	movs	r2, #0
 8005564:	2300      	movs	r3, #0
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	f7fb fac5 	bl	8000af8 <__aeabi_dcmpeq>
 800556e:	b108      	cbz	r0, 8005574 <__cvt+0x7c>
 8005570:	f8cd 900c 	str.w	r9, [sp, #12]
 8005574:	2230      	movs	r2, #48	@ 0x30
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	454b      	cmp	r3, r9
 800557a:	d31e      	bcc.n	80055ba <__cvt+0xc2>
 800557c:	9b03      	ldr	r3, [sp, #12]
 800557e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005580:	1b5b      	subs	r3, r3, r5
 8005582:	4628      	mov	r0, r5
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	b004      	add	sp, #16
 8005588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005590:	eb00 0904 	add.w	r9, r0, r4
 8005594:	d1e5      	bne.n	8005562 <__cvt+0x6a>
 8005596:	7803      	ldrb	r3, [r0, #0]
 8005598:	2b30      	cmp	r3, #48	@ 0x30
 800559a:	d10a      	bne.n	80055b2 <__cvt+0xba>
 800559c:	2200      	movs	r2, #0
 800559e:	2300      	movs	r3, #0
 80055a0:	4630      	mov	r0, r6
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fb faa8 	bl	8000af8 <__aeabi_dcmpeq>
 80055a8:	b918      	cbnz	r0, 80055b2 <__cvt+0xba>
 80055aa:	f1c4 0401 	rsb	r4, r4, #1
 80055ae:	f8ca 4000 	str.w	r4, [sl]
 80055b2:	f8da 3000 	ldr.w	r3, [sl]
 80055b6:	4499      	add	r9, r3
 80055b8:	e7d3      	b.n	8005562 <__cvt+0x6a>
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	9103      	str	r1, [sp, #12]
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e7d9      	b.n	8005576 <__cvt+0x7e>

080055c2 <__exponent>:
 80055c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c4:	2900      	cmp	r1, #0
 80055c6:	bfba      	itte	lt
 80055c8:	4249      	neglt	r1, r1
 80055ca:	232d      	movlt	r3, #45	@ 0x2d
 80055cc:	232b      	movge	r3, #43	@ 0x2b
 80055ce:	2909      	cmp	r1, #9
 80055d0:	7002      	strb	r2, [r0, #0]
 80055d2:	7043      	strb	r3, [r0, #1]
 80055d4:	dd29      	ble.n	800562a <__exponent+0x68>
 80055d6:	f10d 0307 	add.w	r3, sp, #7
 80055da:	461d      	mov	r5, r3
 80055dc:	270a      	movs	r7, #10
 80055de:	461a      	mov	r2, r3
 80055e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80055e4:	fb07 1416 	mls	r4, r7, r6, r1
 80055e8:	3430      	adds	r4, #48	@ 0x30
 80055ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055ee:	460c      	mov	r4, r1
 80055f0:	2c63      	cmp	r4, #99	@ 0x63
 80055f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80055f6:	4631      	mov	r1, r6
 80055f8:	dcf1      	bgt.n	80055de <__exponent+0x1c>
 80055fa:	3130      	adds	r1, #48	@ 0x30
 80055fc:	1e94      	subs	r4, r2, #2
 80055fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005602:	1c41      	adds	r1, r0, #1
 8005604:	4623      	mov	r3, r4
 8005606:	42ab      	cmp	r3, r5
 8005608:	d30a      	bcc.n	8005620 <__exponent+0x5e>
 800560a:	f10d 0309 	add.w	r3, sp, #9
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	42ac      	cmp	r4, r5
 8005612:	bf88      	it	hi
 8005614:	2300      	movhi	r3, #0
 8005616:	3302      	adds	r3, #2
 8005618:	4403      	add	r3, r0
 800561a:	1a18      	subs	r0, r3, r0
 800561c:	b003      	add	sp, #12
 800561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005620:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005624:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005628:	e7ed      	b.n	8005606 <__exponent+0x44>
 800562a:	2330      	movs	r3, #48	@ 0x30
 800562c:	3130      	adds	r1, #48	@ 0x30
 800562e:	7083      	strb	r3, [r0, #2]
 8005630:	70c1      	strb	r1, [r0, #3]
 8005632:	1d03      	adds	r3, r0, #4
 8005634:	e7f1      	b.n	800561a <__exponent+0x58>
	...

08005638 <_printf_float>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	b08d      	sub	sp, #52	@ 0x34
 800563e:	460c      	mov	r4, r1
 8005640:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005644:	4616      	mov	r6, r2
 8005646:	461f      	mov	r7, r3
 8005648:	4605      	mov	r5, r0
 800564a:	f000 fe2d 	bl	80062a8 <_localeconv_r>
 800564e:	6803      	ldr	r3, [r0, #0]
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fa fe24 	bl	80002a0 <strlen>
 8005658:	2300      	movs	r3, #0
 800565a:	930a      	str	r3, [sp, #40]	@ 0x28
 800565c:	f8d8 3000 	ldr.w	r3, [r8]
 8005660:	9005      	str	r0, [sp, #20]
 8005662:	3307      	adds	r3, #7
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	f103 0208 	add.w	r2, r3, #8
 800566c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005670:	f8d4 b000 	ldr.w	fp, [r4]
 8005674:	f8c8 2000 	str.w	r2, [r8]
 8005678:	e9d3 8900 	ldrd	r8, r9, [r3]
 800567c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005680:	9307      	str	r3, [sp, #28]
 8005682:	f8cd 8018 	str.w	r8, [sp, #24]
 8005686:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800568a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800568e:	4b9c      	ldr	r3, [pc, #624]	@ (8005900 <_printf_float+0x2c8>)
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	f7fb fa62 	bl	8000b5c <__aeabi_dcmpun>
 8005698:	bb70      	cbnz	r0, 80056f8 <_printf_float+0xc0>
 800569a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800569e:	4b98      	ldr	r3, [pc, #608]	@ (8005900 <_printf_float+0x2c8>)
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	f7fb fa3c 	bl	8000b20 <__aeabi_dcmple>
 80056a8:	bb30      	cbnz	r0, 80056f8 <_printf_float+0xc0>
 80056aa:	2200      	movs	r2, #0
 80056ac:	2300      	movs	r3, #0
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fb fa2b 	bl	8000b0c <__aeabi_dcmplt>
 80056b6:	b110      	cbz	r0, 80056be <_printf_float+0x86>
 80056b8:	232d      	movs	r3, #45	@ 0x2d
 80056ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056be:	4a91      	ldr	r2, [pc, #580]	@ (8005904 <_printf_float+0x2cc>)
 80056c0:	4b91      	ldr	r3, [pc, #580]	@ (8005908 <_printf_float+0x2d0>)
 80056c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80056c6:	bf94      	ite	ls
 80056c8:	4690      	movls	r8, r2
 80056ca:	4698      	movhi	r8, r3
 80056cc:	2303      	movs	r3, #3
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	f02b 0304 	bic.w	r3, fp, #4
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	f04f 0900 	mov.w	r9, #0
 80056da:	9700      	str	r7, [sp, #0]
 80056dc:	4633      	mov	r3, r6
 80056de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f9d2 	bl	8005a8c <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	f040 808d 	bne.w	8005808 <_printf_float+0x1d0>
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	b00d      	add	sp, #52	@ 0x34
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	4649      	mov	r1, r9
 8005700:	f7fb fa2c 	bl	8000b5c <__aeabi_dcmpun>
 8005704:	b140      	cbz	r0, 8005718 <_printf_float+0xe0>
 8005706:	464b      	mov	r3, r9
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfbc      	itt	lt
 800570c:	232d      	movlt	r3, #45	@ 0x2d
 800570e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005712:	4a7e      	ldr	r2, [pc, #504]	@ (800590c <_printf_float+0x2d4>)
 8005714:	4b7e      	ldr	r3, [pc, #504]	@ (8005910 <_printf_float+0x2d8>)
 8005716:	e7d4      	b.n	80056c2 <_printf_float+0x8a>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800571e:	9206      	str	r2, [sp, #24]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	d13b      	bne.n	800579c <_printf_float+0x164>
 8005724:	2306      	movs	r3, #6
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800572c:	2300      	movs	r3, #0
 800572e:	6022      	str	r2, [r4, #0]
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	ab0a      	add	r3, sp, #40	@ 0x28
 8005734:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005738:	ab09      	add	r3, sp, #36	@ 0x24
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	6861      	ldr	r1, [r4, #4]
 800573e:	ec49 8b10 	vmov	d0, r8, r9
 8005742:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005746:	4628      	mov	r0, r5
 8005748:	f7ff fed6 	bl	80054f8 <__cvt>
 800574c:	9b06      	ldr	r3, [sp, #24]
 800574e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005750:	2b47      	cmp	r3, #71	@ 0x47
 8005752:	4680      	mov	r8, r0
 8005754:	d129      	bne.n	80057aa <_printf_float+0x172>
 8005756:	1cc8      	adds	r0, r1, #3
 8005758:	db02      	blt.n	8005760 <_printf_float+0x128>
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	4299      	cmp	r1, r3
 800575e:	dd41      	ble.n	80057e4 <_printf_float+0x1ac>
 8005760:	f1aa 0a02 	sub.w	sl, sl, #2
 8005764:	fa5f fa8a 	uxtb.w	sl, sl
 8005768:	3901      	subs	r1, #1
 800576a:	4652      	mov	r2, sl
 800576c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005770:	9109      	str	r1, [sp, #36]	@ 0x24
 8005772:	f7ff ff26 	bl	80055c2 <__exponent>
 8005776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005778:	1813      	adds	r3, r2, r0
 800577a:	2a01      	cmp	r2, #1
 800577c:	4681      	mov	r9, r0
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	dc02      	bgt.n	8005788 <_printf_float+0x150>
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	07d2      	lsls	r2, r2, #31
 8005786:	d501      	bpl.n	800578c <_printf_float+0x154>
 8005788:	3301      	adds	r3, #1
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0a2      	beq.n	80056da <_printf_float+0xa2>
 8005794:	232d      	movs	r3, #45	@ 0x2d
 8005796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579a:	e79e      	b.n	80056da <_printf_float+0xa2>
 800579c:	9a06      	ldr	r2, [sp, #24]
 800579e:	2a47      	cmp	r2, #71	@ 0x47
 80057a0:	d1c2      	bne.n	8005728 <_printf_float+0xf0>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1c0      	bne.n	8005728 <_printf_float+0xf0>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7bd      	b.n	8005726 <_printf_float+0xee>
 80057aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057ae:	d9db      	bls.n	8005768 <_printf_float+0x130>
 80057b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80057b4:	d118      	bne.n	80057e8 <_printf_float+0x1b0>
 80057b6:	2900      	cmp	r1, #0
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	dd0b      	ble.n	80057d4 <_printf_float+0x19c>
 80057bc:	6121      	str	r1, [r4, #16]
 80057be:	b913      	cbnz	r3, 80057c6 <_printf_float+0x18e>
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	07d0      	lsls	r0, r2, #31
 80057c4:	d502      	bpl.n	80057cc <_printf_float+0x194>
 80057c6:	3301      	adds	r3, #1
 80057c8:	440b      	add	r3, r1
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80057ce:	f04f 0900 	mov.w	r9, #0
 80057d2:	e7db      	b.n	800578c <_printf_float+0x154>
 80057d4:	b913      	cbnz	r3, 80057dc <_printf_float+0x1a4>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	07d2      	lsls	r2, r2, #31
 80057da:	d501      	bpl.n	80057e0 <_printf_float+0x1a8>
 80057dc:	3302      	adds	r3, #2
 80057de:	e7f4      	b.n	80057ca <_printf_float+0x192>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e7f2      	b.n	80057ca <_printf_float+0x192>
 80057e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80057e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057ea:	4299      	cmp	r1, r3
 80057ec:	db05      	blt.n	80057fa <_printf_float+0x1c2>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	6121      	str	r1, [r4, #16]
 80057f2:	07d8      	lsls	r0, r3, #31
 80057f4:	d5ea      	bpl.n	80057cc <_printf_float+0x194>
 80057f6:	1c4b      	adds	r3, r1, #1
 80057f8:	e7e7      	b.n	80057ca <_printf_float+0x192>
 80057fa:	2900      	cmp	r1, #0
 80057fc:	bfd4      	ite	le
 80057fe:	f1c1 0202 	rsble	r2, r1, #2
 8005802:	2201      	movgt	r2, #1
 8005804:	4413      	add	r3, r2
 8005806:	e7e0      	b.n	80057ca <_printf_float+0x192>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	055a      	lsls	r2, r3, #21
 800580c:	d407      	bmi.n	800581e <_printf_float+0x1e6>
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	4642      	mov	r2, r8
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	d12b      	bne.n	8005874 <_printf_float+0x23c>
 800581c:	e767      	b.n	80056ee <_printf_float+0xb6>
 800581e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005822:	f240 80dd 	bls.w	80059e0 <_printf_float+0x3a8>
 8005826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800582a:	2200      	movs	r2, #0
 800582c:	2300      	movs	r3, #0
 800582e:	f7fb f963 	bl	8000af8 <__aeabi_dcmpeq>
 8005832:	2800      	cmp	r0, #0
 8005834:	d033      	beq.n	800589e <_printf_float+0x266>
 8005836:	4a37      	ldr	r2, [pc, #220]	@ (8005914 <_printf_float+0x2dc>)
 8005838:	2301      	movs	r3, #1
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f af54 	beq.w	80056ee <_printf_float+0xb6>
 8005846:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800584a:	4543      	cmp	r3, r8
 800584c:	db02      	blt.n	8005854 <_printf_float+0x21c>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	07d8      	lsls	r0, r3, #31
 8005852:	d50f      	bpl.n	8005874 <_printf_float+0x23c>
 8005854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af45 	beq.w	80056ee <_printf_float+0xb6>
 8005864:	f04f 0900 	mov.w	r9, #0
 8005868:	f108 38ff 	add.w	r8, r8, #4294967295
 800586c:	f104 0a1a 	add.w	sl, r4, #26
 8005870:	45c8      	cmp	r8, r9
 8005872:	dc09      	bgt.n	8005888 <_printf_float+0x250>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	079b      	lsls	r3, r3, #30
 8005878:	f100 8103 	bmi.w	8005a82 <_printf_float+0x44a>
 800587c:	68e0      	ldr	r0, [r4, #12]
 800587e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005880:	4298      	cmp	r0, r3
 8005882:	bfb8      	it	lt
 8005884:	4618      	movlt	r0, r3
 8005886:	e734      	b.n	80056f2 <_printf_float+0xba>
 8005888:	2301      	movs	r3, #1
 800588a:	4652      	mov	r2, sl
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af2b 	beq.w	80056ee <_printf_float+0xb6>
 8005898:	f109 0901 	add.w	r9, r9, #1
 800589c:	e7e8      	b.n	8005870 <_printf_float+0x238>
 800589e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	dc39      	bgt.n	8005918 <_printf_float+0x2e0>
 80058a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <_printf_float+0x2dc>)
 80058a6:	2301      	movs	r3, #1
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	f43f af1d 	beq.w	80056ee <_printf_float+0xb6>
 80058b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80058b8:	ea59 0303 	orrs.w	r3, r9, r3
 80058bc:	d102      	bne.n	80058c4 <_printf_float+0x28c>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	07d9      	lsls	r1, r3, #31
 80058c2:	d5d7      	bpl.n	8005874 <_printf_float+0x23c>
 80058c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f af0d 	beq.w	80056ee <_printf_float+0xb6>
 80058d4:	f04f 0a00 	mov.w	sl, #0
 80058d8:	f104 0b1a 	add.w	fp, r4, #26
 80058dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058de:	425b      	negs	r3, r3
 80058e0:	4553      	cmp	r3, sl
 80058e2:	dc01      	bgt.n	80058e8 <_printf_float+0x2b0>
 80058e4:	464b      	mov	r3, r9
 80058e6:	e793      	b.n	8005810 <_printf_float+0x1d8>
 80058e8:	2301      	movs	r3, #1
 80058ea:	465a      	mov	r2, fp
 80058ec:	4631      	mov	r1, r6
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	f43f aefb 	beq.w	80056ee <_printf_float+0xb6>
 80058f8:	f10a 0a01 	add.w	sl, sl, #1
 80058fc:	e7ee      	b.n	80058dc <_printf_float+0x2a4>
 80058fe:	bf00      	nop
 8005900:	7fefffff 	.word	0x7fefffff
 8005904:	08008b48 	.word	0x08008b48
 8005908:	08008b4c 	.word	0x08008b4c
 800590c:	08008b50 	.word	0x08008b50
 8005910:	08008b54 	.word	0x08008b54
 8005914:	08008b58 	.word	0x08008b58
 8005918:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800591a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800591e:	4553      	cmp	r3, sl
 8005920:	bfa8      	it	ge
 8005922:	4653      	movge	r3, sl
 8005924:	2b00      	cmp	r3, #0
 8005926:	4699      	mov	r9, r3
 8005928:	dc36      	bgt.n	8005998 <_printf_float+0x360>
 800592a:	f04f 0b00 	mov.w	fp, #0
 800592e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005932:	f104 021a 	add.w	r2, r4, #26
 8005936:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005938:	9306      	str	r3, [sp, #24]
 800593a:	eba3 0309 	sub.w	r3, r3, r9
 800593e:	455b      	cmp	r3, fp
 8005940:	dc31      	bgt.n	80059a6 <_printf_float+0x36e>
 8005942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005944:	459a      	cmp	sl, r3
 8005946:	dc3a      	bgt.n	80059be <_printf_float+0x386>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	07da      	lsls	r2, r3, #31
 800594c:	d437      	bmi.n	80059be <_printf_float+0x386>
 800594e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005950:	ebaa 0903 	sub.w	r9, sl, r3
 8005954:	9b06      	ldr	r3, [sp, #24]
 8005956:	ebaa 0303 	sub.w	r3, sl, r3
 800595a:	4599      	cmp	r9, r3
 800595c:	bfa8      	it	ge
 800595e:	4699      	movge	r9, r3
 8005960:	f1b9 0f00 	cmp.w	r9, #0
 8005964:	dc33      	bgt.n	80059ce <_printf_float+0x396>
 8005966:	f04f 0800 	mov.w	r8, #0
 800596a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800596e:	f104 0b1a 	add.w	fp, r4, #26
 8005972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005974:	ebaa 0303 	sub.w	r3, sl, r3
 8005978:	eba3 0309 	sub.w	r3, r3, r9
 800597c:	4543      	cmp	r3, r8
 800597e:	f77f af79 	ble.w	8005874 <_printf_float+0x23c>
 8005982:	2301      	movs	r3, #1
 8005984:	465a      	mov	r2, fp
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	f43f aeae 	beq.w	80056ee <_printf_float+0xb6>
 8005992:	f108 0801 	add.w	r8, r8, #1
 8005996:	e7ec      	b.n	8005972 <_printf_float+0x33a>
 8005998:	4642      	mov	r2, r8
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	d1c2      	bne.n	800592a <_printf_float+0x2f2>
 80059a4:	e6a3      	b.n	80056ee <_printf_float+0xb6>
 80059a6:	2301      	movs	r3, #1
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	9206      	str	r2, [sp, #24]
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	f43f ae9c 	beq.w	80056ee <_printf_float+0xb6>
 80059b6:	9a06      	ldr	r2, [sp, #24]
 80059b8:	f10b 0b01 	add.w	fp, fp, #1
 80059bc:	e7bb      	b.n	8005936 <_printf_float+0x2fe>
 80059be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	d1c0      	bne.n	800594e <_printf_float+0x316>
 80059cc:	e68f      	b.n	80056ee <_printf_float+0xb6>
 80059ce:	9a06      	ldr	r2, [sp, #24]
 80059d0:	464b      	mov	r3, r9
 80059d2:	4442      	add	r2, r8
 80059d4:	4631      	mov	r1, r6
 80059d6:	4628      	mov	r0, r5
 80059d8:	47b8      	blx	r7
 80059da:	3001      	adds	r0, #1
 80059dc:	d1c3      	bne.n	8005966 <_printf_float+0x32e>
 80059de:	e686      	b.n	80056ee <_printf_float+0xb6>
 80059e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059e4:	f1ba 0f01 	cmp.w	sl, #1
 80059e8:	dc01      	bgt.n	80059ee <_printf_float+0x3b6>
 80059ea:	07db      	lsls	r3, r3, #31
 80059ec:	d536      	bpl.n	8005a5c <_printf_float+0x424>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4642      	mov	r2, r8
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	f43f ae78 	beq.w	80056ee <_printf_float+0xb6>
 80059fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f43f ae70 	beq.w	80056ee <_printf_float+0xb6>
 8005a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a1a:	f7fb f86d 	bl	8000af8 <__aeabi_dcmpeq>
 8005a1e:	b9c0      	cbnz	r0, 8005a52 <_printf_float+0x41a>
 8005a20:	4653      	mov	r3, sl
 8005a22:	f108 0201 	add.w	r2, r8, #1
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d10c      	bne.n	8005a4a <_printf_float+0x412>
 8005a30:	e65d      	b.n	80056ee <_printf_float+0xb6>
 8005a32:	2301      	movs	r3, #1
 8005a34:	465a      	mov	r2, fp
 8005a36:	4631      	mov	r1, r6
 8005a38:	4628      	mov	r0, r5
 8005a3a:	47b8      	blx	r7
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	f43f ae56 	beq.w	80056ee <_printf_float+0xb6>
 8005a42:	f108 0801 	add.w	r8, r8, #1
 8005a46:	45d0      	cmp	r8, sl
 8005a48:	dbf3      	blt.n	8005a32 <_printf_float+0x3fa>
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a50:	e6df      	b.n	8005812 <_printf_float+0x1da>
 8005a52:	f04f 0800 	mov.w	r8, #0
 8005a56:	f104 0b1a 	add.w	fp, r4, #26
 8005a5a:	e7f4      	b.n	8005a46 <_printf_float+0x40e>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4642      	mov	r2, r8
 8005a60:	e7e1      	b.n	8005a26 <_printf_float+0x3ee>
 8005a62:	2301      	movs	r3, #1
 8005a64:	464a      	mov	r2, r9
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f43f ae3e 	beq.w	80056ee <_printf_float+0xb6>
 8005a72:	f108 0801 	add.w	r8, r8, #1
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a7a:	1a5b      	subs	r3, r3, r1
 8005a7c:	4543      	cmp	r3, r8
 8005a7e:	dcf0      	bgt.n	8005a62 <_printf_float+0x42a>
 8005a80:	e6fc      	b.n	800587c <_printf_float+0x244>
 8005a82:	f04f 0800 	mov.w	r8, #0
 8005a86:	f104 0919 	add.w	r9, r4, #25
 8005a8a:	e7f4      	b.n	8005a76 <_printf_float+0x43e>

08005a8c <_printf_common>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	4616      	mov	r6, r2
 8005a92:	4698      	mov	r8, r3
 8005a94:	688a      	ldr	r2, [r1, #8]
 8005a96:	690b      	ldr	r3, [r1, #16]
 8005a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	bfb8      	it	lt
 8005aa0:	4613      	movlt	r3, r2
 8005aa2:	6033      	str	r3, [r6, #0]
 8005aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	b10a      	cbz	r2, 8005ab2 <_printf_common+0x26>
 8005aae:	3301      	adds	r3, #1
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	0699      	lsls	r1, r3, #26
 8005ab6:	bf42      	ittt	mi
 8005ab8:	6833      	ldrmi	r3, [r6, #0]
 8005aba:	3302      	addmi	r3, #2
 8005abc:	6033      	strmi	r3, [r6, #0]
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	f015 0506 	ands.w	r5, r5, #6
 8005ac4:	d106      	bne.n	8005ad4 <_printf_common+0x48>
 8005ac6:	f104 0a19 	add.w	sl, r4, #25
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	6832      	ldr	r2, [r6, #0]
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dc26      	bgt.n	8005b22 <_printf_common+0x96>
 8005ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	3b00      	subs	r3, #0
 8005adc:	bf18      	it	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	0692      	lsls	r2, r2, #26
 8005ae2:	d42b      	bmi.n	8005b3c <_printf_common+0xb0>
 8005ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ae8:	4641      	mov	r1, r8
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c8      	blx	r9
 8005aee:	3001      	adds	r0, #1
 8005af0:	d01e      	beq.n	8005b30 <_printf_common+0xa4>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	6922      	ldr	r2, [r4, #16]
 8005af6:	f003 0306 	and.w	r3, r3, #6
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	bf02      	ittt	eq
 8005afe:	68e5      	ldreq	r5, [r4, #12]
 8005b00:	6833      	ldreq	r3, [r6, #0]
 8005b02:	1aed      	subeq	r5, r5, r3
 8005b04:	68a3      	ldr	r3, [r4, #8]
 8005b06:	bf0c      	ite	eq
 8005b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b0c:	2500      	movne	r5, #0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	bfc4      	itt	gt
 8005b12:	1a9b      	subgt	r3, r3, r2
 8005b14:	18ed      	addgt	r5, r5, r3
 8005b16:	2600      	movs	r6, #0
 8005b18:	341a      	adds	r4, #26
 8005b1a:	42b5      	cmp	r5, r6
 8005b1c:	d11a      	bne.n	8005b54 <_printf_common+0xc8>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e008      	b.n	8005b34 <_printf_common+0xa8>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4652      	mov	r2, sl
 8005b26:	4641      	mov	r1, r8
 8005b28:	4638      	mov	r0, r7
 8005b2a:	47c8      	blx	r9
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d103      	bne.n	8005b38 <_printf_common+0xac>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b38:	3501      	adds	r5, #1
 8005b3a:	e7c6      	b.n	8005aca <_printf_common+0x3e>
 8005b3c:	18e1      	adds	r1, r4, r3
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	2030      	movs	r0, #48	@ 0x30
 8005b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b46:	4422      	add	r2, r4
 8005b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b50:	3302      	adds	r3, #2
 8005b52:	e7c7      	b.n	8005ae4 <_printf_common+0x58>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4622      	mov	r2, r4
 8005b58:	4641      	mov	r1, r8
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c8      	blx	r9
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d0e6      	beq.n	8005b30 <_printf_common+0xa4>
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7d9      	b.n	8005b1a <_printf_common+0x8e>
	...

08005b68 <_printf_i>:
 8005b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	7e0f      	ldrb	r7, [r1, #24]
 8005b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b70:	2f78      	cmp	r7, #120	@ 0x78
 8005b72:	4691      	mov	r9, r2
 8005b74:	4680      	mov	r8, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b7e:	d807      	bhi.n	8005b90 <_printf_i+0x28>
 8005b80:	2f62      	cmp	r7, #98	@ 0x62
 8005b82:	d80a      	bhi.n	8005b9a <_printf_i+0x32>
 8005b84:	2f00      	cmp	r7, #0
 8005b86:	f000 80d2 	beq.w	8005d2e <_printf_i+0x1c6>
 8005b8a:	2f58      	cmp	r7, #88	@ 0x58
 8005b8c:	f000 80b9 	beq.w	8005d02 <_printf_i+0x19a>
 8005b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b98:	e03a      	b.n	8005c10 <_printf_i+0xa8>
 8005b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b9e:	2b15      	cmp	r3, #21
 8005ba0:	d8f6      	bhi.n	8005b90 <_printf_i+0x28>
 8005ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ba8 <_printf_i+0x40>)
 8005ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005c15 	.word	0x08005c15
 8005bb0:	08005b91 	.word	0x08005b91
 8005bb4:	08005b91 	.word	0x08005b91
 8005bb8:	08005b91 	.word	0x08005b91
 8005bbc:	08005b91 	.word	0x08005b91
 8005bc0:	08005c15 	.word	0x08005c15
 8005bc4:	08005b91 	.word	0x08005b91
 8005bc8:	08005b91 	.word	0x08005b91
 8005bcc:	08005b91 	.word	0x08005b91
 8005bd0:	08005b91 	.word	0x08005b91
 8005bd4:	08005d15 	.word	0x08005d15
 8005bd8:	08005c3f 	.word	0x08005c3f
 8005bdc:	08005ccf 	.word	0x08005ccf
 8005be0:	08005b91 	.word	0x08005b91
 8005be4:	08005b91 	.word	0x08005b91
 8005be8:	08005d37 	.word	0x08005d37
 8005bec:	08005b91 	.word	0x08005b91
 8005bf0:	08005c3f 	.word	0x08005c3f
 8005bf4:	08005b91 	.word	0x08005b91
 8005bf8:	08005b91 	.word	0x08005b91
 8005bfc:	08005cd7 	.word	0x08005cd7
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6032      	str	r2, [r6, #0]
 8005c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c10:	2301      	movs	r3, #1
 8005c12:	e09d      	b.n	8005d50 <_printf_i+0x1e8>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	6820      	ldr	r0, [r4, #0]
 8005c18:	1d19      	adds	r1, r3, #4
 8005c1a:	6031      	str	r1, [r6, #0]
 8005c1c:	0606      	lsls	r6, r0, #24
 8005c1e:	d501      	bpl.n	8005c24 <_printf_i+0xbc>
 8005c20:	681d      	ldr	r5, [r3, #0]
 8005c22:	e003      	b.n	8005c2c <_printf_i+0xc4>
 8005c24:	0645      	lsls	r5, r0, #25
 8005c26:	d5fb      	bpl.n	8005c20 <_printf_i+0xb8>
 8005c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	da03      	bge.n	8005c38 <_printf_i+0xd0>
 8005c30:	232d      	movs	r3, #45	@ 0x2d
 8005c32:	426d      	negs	r5, r5
 8005c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c38:	4859      	ldr	r0, [pc, #356]	@ (8005da0 <_printf_i+0x238>)
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	e011      	b.n	8005c62 <_printf_i+0xfa>
 8005c3e:	6821      	ldr	r1, [r4, #0]
 8005c40:	6833      	ldr	r3, [r6, #0]
 8005c42:	0608      	lsls	r0, r1, #24
 8005c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c48:	d402      	bmi.n	8005c50 <_printf_i+0xe8>
 8005c4a:	0649      	lsls	r1, r1, #25
 8005c4c:	bf48      	it	mi
 8005c4e:	b2ad      	uxthmi	r5, r5
 8005c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c52:	4853      	ldr	r0, [pc, #332]	@ (8005da0 <_printf_i+0x238>)
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	bf14      	ite	ne
 8005c58:	230a      	movne	r3, #10
 8005c5a:	2308      	moveq	r3, #8
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c62:	6866      	ldr	r6, [r4, #4]
 8005c64:	60a6      	str	r6, [r4, #8]
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	bfa2      	ittt	ge
 8005c6a:	6821      	ldrge	r1, [r4, #0]
 8005c6c:	f021 0104 	bicge.w	r1, r1, #4
 8005c70:	6021      	strge	r1, [r4, #0]
 8005c72:	b90d      	cbnz	r5, 8005c78 <_printf_i+0x110>
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	d04b      	beq.n	8005d10 <_printf_i+0x1a8>
 8005c78:	4616      	mov	r6, r2
 8005c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c82:	5dc7      	ldrb	r7, [r0, r7]
 8005c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c88:	462f      	mov	r7, r5
 8005c8a:	42bb      	cmp	r3, r7
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	d9f4      	bls.n	8005c7a <_printf_i+0x112>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10b      	bne.n	8005cac <_printf_i+0x144>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07df      	lsls	r7, r3, #31
 8005c98:	d508      	bpl.n	8005cac <_printf_i+0x144>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	bfde      	ittt	le
 8005ca2:	2330      	movle	r3, #48	@ 0x30
 8005ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ca8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cac:	1b92      	subs	r2, r2, r6
 8005cae:	6122      	str	r2, [r4, #16]
 8005cb0:	f8cd a000 	str.w	sl, [sp]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	aa03      	add	r2, sp, #12
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fee6 	bl	8005a8c <_printf_common>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d14a      	bne.n	8005d5a <_printf_i+0x1f2>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	b004      	add	sp, #16
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	4833      	ldr	r0, [pc, #204]	@ (8005da4 <_printf_i+0x23c>)
 8005cd8:	2778      	movs	r7, #120	@ 0x78
 8005cda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	6831      	ldr	r1, [r6, #0]
 8005ce2:	061f      	lsls	r7, r3, #24
 8005ce4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ce8:	d402      	bmi.n	8005cf0 <_printf_i+0x188>
 8005cea:	065f      	lsls	r7, r3, #25
 8005cec:	bf48      	it	mi
 8005cee:	b2ad      	uxthmi	r5, r5
 8005cf0:	6031      	str	r1, [r6, #0]
 8005cf2:	07d9      	lsls	r1, r3, #31
 8005cf4:	bf44      	itt	mi
 8005cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cfa:	6023      	strmi	r3, [r4, #0]
 8005cfc:	b11d      	cbz	r5, 8005d06 <_printf_i+0x19e>
 8005cfe:	2310      	movs	r3, #16
 8005d00:	e7ac      	b.n	8005c5c <_printf_i+0xf4>
 8005d02:	4827      	ldr	r0, [pc, #156]	@ (8005da0 <_printf_i+0x238>)
 8005d04:	e7e9      	b.n	8005cda <_printf_i+0x172>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f023 0320 	bic.w	r3, r3, #32
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	e7f6      	b.n	8005cfe <_printf_i+0x196>
 8005d10:	4616      	mov	r6, r2
 8005d12:	e7bd      	b.n	8005c90 <_printf_i+0x128>
 8005d14:	6833      	ldr	r3, [r6, #0]
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	6961      	ldr	r1, [r4, #20]
 8005d1a:	1d18      	adds	r0, r3, #4
 8005d1c:	6030      	str	r0, [r6, #0]
 8005d1e:	062e      	lsls	r6, r5, #24
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	d501      	bpl.n	8005d28 <_printf_i+0x1c0>
 8005d24:	6019      	str	r1, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <_printf_i+0x1c6>
 8005d28:	0668      	lsls	r0, r5, #25
 8005d2a:	d5fb      	bpl.n	8005d24 <_printf_i+0x1bc>
 8005d2c:	8019      	strh	r1, [r3, #0]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	4616      	mov	r6, r2
 8005d34:	e7bc      	b.n	8005cb0 <_printf_i+0x148>
 8005d36:	6833      	ldr	r3, [r6, #0]
 8005d38:	1d1a      	adds	r2, r3, #4
 8005d3a:	6032      	str	r2, [r6, #0]
 8005d3c:	681e      	ldr	r6, [r3, #0]
 8005d3e:	6862      	ldr	r2, [r4, #4]
 8005d40:	2100      	movs	r1, #0
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7fa fa5c 	bl	8000200 <memchr>
 8005d48:	b108      	cbz	r0, 8005d4e <_printf_i+0x1e6>
 8005d4a:	1b80      	subs	r0, r0, r6
 8005d4c:	6060      	str	r0, [r4, #4]
 8005d4e:	6863      	ldr	r3, [r4, #4]
 8005d50:	6123      	str	r3, [r4, #16]
 8005d52:	2300      	movs	r3, #0
 8005d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d58:	e7aa      	b.n	8005cb0 <_printf_i+0x148>
 8005d5a:	6923      	ldr	r3, [r4, #16]
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4640      	mov	r0, r8
 8005d62:	47d0      	blx	sl
 8005d64:	3001      	adds	r0, #1
 8005d66:	d0ad      	beq.n	8005cc4 <_printf_i+0x15c>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	079b      	lsls	r3, r3, #30
 8005d6c:	d413      	bmi.n	8005d96 <_printf_i+0x22e>
 8005d6e:	68e0      	ldr	r0, [r4, #12]
 8005d70:	9b03      	ldr	r3, [sp, #12]
 8005d72:	4298      	cmp	r0, r3
 8005d74:	bfb8      	it	lt
 8005d76:	4618      	movlt	r0, r3
 8005d78:	e7a6      	b.n	8005cc8 <_printf_i+0x160>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	4649      	mov	r1, r9
 8005d80:	4640      	mov	r0, r8
 8005d82:	47d0      	blx	sl
 8005d84:	3001      	adds	r0, #1
 8005d86:	d09d      	beq.n	8005cc4 <_printf_i+0x15c>
 8005d88:	3501      	adds	r5, #1
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	9903      	ldr	r1, [sp, #12]
 8005d8e:	1a5b      	subs	r3, r3, r1
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dcf2      	bgt.n	8005d7a <_printf_i+0x212>
 8005d94:	e7eb      	b.n	8005d6e <_printf_i+0x206>
 8005d96:	2500      	movs	r5, #0
 8005d98:	f104 0619 	add.w	r6, r4, #25
 8005d9c:	e7f5      	b.n	8005d8a <_printf_i+0x222>
 8005d9e:	bf00      	nop
 8005da0:	08008b5a 	.word	0x08008b5a
 8005da4:	08008b6b 	.word	0x08008b6b

08005da8 <std>:
 8005da8:	2300      	movs	r3, #0
 8005daa:	b510      	push	{r4, lr}
 8005dac:	4604      	mov	r4, r0
 8005dae:	e9c0 3300 	strd	r3, r3, [r0]
 8005db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005db6:	6083      	str	r3, [r0, #8]
 8005db8:	8181      	strh	r1, [r0, #12]
 8005dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005dbc:	81c2      	strh	r2, [r0, #14]
 8005dbe:	6183      	str	r3, [r0, #24]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	305c      	adds	r0, #92	@ 0x5c
 8005dc6:	f000 f9f9 	bl	80061bc <memset>
 8005dca:	4b0d      	ldr	r3, [pc, #52]	@ (8005e00 <std+0x58>)
 8005dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005dce:	4b0d      	ldr	r3, [pc, #52]	@ (8005e04 <std+0x5c>)
 8005dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <std+0x60>)
 8005dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <std+0x64>)
 8005dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005dda:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <std+0x68>)
 8005ddc:	6224      	str	r4, [r4, #32]
 8005dde:	429c      	cmp	r4, r3
 8005de0:	d006      	beq.n	8005df0 <std+0x48>
 8005de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005de6:	4294      	cmp	r4, r2
 8005de8:	d002      	beq.n	8005df0 <std+0x48>
 8005dea:	33d0      	adds	r3, #208	@ 0xd0
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d105      	bne.n	8005dfc <std+0x54>
 8005df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f000 baca 	b.w	8006390 <__retarget_lock_init_recursive>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	0800600d 	.word	0x0800600d
 8005e04:	0800602f 	.word	0x0800602f
 8005e08:	08006067 	.word	0x08006067
 8005e0c:	0800608b 	.word	0x0800608b
 8005e10:	200002ac 	.word	0x200002ac

08005e14 <stdio_exit_handler>:
 8005e14:	4a02      	ldr	r2, [pc, #8]	@ (8005e20 <stdio_exit_handler+0xc>)
 8005e16:	4903      	ldr	r1, [pc, #12]	@ (8005e24 <stdio_exit_handler+0x10>)
 8005e18:	4803      	ldr	r0, [pc, #12]	@ (8005e28 <stdio_exit_handler+0x14>)
 8005e1a:	f000 b869 	b.w	8005ef0 <_fwalk_sglue>
 8005e1e:	bf00      	nop
 8005e20:	20000010 	.word	0x20000010
 8005e24:	08008641 	.word	0x08008641
 8005e28:	2000018c 	.word	0x2000018c

08005e2c <cleanup_stdio>:
 8005e2c:	6841      	ldr	r1, [r0, #4]
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e60 <cleanup_stdio+0x34>)
 8005e30:	4299      	cmp	r1, r3
 8005e32:	b510      	push	{r4, lr}
 8005e34:	4604      	mov	r4, r0
 8005e36:	d001      	beq.n	8005e3c <cleanup_stdio+0x10>
 8005e38:	f002 fc02 	bl	8008640 <_fflush_r>
 8005e3c:	68a1      	ldr	r1, [r4, #8]
 8005e3e:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <cleanup_stdio+0x38>)
 8005e40:	4299      	cmp	r1, r3
 8005e42:	d002      	beq.n	8005e4a <cleanup_stdio+0x1e>
 8005e44:	4620      	mov	r0, r4
 8005e46:	f002 fbfb 	bl	8008640 <_fflush_r>
 8005e4a:	68e1      	ldr	r1, [r4, #12]
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <cleanup_stdio+0x3c>)
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	d004      	beq.n	8005e5c <cleanup_stdio+0x30>
 8005e52:	4620      	mov	r0, r4
 8005e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e58:	f002 bbf2 	b.w	8008640 <_fflush_r>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	bf00      	nop
 8005e60:	200002ac 	.word	0x200002ac
 8005e64:	20000314 	.word	0x20000314
 8005e68:	2000037c 	.word	0x2000037c

08005e6c <global_stdio_init.part.0>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e9c <global_stdio_init.part.0+0x30>)
 8005e70:	4c0b      	ldr	r4, [pc, #44]	@ (8005ea0 <global_stdio_init.part.0+0x34>)
 8005e72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea4 <global_stdio_init.part.0+0x38>)
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	4620      	mov	r0, r4
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2104      	movs	r1, #4
 8005e7c:	f7ff ff94 	bl	8005da8 <std>
 8005e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e84:	2201      	movs	r2, #1
 8005e86:	2109      	movs	r1, #9
 8005e88:	f7ff ff8e 	bl	8005da8 <std>
 8005e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e90:	2202      	movs	r2, #2
 8005e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e96:	2112      	movs	r1, #18
 8005e98:	f7ff bf86 	b.w	8005da8 <std>
 8005e9c:	200003e4 	.word	0x200003e4
 8005ea0:	200002ac 	.word	0x200002ac
 8005ea4:	08005e15 	.word	0x08005e15

08005ea8 <__sfp_lock_acquire>:
 8005ea8:	4801      	ldr	r0, [pc, #4]	@ (8005eb0 <__sfp_lock_acquire+0x8>)
 8005eaa:	f000 ba72 	b.w	8006392 <__retarget_lock_acquire_recursive>
 8005eae:	bf00      	nop
 8005eb0:	200003ed 	.word	0x200003ed

08005eb4 <__sfp_lock_release>:
 8005eb4:	4801      	ldr	r0, [pc, #4]	@ (8005ebc <__sfp_lock_release+0x8>)
 8005eb6:	f000 ba6d 	b.w	8006394 <__retarget_lock_release_recursive>
 8005eba:	bf00      	nop
 8005ebc:	200003ed 	.word	0x200003ed

08005ec0 <__sinit>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	f7ff fff0 	bl	8005ea8 <__sfp_lock_acquire>
 8005ec8:	6a23      	ldr	r3, [r4, #32]
 8005eca:	b11b      	cbz	r3, 8005ed4 <__sinit+0x14>
 8005ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed0:	f7ff bff0 	b.w	8005eb4 <__sfp_lock_release>
 8005ed4:	4b04      	ldr	r3, [pc, #16]	@ (8005ee8 <__sinit+0x28>)
 8005ed6:	6223      	str	r3, [r4, #32]
 8005ed8:	4b04      	ldr	r3, [pc, #16]	@ (8005eec <__sinit+0x2c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f5      	bne.n	8005ecc <__sinit+0xc>
 8005ee0:	f7ff ffc4 	bl	8005e6c <global_stdio_init.part.0>
 8005ee4:	e7f2      	b.n	8005ecc <__sinit+0xc>
 8005ee6:	bf00      	nop
 8005ee8:	08005e2d 	.word	0x08005e2d
 8005eec:	200003e4 	.word	0x200003e4

08005ef0 <_fwalk_sglue>:
 8005ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	4688      	mov	r8, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	2600      	movs	r6, #0
 8005efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f00:	f1b9 0901 	subs.w	r9, r9, #1
 8005f04:	d505      	bpl.n	8005f12 <_fwalk_sglue+0x22>
 8005f06:	6824      	ldr	r4, [r4, #0]
 8005f08:	2c00      	cmp	r4, #0
 8005f0a:	d1f7      	bne.n	8005efc <_fwalk_sglue+0xc>
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d907      	bls.n	8005f28 <_fwalk_sglue+0x38>
 8005f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	d003      	beq.n	8005f28 <_fwalk_sglue+0x38>
 8005f20:	4629      	mov	r1, r5
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c0      	blx	r8
 8005f26:	4306      	orrs	r6, r0
 8005f28:	3568      	adds	r5, #104	@ 0x68
 8005f2a:	e7e9      	b.n	8005f00 <_fwalk_sglue+0x10>

08005f2c <iprintf>:
 8005f2c:	b40f      	push	{r0, r1, r2, r3}
 8005f2e:	b507      	push	{r0, r1, r2, lr}
 8005f30:	4906      	ldr	r1, [pc, #24]	@ (8005f4c <iprintf+0x20>)
 8005f32:	ab04      	add	r3, sp, #16
 8005f34:	6808      	ldr	r0, [r1, #0]
 8005f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3a:	6881      	ldr	r1, [r0, #8]
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	f002 f9e3 	bl	8008308 <_vfiprintf_r>
 8005f42:	b003      	add	sp, #12
 8005f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f48:	b004      	add	sp, #16
 8005f4a:	4770      	bx	lr
 8005f4c:	20000188 	.word	0x20000188

08005f50 <_puts_r>:
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b570      	push	{r4, r5, r6, lr}
 8005f54:	6884      	ldr	r4, [r0, #8]
 8005f56:	4605      	mov	r5, r0
 8005f58:	460e      	mov	r6, r1
 8005f5a:	b90b      	cbnz	r3, 8005f60 <_puts_r+0x10>
 8005f5c:	f7ff ffb0 	bl	8005ec0 <__sinit>
 8005f60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f62:	07db      	lsls	r3, r3, #31
 8005f64:	d405      	bmi.n	8005f72 <_puts_r+0x22>
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	0598      	lsls	r0, r3, #22
 8005f6a:	d402      	bmi.n	8005f72 <_puts_r+0x22>
 8005f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f6e:	f000 fa10 	bl	8006392 <__retarget_lock_acquire_recursive>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	0719      	lsls	r1, r3, #28
 8005f76:	d502      	bpl.n	8005f7e <_puts_r+0x2e>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d135      	bne.n	8005fea <_puts_r+0x9a>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 f8c5 	bl	8006110 <__swsetup_r>
 8005f86:	b380      	cbz	r0, 8005fea <_puts_r+0x9a>
 8005f88:	f04f 35ff 	mov.w	r5, #4294967295
 8005f8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f8e:	07da      	lsls	r2, r3, #31
 8005f90:	d405      	bmi.n	8005f9e <_puts_r+0x4e>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	d402      	bmi.n	8005f9e <_puts_r+0x4e>
 8005f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9a:	f000 f9fb 	bl	8006394 <__retarget_lock_release_recursive>
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da04      	bge.n	8005fb0 <_puts_r+0x60>
 8005fa6:	69a2      	ldr	r2, [r4, #24]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	dc17      	bgt.n	8005fdc <_puts_r+0x8c>
 8005fac:	290a      	cmp	r1, #10
 8005fae:	d015      	beq.n	8005fdc <_puts_r+0x8c>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	6022      	str	r2, [r4, #0]
 8005fb6:	7019      	strb	r1, [r3, #0]
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	60a3      	str	r3, [r4, #8]
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d1ed      	bne.n	8005fa2 <_puts_r+0x52>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da11      	bge.n	8005fee <_puts_r+0x9e>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	210a      	movs	r1, #10
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 f85f 	bl	8006092 <__swbuf_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d0d7      	beq.n	8005f88 <_puts_r+0x38>
 8005fd8:	250a      	movs	r5, #10
 8005fda:	e7d7      	b.n	8005f8c <_puts_r+0x3c>
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f857 	bl	8006092 <__swbuf_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1e7      	bne.n	8005fb8 <_puts_r+0x68>
 8005fe8:	e7ce      	b.n	8005f88 <_puts_r+0x38>
 8005fea:	3e01      	subs	r6, #1
 8005fec:	e7e4      	b.n	8005fb8 <_puts_r+0x68>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	6022      	str	r2, [r4, #0]
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e7ee      	b.n	8005fd8 <_puts_r+0x88>
	...

08005ffc <puts>:
 8005ffc:	4b02      	ldr	r3, [pc, #8]	@ (8006008 <puts+0xc>)
 8005ffe:	4601      	mov	r1, r0
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f7ff bfa5 	b.w	8005f50 <_puts_r>
 8006006:	bf00      	nop
 8006008:	20000188 	.word	0x20000188

0800600c <__sread>:
 800600c:	b510      	push	{r4, lr}
 800600e:	460c      	mov	r4, r1
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	f000 f96e 	bl	80062f4 <_read_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	bfab      	itete	ge
 800601c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800601e:	89a3      	ldrhlt	r3, [r4, #12]
 8006020:	181b      	addge	r3, r3, r0
 8006022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006026:	bfac      	ite	ge
 8006028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800602a:	81a3      	strhlt	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__swrite>:
 800602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	461f      	mov	r7, r3
 8006034:	898b      	ldrh	r3, [r1, #12]
 8006036:	05db      	lsls	r3, r3, #23
 8006038:	4605      	mov	r5, r0
 800603a:	460c      	mov	r4, r1
 800603c:	4616      	mov	r6, r2
 800603e:	d505      	bpl.n	800604c <__swrite+0x1e>
 8006040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006044:	2302      	movs	r3, #2
 8006046:	2200      	movs	r2, #0
 8006048:	f000 f942 	bl	80062d0 <_lseek_r>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	4632      	mov	r2, r6
 800605a:	463b      	mov	r3, r7
 800605c:	4628      	mov	r0, r5
 800605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006062:	f000 b959 	b.w	8006318 <_write_r>

08006066 <__sseek>:
 8006066:	b510      	push	{r4, lr}
 8006068:	460c      	mov	r4, r1
 800606a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606e:	f000 f92f 	bl	80062d0 <_lseek_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	bf15      	itete	ne
 8006078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800607a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800607e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006082:	81a3      	strheq	r3, [r4, #12]
 8006084:	bf18      	it	ne
 8006086:	81a3      	strhne	r3, [r4, #12]
 8006088:	bd10      	pop	{r4, pc}

0800608a <__sclose>:
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 b90f 	b.w	80062b0 <_close_r>

08006092 <__swbuf_r>:
 8006092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006094:	460e      	mov	r6, r1
 8006096:	4614      	mov	r4, r2
 8006098:	4605      	mov	r5, r0
 800609a:	b118      	cbz	r0, 80060a4 <__swbuf_r+0x12>
 800609c:	6a03      	ldr	r3, [r0, #32]
 800609e:	b90b      	cbnz	r3, 80060a4 <__swbuf_r+0x12>
 80060a0:	f7ff ff0e 	bl	8005ec0 <__sinit>
 80060a4:	69a3      	ldr	r3, [r4, #24]
 80060a6:	60a3      	str	r3, [r4, #8]
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	071a      	lsls	r2, r3, #28
 80060ac:	d501      	bpl.n	80060b2 <__swbuf_r+0x20>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	b943      	cbnz	r3, 80060c4 <__swbuf_r+0x32>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f82b 	bl	8006110 <__swsetup_r>
 80060ba:	b118      	cbz	r0, 80060c4 <__swbuf_r+0x32>
 80060bc:	f04f 37ff 	mov.w	r7, #4294967295
 80060c0:	4638      	mov	r0, r7
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	6922      	ldr	r2, [r4, #16]
 80060c8:	1a98      	subs	r0, r3, r2
 80060ca:	6963      	ldr	r3, [r4, #20]
 80060cc:	b2f6      	uxtb	r6, r6
 80060ce:	4283      	cmp	r3, r0
 80060d0:	4637      	mov	r7, r6
 80060d2:	dc05      	bgt.n	80060e0 <__swbuf_r+0x4e>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f002 fab2 	bl	8008640 <_fflush_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1ed      	bne.n	80060bc <__swbuf_r+0x2a>
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	6022      	str	r2, [r4, #0]
 80060ec:	701e      	strb	r6, [r3, #0]
 80060ee:	6962      	ldr	r2, [r4, #20]
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d004      	beq.n	8006100 <__swbuf_r+0x6e>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	07db      	lsls	r3, r3, #31
 80060fa:	d5e1      	bpl.n	80060c0 <__swbuf_r+0x2e>
 80060fc:	2e0a      	cmp	r6, #10
 80060fe:	d1df      	bne.n	80060c0 <__swbuf_r+0x2e>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f002 fa9c 	bl	8008640 <_fflush_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d0d9      	beq.n	80060c0 <__swbuf_r+0x2e>
 800610c:	e7d6      	b.n	80060bc <__swbuf_r+0x2a>
	...

08006110 <__swsetup_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <__swsetup_r+0xa8>)
 8006114:	4605      	mov	r5, r0
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	460c      	mov	r4, r1
 800611a:	b118      	cbz	r0, 8006124 <__swsetup_r+0x14>
 800611c:	6a03      	ldr	r3, [r0, #32]
 800611e:	b90b      	cbnz	r3, 8006124 <__swsetup_r+0x14>
 8006120:	f7ff fece 	bl	8005ec0 <__sinit>
 8006124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006128:	0719      	lsls	r1, r3, #28
 800612a:	d422      	bmi.n	8006172 <__swsetup_r+0x62>
 800612c:	06da      	lsls	r2, r3, #27
 800612e:	d407      	bmi.n	8006140 <__swsetup_r+0x30>
 8006130:	2209      	movs	r2, #9
 8006132:	602a      	str	r2, [r5, #0]
 8006134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	e033      	b.n	80061a8 <__swsetup_r+0x98>
 8006140:	0758      	lsls	r0, r3, #29
 8006142:	d512      	bpl.n	800616a <__swsetup_r+0x5a>
 8006144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006146:	b141      	cbz	r1, 800615a <__swsetup_r+0x4a>
 8006148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800614c:	4299      	cmp	r1, r3
 800614e:	d002      	beq.n	8006156 <__swsetup_r+0x46>
 8006150:	4628      	mov	r0, r5
 8006152:	f000 ffa5 	bl	80070a0 <_free_r>
 8006156:	2300      	movs	r3, #0
 8006158:	6363      	str	r3, [r4, #52]	@ 0x34
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	2300      	movs	r3, #0
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6923      	ldr	r3, [r4, #16]
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f043 0308 	orr.w	r3, r3, #8
 8006170:	81a3      	strh	r3, [r4, #12]
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	b94b      	cbnz	r3, 800618a <__swsetup_r+0x7a>
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800617c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006180:	d003      	beq.n	800618a <__swsetup_r+0x7a>
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f002 fabb 	bl	8008700 <__smakebuf_r>
 800618a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618e:	f013 0201 	ands.w	r2, r3, #1
 8006192:	d00a      	beq.n	80061aa <__swsetup_r+0x9a>
 8006194:	2200      	movs	r2, #0
 8006196:	60a2      	str	r2, [r4, #8]
 8006198:	6962      	ldr	r2, [r4, #20]
 800619a:	4252      	negs	r2, r2
 800619c:	61a2      	str	r2, [r4, #24]
 800619e:	6922      	ldr	r2, [r4, #16]
 80061a0:	b942      	cbnz	r2, 80061b4 <__swsetup_r+0xa4>
 80061a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061a6:	d1c5      	bne.n	8006134 <__swsetup_r+0x24>
 80061a8:	bd38      	pop	{r3, r4, r5, pc}
 80061aa:	0799      	lsls	r1, r3, #30
 80061ac:	bf58      	it	pl
 80061ae:	6962      	ldrpl	r2, [r4, #20]
 80061b0:	60a2      	str	r2, [r4, #8]
 80061b2:	e7f4      	b.n	800619e <__swsetup_r+0x8e>
 80061b4:	2000      	movs	r0, #0
 80061b6:	e7f7      	b.n	80061a8 <__swsetup_r+0x98>
 80061b8:	20000188 	.word	0x20000188

080061bc <memset>:
 80061bc:	4402      	add	r2, r0
 80061be:	4603      	mov	r3, r0
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d100      	bne.n	80061c6 <memset+0xa>
 80061c4:	4770      	bx	lr
 80061c6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ca:	e7f9      	b.n	80061c0 <memset+0x4>

080061cc <strncmp>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	b16a      	cbz	r2, 80061ec <strncmp+0x20>
 80061d0:	3901      	subs	r1, #1
 80061d2:	1884      	adds	r4, r0, r2
 80061d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80061dc:	429a      	cmp	r2, r3
 80061de:	d103      	bne.n	80061e8 <strncmp+0x1c>
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d001      	beq.n	80061e8 <strncmp+0x1c>
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d1f5      	bne.n	80061d4 <strncmp+0x8>
 80061e8:	1ad0      	subs	r0, r2, r3
 80061ea:	bd10      	pop	{r4, pc}
 80061ec:	4610      	mov	r0, r2
 80061ee:	e7fc      	b.n	80061ea <strncmp+0x1e>

080061f0 <strtok>:
 80061f0:	4b16      	ldr	r3, [pc, #88]	@ (800624c <strtok+0x5c>)
 80061f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f6:	681f      	ldr	r7, [r3, #0]
 80061f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80061fa:	4605      	mov	r5, r0
 80061fc:	460e      	mov	r6, r1
 80061fe:	b9ec      	cbnz	r4, 800623c <strtok+0x4c>
 8006200:	2050      	movs	r0, #80	@ 0x50
 8006202:	f001 fad1 	bl	80077a8 <malloc>
 8006206:	4602      	mov	r2, r0
 8006208:	6478      	str	r0, [r7, #68]	@ 0x44
 800620a:	b920      	cbnz	r0, 8006216 <strtok+0x26>
 800620c:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <strtok+0x60>)
 800620e:	4811      	ldr	r0, [pc, #68]	@ (8006254 <strtok+0x64>)
 8006210:	215b      	movs	r1, #91	@ 0x5b
 8006212:	f000 f8d9 	bl	80063c8 <__assert_func>
 8006216:	e9c0 4400 	strd	r4, r4, [r0]
 800621a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800621e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006222:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006226:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800622a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800622e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006232:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006236:	6184      	str	r4, [r0, #24]
 8006238:	7704      	strb	r4, [r0, #28]
 800623a:	6244      	str	r4, [r0, #36]	@ 0x24
 800623c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	2301      	movs	r3, #1
 8006244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	f000 b806 	b.w	8006258 <__strtok_r>
 800624c:	20000188 	.word	0x20000188
 8006250:	08008b7c 	.word	0x08008b7c
 8006254:	08008b93 	.word	0x08008b93

08006258 <__strtok_r>:
 8006258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625a:	4604      	mov	r4, r0
 800625c:	b908      	cbnz	r0, 8006262 <__strtok_r+0xa>
 800625e:	6814      	ldr	r4, [r2, #0]
 8006260:	b144      	cbz	r4, 8006274 <__strtok_r+0x1c>
 8006262:	4620      	mov	r0, r4
 8006264:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006268:	460f      	mov	r7, r1
 800626a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800626e:	b91e      	cbnz	r6, 8006278 <__strtok_r+0x20>
 8006270:	b965      	cbnz	r5, 800628c <__strtok_r+0x34>
 8006272:	6015      	str	r5, [r2, #0]
 8006274:	2000      	movs	r0, #0
 8006276:	e005      	b.n	8006284 <__strtok_r+0x2c>
 8006278:	42b5      	cmp	r5, r6
 800627a:	d1f6      	bne.n	800626a <__strtok_r+0x12>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <__strtok_r+0xa>
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	7003      	strb	r3, [r0, #0]
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006286:	461c      	mov	r4, r3
 8006288:	e00c      	b.n	80062a4 <__strtok_r+0x4c>
 800628a:	b915      	cbnz	r5, 8006292 <__strtok_r+0x3a>
 800628c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006290:	460e      	mov	r6, r1
 8006292:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006296:	42ab      	cmp	r3, r5
 8006298:	d1f7      	bne.n	800628a <__strtok_r+0x32>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f3      	beq.n	8006286 <__strtok_r+0x2e>
 800629e:	2300      	movs	r3, #0
 80062a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80062a4:	6014      	str	r4, [r2, #0]
 80062a6:	e7ed      	b.n	8006284 <__strtok_r+0x2c>

080062a8 <_localeconv_r>:
 80062a8:	4800      	ldr	r0, [pc, #0]	@ (80062ac <_localeconv_r+0x4>)
 80062aa:	4770      	bx	lr
 80062ac:	2000010c 	.word	0x2000010c

080062b0 <_close_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4d06      	ldr	r5, [pc, #24]	@ (80062cc <_close_r+0x1c>)
 80062b4:	2300      	movs	r3, #0
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	f7fb fc92 	bl	8001be4 <_close>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d102      	bne.n	80062ca <_close_r+0x1a>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	b103      	cbz	r3, 80062ca <_close_r+0x1a>
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	200003e8 	.word	0x200003e8

080062d0 <_lseek_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4d07      	ldr	r5, [pc, #28]	@ (80062f0 <_lseek_r+0x20>)
 80062d4:	4604      	mov	r4, r0
 80062d6:	4608      	mov	r0, r1
 80062d8:	4611      	mov	r1, r2
 80062da:	2200      	movs	r2, #0
 80062dc:	602a      	str	r2, [r5, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	f7fb fca7 	bl	8001c32 <_lseek>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_lseek_r+0x1e>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_lseek_r+0x1e>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	200003e8 	.word	0x200003e8

080062f4 <_read_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4d07      	ldr	r5, [pc, #28]	@ (8006314 <_read_r+0x20>)
 80062f8:	4604      	mov	r4, r0
 80062fa:	4608      	mov	r0, r1
 80062fc:	4611      	mov	r1, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f7fb fc51 	bl	8001baa <_read>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_read_r+0x1e>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_read_r+0x1e>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	200003e8 	.word	0x200003e8

08006318 <_write_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d07      	ldr	r5, [pc, #28]	@ (8006338 <_write_r+0x20>)
 800631c:	4604      	mov	r4, r0
 800631e:	4608      	mov	r0, r1
 8006320:	4611      	mov	r1, r2
 8006322:	2200      	movs	r2, #0
 8006324:	602a      	str	r2, [r5, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f7fb f82c 	bl	8001384 <_write>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_write_r+0x1e>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_write_r+0x1e>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	200003e8 	.word	0x200003e8

0800633c <__errno>:
 800633c:	4b01      	ldr	r3, [pc, #4]	@ (8006344 <__errno+0x8>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000188 	.word	0x20000188

08006348 <__libc_init_array>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	4d0d      	ldr	r5, [pc, #52]	@ (8006380 <__libc_init_array+0x38>)
 800634c:	4c0d      	ldr	r4, [pc, #52]	@ (8006384 <__libc_init_array+0x3c>)
 800634e:	1b64      	subs	r4, r4, r5
 8006350:	10a4      	asrs	r4, r4, #2
 8006352:	2600      	movs	r6, #0
 8006354:	42a6      	cmp	r6, r4
 8006356:	d109      	bne.n	800636c <__libc_init_array+0x24>
 8006358:	4d0b      	ldr	r5, [pc, #44]	@ (8006388 <__libc_init_array+0x40>)
 800635a:	4c0c      	ldr	r4, [pc, #48]	@ (800638c <__libc_init_array+0x44>)
 800635c:	f002 fa9e 	bl	800889c <_init>
 8006360:	1b64      	subs	r4, r4, r5
 8006362:	10a4      	asrs	r4, r4, #2
 8006364:	2600      	movs	r6, #0
 8006366:	42a6      	cmp	r6, r4
 8006368:	d105      	bne.n	8006376 <__libc_init_array+0x2e>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006370:	4798      	blx	r3
 8006372:	3601      	adds	r6, #1
 8006374:	e7ee      	b.n	8006354 <__libc_init_array+0xc>
 8006376:	f855 3b04 	ldr.w	r3, [r5], #4
 800637a:	4798      	blx	r3
 800637c:	3601      	adds	r6, #1
 800637e:	e7f2      	b.n	8006366 <__libc_init_array+0x1e>
 8006380:	08008f7c 	.word	0x08008f7c
 8006384:	08008f7c 	.word	0x08008f7c
 8006388:	08008f7c 	.word	0x08008f7c
 800638c:	08008f80 	.word	0x08008f80

08006390 <__retarget_lock_init_recursive>:
 8006390:	4770      	bx	lr

08006392 <__retarget_lock_acquire_recursive>:
 8006392:	4770      	bx	lr

08006394 <__retarget_lock_release_recursive>:
 8006394:	4770      	bx	lr

08006396 <memcpy>:
 8006396:	440a      	add	r2, r1
 8006398:	4291      	cmp	r1, r2
 800639a:	f100 33ff 	add.w	r3, r0, #4294967295
 800639e:	d100      	bne.n	80063a2 <memcpy+0xc>
 80063a0:	4770      	bx	lr
 80063a2:	b510      	push	{r4, lr}
 80063a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ac:	4291      	cmp	r1, r2
 80063ae:	d1f9      	bne.n	80063a4 <memcpy+0xe>
 80063b0:	bd10      	pop	{r4, pc}
 80063b2:	0000      	movs	r0, r0
 80063b4:	0000      	movs	r0, r0
	...

080063b8 <nan>:
 80063b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80063c0 <nan+0x8>
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	00000000 	.word	0x00000000
 80063c4:	7ff80000 	.word	0x7ff80000

080063c8 <__assert_func>:
 80063c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063ca:	4614      	mov	r4, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b09      	ldr	r3, [pc, #36]	@ (80063f4 <__assert_func+0x2c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4605      	mov	r5, r0
 80063d4:	68d8      	ldr	r0, [r3, #12]
 80063d6:	b954      	cbnz	r4, 80063ee <__assert_func+0x26>
 80063d8:	4b07      	ldr	r3, [pc, #28]	@ (80063f8 <__assert_func+0x30>)
 80063da:	461c      	mov	r4, r3
 80063dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063e0:	9100      	str	r1, [sp, #0]
 80063e2:	462b      	mov	r3, r5
 80063e4:	4905      	ldr	r1, [pc, #20]	@ (80063fc <__assert_func+0x34>)
 80063e6:	f002 f953 	bl	8008690 <fiprintf>
 80063ea:	f002 f9f7 	bl	80087dc <abort>
 80063ee:	4b04      	ldr	r3, [pc, #16]	@ (8006400 <__assert_func+0x38>)
 80063f0:	e7f4      	b.n	80063dc <__assert_func+0x14>
 80063f2:	bf00      	nop
 80063f4:	20000188 	.word	0x20000188
 80063f8:	08008c30 	.word	0x08008c30
 80063fc:	08008c02 	.word	0x08008c02
 8006400:	08008bf5 	.word	0x08008bf5

08006404 <quorem>:
 8006404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	6903      	ldr	r3, [r0, #16]
 800640a:	690c      	ldr	r4, [r1, #16]
 800640c:	42a3      	cmp	r3, r4
 800640e:	4607      	mov	r7, r0
 8006410:	db7e      	blt.n	8006510 <quorem+0x10c>
 8006412:	3c01      	subs	r4, #1
 8006414:	f101 0814 	add.w	r8, r1, #20
 8006418:	00a3      	lsls	r3, r4, #2
 800641a:	f100 0514 	add.w	r5, r0, #20
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800642a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800642e:	3301      	adds	r3, #1
 8006430:	429a      	cmp	r2, r3
 8006432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006436:	fbb2 f6f3 	udiv	r6, r2, r3
 800643a:	d32e      	bcc.n	800649a <quorem+0x96>
 800643c:	f04f 0a00 	mov.w	sl, #0
 8006440:	46c4      	mov	ip, r8
 8006442:	46ae      	mov	lr, r5
 8006444:	46d3      	mov	fp, sl
 8006446:	f85c 3b04 	ldr.w	r3, [ip], #4
 800644a:	b298      	uxth	r0, r3
 800644c:	fb06 a000 	mla	r0, r6, r0, sl
 8006450:	0c02      	lsrs	r2, r0, #16
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	fb06 2303 	mla	r3, r6, r3, r2
 8006458:	f8de 2000 	ldr.w	r2, [lr]
 800645c:	b280      	uxth	r0, r0
 800645e:	b292      	uxth	r2, r2
 8006460:	1a12      	subs	r2, r2, r0
 8006462:	445a      	add	r2, fp
 8006464:	f8de 0000 	ldr.w	r0, [lr]
 8006468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800646c:	b29b      	uxth	r3, r3
 800646e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006472:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006476:	b292      	uxth	r2, r2
 8006478:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800647c:	45e1      	cmp	r9, ip
 800647e:	f84e 2b04 	str.w	r2, [lr], #4
 8006482:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006486:	d2de      	bcs.n	8006446 <quorem+0x42>
 8006488:	9b00      	ldr	r3, [sp, #0]
 800648a:	58eb      	ldr	r3, [r5, r3]
 800648c:	b92b      	cbnz	r3, 800649a <quorem+0x96>
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	3b04      	subs	r3, #4
 8006492:	429d      	cmp	r5, r3
 8006494:	461a      	mov	r2, r3
 8006496:	d32f      	bcc.n	80064f8 <quorem+0xf4>
 8006498:	613c      	str	r4, [r7, #16]
 800649a:	4638      	mov	r0, r7
 800649c:	f001 fd10 	bl	8007ec0 <__mcmp>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	db25      	blt.n	80064f0 <quorem+0xec>
 80064a4:	4629      	mov	r1, r5
 80064a6:	2000      	movs	r0, #0
 80064a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ac:	f8d1 c000 	ldr.w	ip, [r1]
 80064b0:	fa1f fe82 	uxth.w	lr, r2
 80064b4:	fa1f f38c 	uxth.w	r3, ip
 80064b8:	eba3 030e 	sub.w	r3, r3, lr
 80064bc:	4403      	add	r3, r0
 80064be:	0c12      	lsrs	r2, r2, #16
 80064c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064ce:	45c1      	cmp	r9, r8
 80064d0:	f841 3b04 	str.w	r3, [r1], #4
 80064d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064d8:	d2e6      	bcs.n	80064a8 <quorem+0xa4>
 80064da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e2:	b922      	cbnz	r2, 80064ee <quorem+0xea>
 80064e4:	3b04      	subs	r3, #4
 80064e6:	429d      	cmp	r5, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	d30b      	bcc.n	8006504 <quorem+0x100>
 80064ec:	613c      	str	r4, [r7, #16]
 80064ee:	3601      	adds	r6, #1
 80064f0:	4630      	mov	r0, r6
 80064f2:	b003      	add	sp, #12
 80064f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	3b04      	subs	r3, #4
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	d1cb      	bne.n	8006498 <quorem+0x94>
 8006500:	3c01      	subs	r4, #1
 8006502:	e7c6      	b.n	8006492 <quorem+0x8e>
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	3b04      	subs	r3, #4
 8006508:	2a00      	cmp	r2, #0
 800650a:	d1ef      	bne.n	80064ec <quorem+0xe8>
 800650c:	3c01      	subs	r4, #1
 800650e:	e7ea      	b.n	80064e6 <quorem+0xe2>
 8006510:	2000      	movs	r0, #0
 8006512:	e7ee      	b.n	80064f2 <quorem+0xee>
 8006514:	0000      	movs	r0, r0
	...

08006518 <_dtoa_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	69c7      	ldr	r7, [r0, #28]
 800651e:	b099      	sub	sp, #100	@ 0x64
 8006520:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006524:	ec55 4b10 	vmov	r4, r5, d0
 8006528:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800652a:	9109      	str	r1, [sp, #36]	@ 0x24
 800652c:	4683      	mov	fp, r0
 800652e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006532:	b97f      	cbnz	r7, 8006554 <_dtoa_r+0x3c>
 8006534:	2010      	movs	r0, #16
 8006536:	f001 f937 	bl	80077a8 <malloc>
 800653a:	4602      	mov	r2, r0
 800653c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006540:	b920      	cbnz	r0, 800654c <_dtoa_r+0x34>
 8006542:	4ba7      	ldr	r3, [pc, #668]	@ (80067e0 <_dtoa_r+0x2c8>)
 8006544:	21ef      	movs	r1, #239	@ 0xef
 8006546:	48a7      	ldr	r0, [pc, #668]	@ (80067e4 <_dtoa_r+0x2cc>)
 8006548:	f7ff ff3e 	bl	80063c8 <__assert_func>
 800654c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006550:	6007      	str	r7, [r0, #0]
 8006552:	60c7      	str	r7, [r0, #12]
 8006554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	b159      	cbz	r1, 8006574 <_dtoa_r+0x5c>
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	604a      	str	r2, [r1, #4]
 8006560:	2301      	movs	r3, #1
 8006562:	4093      	lsls	r3, r2
 8006564:	608b      	str	r3, [r1, #8]
 8006566:	4658      	mov	r0, fp
 8006568:	f001 fa26 	bl	80079b8 <_Bfree>
 800656c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	1e2b      	subs	r3, r5, #0
 8006576:	bfb9      	ittee	lt
 8006578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800657c:	9303      	strlt	r3, [sp, #12]
 800657e:	2300      	movge	r3, #0
 8006580:	6033      	strge	r3, [r6, #0]
 8006582:	9f03      	ldr	r7, [sp, #12]
 8006584:	4b98      	ldr	r3, [pc, #608]	@ (80067e8 <_dtoa_r+0x2d0>)
 8006586:	bfbc      	itt	lt
 8006588:	2201      	movlt	r2, #1
 800658a:	6032      	strlt	r2, [r6, #0]
 800658c:	43bb      	bics	r3, r7
 800658e:	d112      	bne.n	80065b6 <_dtoa_r+0x9e>
 8006590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800659c:	4323      	orrs	r3, r4
 800659e:	f000 854d 	beq.w	800703c <_dtoa_r+0xb24>
 80065a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067fc <_dtoa_r+0x2e4>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 854f 	beq.w	800704c <_dtoa_r+0xb34>
 80065ae:	f10a 0303 	add.w	r3, sl, #3
 80065b2:	f000 bd49 	b.w	8007048 <_dtoa_r+0xb30>
 80065b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	ec51 0b17 	vmov	r0, r1, d7
 80065c0:	2300      	movs	r3, #0
 80065c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065c6:	f7fa fa97 	bl	8000af8 <__aeabi_dcmpeq>
 80065ca:	4680      	mov	r8, r0
 80065cc:	b158      	cbz	r0, 80065e6 <_dtoa_r+0xce>
 80065ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065d0:	2301      	movs	r3, #1
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065d6:	b113      	cbz	r3, 80065de <_dtoa_r+0xc6>
 80065d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065da:	4b84      	ldr	r3, [pc, #528]	@ (80067ec <_dtoa_r+0x2d4>)
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006800 <_dtoa_r+0x2e8>
 80065e2:	f000 bd33 	b.w	800704c <_dtoa_r+0xb34>
 80065e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065ea:	aa16      	add	r2, sp, #88	@ 0x58
 80065ec:	a917      	add	r1, sp, #92	@ 0x5c
 80065ee:	4658      	mov	r0, fp
 80065f0:	f001 fd86 	bl	8008100 <__d2b>
 80065f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065f8:	4681      	mov	r9, r0
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	d077      	beq.n	80066ee <_dtoa_r+0x1d6>
 80065fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006600:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800660c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006618:	4619      	mov	r1, r3
 800661a:	2200      	movs	r2, #0
 800661c:	4b74      	ldr	r3, [pc, #464]	@ (80067f0 <_dtoa_r+0x2d8>)
 800661e:	f7f9 fe4b 	bl	80002b8 <__aeabi_dsub>
 8006622:	a369      	add	r3, pc, #420	@ (adr r3, 80067c8 <_dtoa_r+0x2b0>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7f9 fffe 	bl	8000628 <__aeabi_dmul>
 800662c:	a368      	add	r3, pc, #416	@ (adr r3, 80067d0 <_dtoa_r+0x2b8>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fe43 	bl	80002bc <__adddf3>
 8006636:	4604      	mov	r4, r0
 8006638:	4630      	mov	r0, r6
 800663a:	460d      	mov	r5, r1
 800663c:	f7f9 ff8a 	bl	8000554 <__aeabi_i2d>
 8006640:	a365      	add	r3, pc, #404	@ (adr r3, 80067d8 <_dtoa_r+0x2c0>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 ffef 	bl	8000628 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7f9 fe33 	bl	80002bc <__adddf3>
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	f7fa fa95 	bl	8000b88 <__aeabi_d2iz>
 800665e:	2200      	movs	r2, #0
 8006660:	4607      	mov	r7, r0
 8006662:	2300      	movs	r3, #0
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	f7fa fa50 	bl	8000b0c <__aeabi_dcmplt>
 800666c:	b140      	cbz	r0, 8006680 <_dtoa_r+0x168>
 800666e:	4638      	mov	r0, r7
 8006670:	f7f9 ff70 	bl	8000554 <__aeabi_i2d>
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7fa fa3e 	bl	8000af8 <__aeabi_dcmpeq>
 800667c:	b900      	cbnz	r0, 8006680 <_dtoa_r+0x168>
 800667e:	3f01      	subs	r7, #1
 8006680:	2f16      	cmp	r7, #22
 8006682:	d851      	bhi.n	8006728 <_dtoa_r+0x210>
 8006684:	4b5b      	ldr	r3, [pc, #364]	@ (80067f4 <_dtoa_r+0x2dc>)
 8006686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006692:	f7fa fa3b 	bl	8000b0c <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	d048      	beq.n	800672c <_dtoa_r+0x214>
 800669a:	3f01      	subs	r7, #1
 800669c:	2300      	movs	r3, #0
 800669e:	9312      	str	r3, [sp, #72]	@ 0x48
 80066a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066a2:	1b9b      	subs	r3, r3, r6
 80066a4:	1e5a      	subs	r2, r3, #1
 80066a6:	bf44      	itt	mi
 80066a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80066ac:	2300      	movmi	r3, #0
 80066ae:	9208      	str	r2, [sp, #32]
 80066b0:	bf54      	ite	pl
 80066b2:	f04f 0800 	movpl.w	r8, #0
 80066b6:	9308      	strmi	r3, [sp, #32]
 80066b8:	2f00      	cmp	r7, #0
 80066ba:	db39      	blt.n	8006730 <_dtoa_r+0x218>
 80066bc:	9b08      	ldr	r3, [sp, #32]
 80066be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066c0:	443b      	add	r3, r7
 80066c2:	9308      	str	r3, [sp, #32]
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d864      	bhi.n	8006798 <_dtoa_r+0x280>
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	bfc4      	itt	gt
 80066d2:	3b04      	subgt	r3, #4
 80066d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d8:	f1a3 0302 	sub.w	r3, r3, #2
 80066dc:	bfcc      	ite	gt
 80066de:	2400      	movgt	r4, #0
 80066e0:	2401      	movle	r4, #1
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d863      	bhi.n	80067ae <_dtoa_r+0x296>
 80066e6:	e8df f003 	tbb	[pc, r3]
 80066ea:	372a      	.short	0x372a
 80066ec:	5535      	.short	0x5535
 80066ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066f2:	441e      	add	r6, r3
 80066f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	bfc1      	itttt	gt
 80066fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006700:	409f      	lslgt	r7, r3
 8006702:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006706:	fa24 f303 	lsrgt.w	r3, r4, r3
 800670a:	bfd6      	itet	le
 800670c:	f1c3 0320 	rsble	r3, r3, #32
 8006710:	ea47 0003 	orrgt.w	r0, r7, r3
 8006714:	fa04 f003 	lslle.w	r0, r4, r3
 8006718:	f7f9 ff0c 	bl	8000534 <__aeabi_ui2d>
 800671c:	2201      	movs	r2, #1
 800671e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006722:	3e01      	subs	r6, #1
 8006724:	9214      	str	r2, [sp, #80]	@ 0x50
 8006726:	e777      	b.n	8006618 <_dtoa_r+0x100>
 8006728:	2301      	movs	r3, #1
 800672a:	e7b8      	b.n	800669e <_dtoa_r+0x186>
 800672c:	9012      	str	r0, [sp, #72]	@ 0x48
 800672e:	e7b7      	b.n	80066a0 <_dtoa_r+0x188>
 8006730:	427b      	negs	r3, r7
 8006732:	930a      	str	r3, [sp, #40]	@ 0x28
 8006734:	2300      	movs	r3, #0
 8006736:	eba8 0807 	sub.w	r8, r8, r7
 800673a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800673c:	e7c4      	b.n	80066c8 <_dtoa_r+0x1b0>
 800673e:	2300      	movs	r3, #0
 8006740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc35      	bgt.n	80067b4 <_dtoa_r+0x29c>
 8006748:	2301      	movs	r3, #1
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	9307      	str	r3, [sp, #28]
 800674e:	461a      	mov	r2, r3
 8006750:	920e      	str	r2, [sp, #56]	@ 0x38
 8006752:	e00b      	b.n	800676c <_dtoa_r+0x254>
 8006754:	2301      	movs	r3, #1
 8006756:	e7f3      	b.n	8006740 <_dtoa_r+0x228>
 8006758:	2300      	movs	r3, #0
 800675a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	9307      	str	r3, [sp, #28]
 8006768:	bfb8      	it	lt
 800676a:	2301      	movlt	r3, #1
 800676c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006770:	2100      	movs	r1, #0
 8006772:	2204      	movs	r2, #4
 8006774:	f102 0514 	add.w	r5, r2, #20
 8006778:	429d      	cmp	r5, r3
 800677a:	d91f      	bls.n	80067bc <_dtoa_r+0x2a4>
 800677c:	6041      	str	r1, [r0, #4]
 800677e:	4658      	mov	r0, fp
 8006780:	f001 f8da 	bl	8007938 <_Balloc>
 8006784:	4682      	mov	sl, r0
 8006786:	2800      	cmp	r0, #0
 8006788:	d13c      	bne.n	8006804 <_dtoa_r+0x2ec>
 800678a:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <_dtoa_r+0x2e0>)
 800678c:	4602      	mov	r2, r0
 800678e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006792:	e6d8      	b.n	8006546 <_dtoa_r+0x2e>
 8006794:	2301      	movs	r3, #1
 8006796:	e7e0      	b.n	800675a <_dtoa_r+0x242>
 8006798:	2401      	movs	r4, #1
 800679a:	2300      	movs	r3, #0
 800679c:	9309      	str	r3, [sp, #36]	@ 0x24
 800679e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067a0:	f04f 33ff 	mov.w	r3, #4294967295
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	9307      	str	r3, [sp, #28]
 80067a8:	2200      	movs	r2, #0
 80067aa:	2312      	movs	r3, #18
 80067ac:	e7d0      	b.n	8006750 <_dtoa_r+0x238>
 80067ae:	2301      	movs	r3, #1
 80067b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067b2:	e7f5      	b.n	80067a0 <_dtoa_r+0x288>
 80067b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	e7d7      	b.n	800676c <_dtoa_r+0x254>
 80067bc:	3101      	adds	r1, #1
 80067be:	0052      	lsls	r2, r2, #1
 80067c0:	e7d8      	b.n	8006774 <_dtoa_r+0x25c>
 80067c2:	bf00      	nop
 80067c4:	f3af 8000 	nop.w
 80067c8:	636f4361 	.word	0x636f4361
 80067cc:	3fd287a7 	.word	0x3fd287a7
 80067d0:	8b60c8b3 	.word	0x8b60c8b3
 80067d4:	3fc68a28 	.word	0x3fc68a28
 80067d8:	509f79fb 	.word	0x509f79fb
 80067dc:	3fd34413 	.word	0x3fd34413
 80067e0:	08008b7c 	.word	0x08008b7c
 80067e4:	08008c3e 	.word	0x08008c3e
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	08008b59 	.word	0x08008b59
 80067f0:	3ff80000 	.word	0x3ff80000
 80067f4:	08008d98 	.word	0x08008d98
 80067f8:	08008c96 	.word	0x08008c96
 80067fc:	08008c3a 	.word	0x08008c3a
 8006800:	08008b58 	.word	0x08008b58
 8006804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006808:	6018      	str	r0, [r3, #0]
 800680a:	9b07      	ldr	r3, [sp, #28]
 800680c:	2b0e      	cmp	r3, #14
 800680e:	f200 80a4 	bhi.w	800695a <_dtoa_r+0x442>
 8006812:	2c00      	cmp	r4, #0
 8006814:	f000 80a1 	beq.w	800695a <_dtoa_r+0x442>
 8006818:	2f00      	cmp	r7, #0
 800681a:	dd33      	ble.n	8006884 <_dtoa_r+0x36c>
 800681c:	4bad      	ldr	r3, [pc, #692]	@ (8006ad4 <_dtoa_r+0x5bc>)
 800681e:	f007 020f 	and.w	r2, r7, #15
 8006822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006826:	ed93 7b00 	vldr	d7, [r3]
 800682a:	05f8      	lsls	r0, r7, #23
 800682c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006830:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006834:	d516      	bpl.n	8006864 <_dtoa_r+0x34c>
 8006836:	4ba8      	ldr	r3, [pc, #672]	@ (8006ad8 <_dtoa_r+0x5c0>)
 8006838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800683c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006840:	f7fa f81c 	bl	800087c <__aeabi_ddiv>
 8006844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006848:	f004 040f 	and.w	r4, r4, #15
 800684c:	2603      	movs	r6, #3
 800684e:	4da2      	ldr	r5, [pc, #648]	@ (8006ad8 <_dtoa_r+0x5c0>)
 8006850:	b954      	cbnz	r4, 8006868 <_dtoa_r+0x350>
 8006852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800685a:	f7fa f80f 	bl	800087c <__aeabi_ddiv>
 800685e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006862:	e028      	b.n	80068b6 <_dtoa_r+0x39e>
 8006864:	2602      	movs	r6, #2
 8006866:	e7f2      	b.n	800684e <_dtoa_r+0x336>
 8006868:	07e1      	lsls	r1, r4, #31
 800686a:	d508      	bpl.n	800687e <_dtoa_r+0x366>
 800686c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006870:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006874:	f7f9 fed8 	bl	8000628 <__aeabi_dmul>
 8006878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800687c:	3601      	adds	r6, #1
 800687e:	1064      	asrs	r4, r4, #1
 8006880:	3508      	adds	r5, #8
 8006882:	e7e5      	b.n	8006850 <_dtoa_r+0x338>
 8006884:	f000 80d2 	beq.w	8006a2c <_dtoa_r+0x514>
 8006888:	427c      	negs	r4, r7
 800688a:	4b92      	ldr	r3, [pc, #584]	@ (8006ad4 <_dtoa_r+0x5bc>)
 800688c:	4d92      	ldr	r5, [pc, #584]	@ (8006ad8 <_dtoa_r+0x5c0>)
 800688e:	f004 020f 	and.w	r2, r4, #15
 8006892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800689e:	f7f9 fec3 	bl	8000628 <__aeabi_dmul>
 80068a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a6:	1124      	asrs	r4, r4, #4
 80068a8:	2300      	movs	r3, #0
 80068aa:	2602      	movs	r6, #2
 80068ac:	2c00      	cmp	r4, #0
 80068ae:	f040 80b2 	bne.w	8006a16 <_dtoa_r+0x4fe>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1d3      	bne.n	800685e <_dtoa_r+0x346>
 80068b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80b7 	beq.w	8006a30 <_dtoa_r+0x518>
 80068c2:	4b86      	ldr	r3, [pc, #536]	@ (8006adc <_dtoa_r+0x5c4>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	4620      	mov	r0, r4
 80068c8:	4629      	mov	r1, r5
 80068ca:	f7fa f91f 	bl	8000b0c <__aeabi_dcmplt>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f000 80ae 	beq.w	8006a30 <_dtoa_r+0x518>
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80aa 	beq.w	8006a30 <_dtoa_r+0x518>
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dd37      	ble.n	8006952 <_dtoa_r+0x43a>
 80068e2:	1e7b      	subs	r3, r7, #1
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	4620      	mov	r0, r4
 80068e8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae0 <_dtoa_r+0x5c8>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7f9 fe9b 	bl	8000628 <__aeabi_dmul>
 80068f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f6:	9c00      	ldr	r4, [sp, #0]
 80068f8:	3601      	adds	r6, #1
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7f9 fe2a 	bl	8000554 <__aeabi_i2d>
 8006900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006904:	f7f9 fe90 	bl	8000628 <__aeabi_dmul>
 8006908:	4b76      	ldr	r3, [pc, #472]	@ (8006ae4 <_dtoa_r+0x5cc>)
 800690a:	2200      	movs	r2, #0
 800690c:	f7f9 fcd6 	bl	80002bc <__adddf3>
 8006910:	4605      	mov	r5, r0
 8006912:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006916:	2c00      	cmp	r4, #0
 8006918:	f040 808d 	bne.w	8006a36 <_dtoa_r+0x51e>
 800691c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006920:	4b71      	ldr	r3, [pc, #452]	@ (8006ae8 <_dtoa_r+0x5d0>)
 8006922:	2200      	movs	r2, #0
 8006924:	f7f9 fcc8 	bl	80002b8 <__aeabi_dsub>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006930:	462a      	mov	r2, r5
 8006932:	4633      	mov	r3, r6
 8006934:	f7fa f908 	bl	8000b48 <__aeabi_dcmpgt>
 8006938:	2800      	cmp	r0, #0
 800693a:	f040 828b 	bne.w	8006e54 <_dtoa_r+0x93c>
 800693e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006942:	462a      	mov	r2, r5
 8006944:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006948:	f7fa f8e0 	bl	8000b0c <__aeabi_dcmplt>
 800694c:	2800      	cmp	r0, #0
 800694e:	f040 8128 	bne.w	8006ba2 <_dtoa_r+0x68a>
 8006952:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006956:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800695a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800695c:	2b00      	cmp	r3, #0
 800695e:	f2c0 815a 	blt.w	8006c16 <_dtoa_r+0x6fe>
 8006962:	2f0e      	cmp	r7, #14
 8006964:	f300 8157 	bgt.w	8006c16 <_dtoa_r+0x6fe>
 8006968:	4b5a      	ldr	r3, [pc, #360]	@ (8006ad4 <_dtoa_r+0x5bc>)
 800696a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800696e:	ed93 7b00 	vldr	d7, [r3]
 8006972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	ed8d 7b00 	vstr	d7, [sp]
 800697a:	da03      	bge.n	8006984 <_dtoa_r+0x46c>
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f340 8101 	ble.w	8006b86 <_dtoa_r+0x66e>
 8006984:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006988:	4656      	mov	r6, sl
 800698a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	f7f9 ff73 	bl	800087c <__aeabi_ddiv>
 8006996:	f7fa f8f7 	bl	8000b88 <__aeabi_d2iz>
 800699a:	4680      	mov	r8, r0
 800699c:	f7f9 fdda 	bl	8000554 <__aeabi_i2d>
 80069a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a4:	f7f9 fe40 	bl	8000628 <__aeabi_dmul>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4620      	mov	r0, r4
 80069ae:	4629      	mov	r1, r5
 80069b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069b4:	f7f9 fc80 	bl	80002b8 <__aeabi_dsub>
 80069b8:	f806 4b01 	strb.w	r4, [r6], #1
 80069bc:	9d07      	ldr	r5, [sp, #28]
 80069be:	eba6 040a 	sub.w	r4, r6, sl
 80069c2:	42a5      	cmp	r5, r4
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	f040 8117 	bne.w	8006bfa <_dtoa_r+0x6e2>
 80069cc:	f7f9 fc76 	bl	80002bc <__adddf3>
 80069d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069d4:	4604      	mov	r4, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	f7fa f8b6 	bl	8000b48 <__aeabi_dcmpgt>
 80069dc:	2800      	cmp	r0, #0
 80069de:	f040 80f9 	bne.w	8006bd4 <_dtoa_r+0x6bc>
 80069e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f885 	bl	8000af8 <__aeabi_dcmpeq>
 80069ee:	b118      	cbz	r0, 80069f8 <_dtoa_r+0x4e0>
 80069f0:	f018 0f01 	tst.w	r8, #1
 80069f4:	f040 80ee 	bne.w	8006bd4 <_dtoa_r+0x6bc>
 80069f8:	4649      	mov	r1, r9
 80069fa:	4658      	mov	r0, fp
 80069fc:	f000 ffdc 	bl	80079b8 <_Bfree>
 8006a00:	2300      	movs	r3, #0
 8006a02:	7033      	strb	r3, [r6, #0]
 8006a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a06:	3701      	adds	r7, #1
 8006a08:	601f      	str	r7, [r3, #0]
 8006a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 831d 	beq.w	800704c <_dtoa_r+0xb34>
 8006a12:	601e      	str	r6, [r3, #0]
 8006a14:	e31a      	b.n	800704c <_dtoa_r+0xb34>
 8006a16:	07e2      	lsls	r2, r4, #31
 8006a18:	d505      	bpl.n	8006a26 <_dtoa_r+0x50e>
 8006a1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a1e:	f7f9 fe03 	bl	8000628 <__aeabi_dmul>
 8006a22:	3601      	adds	r6, #1
 8006a24:	2301      	movs	r3, #1
 8006a26:	1064      	asrs	r4, r4, #1
 8006a28:	3508      	adds	r5, #8
 8006a2a:	e73f      	b.n	80068ac <_dtoa_r+0x394>
 8006a2c:	2602      	movs	r6, #2
 8006a2e:	e742      	b.n	80068b6 <_dtoa_r+0x39e>
 8006a30:	9c07      	ldr	r4, [sp, #28]
 8006a32:	9704      	str	r7, [sp, #16]
 8006a34:	e761      	b.n	80068fa <_dtoa_r+0x3e2>
 8006a36:	4b27      	ldr	r3, [pc, #156]	@ (8006ad4 <_dtoa_r+0x5bc>)
 8006a38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a42:	4454      	add	r4, sl
 8006a44:	2900      	cmp	r1, #0
 8006a46:	d053      	beq.n	8006af0 <_dtoa_r+0x5d8>
 8006a48:	4928      	ldr	r1, [pc, #160]	@ (8006aec <_dtoa_r+0x5d4>)
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f7f9 ff16 	bl	800087c <__aeabi_ddiv>
 8006a50:	4633      	mov	r3, r6
 8006a52:	462a      	mov	r2, r5
 8006a54:	f7f9 fc30 	bl	80002b8 <__aeabi_dsub>
 8006a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a5c:	4656      	mov	r6, sl
 8006a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a62:	f7fa f891 	bl	8000b88 <__aeabi_d2iz>
 8006a66:	4605      	mov	r5, r0
 8006a68:	f7f9 fd74 	bl	8000554 <__aeabi_i2d>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a74:	f7f9 fc20 	bl	80002b8 <__aeabi_dsub>
 8006a78:	3530      	adds	r5, #48	@ 0x30
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a82:	f806 5b01 	strb.w	r5, [r6], #1
 8006a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a8a:	f7fa f83f 	bl	8000b0c <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d171      	bne.n	8006b76 <_dtoa_r+0x65e>
 8006a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a96:	4911      	ldr	r1, [pc, #68]	@ (8006adc <_dtoa_r+0x5c4>)
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f7f9 fc0d 	bl	80002b8 <__aeabi_dsub>
 8006a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aa2:	f7fa f833 	bl	8000b0c <__aeabi_dcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f040 8095 	bne.w	8006bd6 <_dtoa_r+0x6be>
 8006aac:	42a6      	cmp	r6, r4
 8006aae:	f43f af50 	beq.w	8006952 <_dtoa_r+0x43a>
 8006ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <_dtoa_r+0x5c8>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f7f9 fdb5 	bl	8000628 <__aeabi_dmul>
 8006abe:	4b08      	ldr	r3, [pc, #32]	@ (8006ae0 <_dtoa_r+0x5c8>)
 8006ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aca:	f7f9 fdad 	bl	8000628 <__aeabi_dmul>
 8006ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad2:	e7c4      	b.n	8006a5e <_dtoa_r+0x546>
 8006ad4:	08008d98 	.word	0x08008d98
 8006ad8:	08008d70 	.word	0x08008d70
 8006adc:	3ff00000 	.word	0x3ff00000
 8006ae0:	40240000 	.word	0x40240000
 8006ae4:	401c0000 	.word	0x401c0000
 8006ae8:	40140000 	.word	0x40140000
 8006aec:	3fe00000 	.word	0x3fe00000
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7f9 fd98 	bl	8000628 <__aeabi_dmul>
 8006af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006afc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006afe:	4656      	mov	r6, sl
 8006b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b04:	f7fa f840 	bl	8000b88 <__aeabi_d2iz>
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f7f9 fd23 	bl	8000554 <__aeabi_i2d>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b16:	f7f9 fbcf 	bl	80002b8 <__aeabi_dsub>
 8006b1a:	3530      	adds	r5, #48	@ 0x30
 8006b1c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	d124      	bne.n	8006b7a <_dtoa_r+0x662>
 8006b30:	4bac      	ldr	r3, [pc, #688]	@ (8006de4 <_dtoa_r+0x8cc>)
 8006b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b36:	f7f9 fbc1 	bl	80002bc <__adddf3>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b42:	f7fa f801 	bl	8000b48 <__aeabi_dcmpgt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d145      	bne.n	8006bd6 <_dtoa_r+0x6be>
 8006b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b4e:	49a5      	ldr	r1, [pc, #660]	@ (8006de4 <_dtoa_r+0x8cc>)
 8006b50:	2000      	movs	r0, #0
 8006b52:	f7f9 fbb1 	bl	80002b8 <__aeabi_dsub>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5e:	f7f9 ffd5 	bl	8000b0c <__aeabi_dcmplt>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f43f aef5 	beq.w	8006952 <_dtoa_r+0x43a>
 8006b68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b6a:	1e73      	subs	r3, r6, #1
 8006b6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b72:	2b30      	cmp	r3, #48	@ 0x30
 8006b74:	d0f8      	beq.n	8006b68 <_dtoa_r+0x650>
 8006b76:	9f04      	ldr	r7, [sp, #16]
 8006b78:	e73e      	b.n	80069f8 <_dtoa_r+0x4e0>
 8006b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8006de8 <_dtoa_r+0x8d0>)
 8006b7c:	f7f9 fd54 	bl	8000628 <__aeabi_dmul>
 8006b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b84:	e7bc      	b.n	8006b00 <_dtoa_r+0x5e8>
 8006b86:	d10c      	bne.n	8006ba2 <_dtoa_r+0x68a>
 8006b88:	4b98      	ldr	r3, [pc, #608]	@ (8006dec <_dtoa_r+0x8d4>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b90:	f7f9 fd4a 	bl	8000628 <__aeabi_dmul>
 8006b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b98:	f7f9 ffcc 	bl	8000b34 <__aeabi_dcmpge>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f000 8157 	beq.w	8006e50 <_dtoa_r+0x938>
 8006ba2:	2400      	movs	r4, #0
 8006ba4:	4625      	mov	r5, r4
 8006ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	4656      	mov	r6, sl
 8006bae:	2700      	movs	r7, #0
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 ff00 	bl	80079b8 <_Bfree>
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	d0dc      	beq.n	8006b76 <_dtoa_r+0x65e>
 8006bbc:	b12f      	cbz	r7, 8006bca <_dtoa_r+0x6b2>
 8006bbe:	42af      	cmp	r7, r5
 8006bc0:	d003      	beq.n	8006bca <_dtoa_r+0x6b2>
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	f000 fef7 	bl	80079b8 <_Bfree>
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4658      	mov	r0, fp
 8006bce:	f000 fef3 	bl	80079b8 <_Bfree>
 8006bd2:	e7d0      	b.n	8006b76 <_dtoa_r+0x65e>
 8006bd4:	9704      	str	r7, [sp, #16]
 8006bd6:	4633      	mov	r3, r6
 8006bd8:	461e      	mov	r6, r3
 8006bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bde:	2a39      	cmp	r2, #57	@ 0x39
 8006be0:	d107      	bne.n	8006bf2 <_dtoa_r+0x6da>
 8006be2:	459a      	cmp	sl, r3
 8006be4:	d1f8      	bne.n	8006bd8 <_dtoa_r+0x6c0>
 8006be6:	9a04      	ldr	r2, [sp, #16]
 8006be8:	3201      	adds	r2, #1
 8006bea:	9204      	str	r2, [sp, #16]
 8006bec:	2230      	movs	r2, #48	@ 0x30
 8006bee:	f88a 2000 	strb.w	r2, [sl]
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	e7bd      	b.n	8006b76 <_dtoa_r+0x65e>
 8006bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8006de8 <_dtoa_r+0x8d0>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f7f9 fd13 	bl	8000628 <__aeabi_dmul>
 8006c02:	2200      	movs	r2, #0
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	460d      	mov	r5, r1
 8006c0a:	f7f9 ff75 	bl	8000af8 <__aeabi_dcmpeq>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f43f aebb 	beq.w	800698a <_dtoa_r+0x472>
 8006c14:	e6f0      	b.n	80069f8 <_dtoa_r+0x4e0>
 8006c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	f000 80db 	beq.w	8006dd4 <_dtoa_r+0x8bc>
 8006c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c20:	2a01      	cmp	r2, #1
 8006c22:	f300 80bf 	bgt.w	8006da4 <_dtoa_r+0x88c>
 8006c26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	f000 80b7 	beq.w	8006d9c <_dtoa_r+0x884>
 8006c2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c34:	4646      	mov	r6, r8
 8006c36:	9a08      	ldr	r2, [sp, #32]
 8006c38:	2101      	movs	r1, #1
 8006c3a:	441a      	add	r2, r3
 8006c3c:	4658      	mov	r0, fp
 8006c3e:	4498      	add	r8, r3
 8006c40:	9208      	str	r2, [sp, #32]
 8006c42:	f000 ffb7 	bl	8007bb4 <__i2b>
 8006c46:	4605      	mov	r5, r0
 8006c48:	b15e      	cbz	r6, 8006c62 <_dtoa_r+0x74a>
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd08      	ble.n	8006c62 <_dtoa_r+0x74a>
 8006c50:	42b3      	cmp	r3, r6
 8006c52:	9a08      	ldr	r2, [sp, #32]
 8006c54:	bfa8      	it	ge
 8006c56:	4633      	movge	r3, r6
 8006c58:	eba8 0803 	sub.w	r8, r8, r3
 8006c5c:	1af6      	subs	r6, r6, r3
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	9308      	str	r3, [sp, #32]
 8006c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c64:	b1f3      	cbz	r3, 8006ca4 <_dtoa_r+0x78c>
 8006c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80b7 	beq.w	8006ddc <_dtoa_r+0x8c4>
 8006c6e:	b18c      	cbz	r4, 8006c94 <_dtoa_r+0x77c>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4622      	mov	r2, r4
 8006c74:	4658      	mov	r0, fp
 8006c76:	f001 f85d 	bl	8007d34 <__pow5mult>
 8006c7a:	464a      	mov	r2, r9
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	4605      	mov	r5, r0
 8006c80:	4658      	mov	r0, fp
 8006c82:	f000 ffad 	bl	8007be0 <__multiply>
 8006c86:	4649      	mov	r1, r9
 8006c88:	9004      	str	r0, [sp, #16]
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	f000 fe94 	bl	80079b8 <_Bfree>
 8006c90:	9b04      	ldr	r3, [sp, #16]
 8006c92:	4699      	mov	r9, r3
 8006c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c96:	1b1a      	subs	r2, r3, r4
 8006c98:	d004      	beq.n	8006ca4 <_dtoa_r+0x78c>
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4658      	mov	r0, fp
 8006c9e:	f001 f849 	bl	8007d34 <__pow5mult>
 8006ca2:	4681      	mov	r9, r0
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	4658      	mov	r0, fp
 8006ca8:	f000 ff84 	bl	8007bb4 <__i2b>
 8006cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cae:	4604      	mov	r4, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 81cf 	beq.w	8007054 <_dtoa_r+0xb3c>
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f001 f83a 	bl	8007d34 <__pow5mult>
 8006cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	f300 8095 	bgt.w	8006df4 <_dtoa_r+0x8dc>
 8006cca:	9b02      	ldr	r3, [sp, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 8087 	bne.w	8006de0 <_dtoa_r+0x8c8>
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 8089 	bne.w	8006df0 <_dtoa_r+0x8d8>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ce4:	0d1b      	lsrs	r3, r3, #20
 8006ce6:	051b      	lsls	r3, r3, #20
 8006ce8:	b12b      	cbz	r3, 8006cf6 <_dtoa_r+0x7de>
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	3301      	adds	r3, #1
 8006cee:	9308      	str	r3, [sp, #32]
 8006cf0:	f108 0801 	add.w	r8, r8, #1
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 81b0 	beq.w	8007060 <_dtoa_r+0xb48>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d06:	6918      	ldr	r0, [r3, #16]
 8006d08:	f000 ff08 	bl	8007b1c <__hi0bits>
 8006d0c:	f1c0 0020 	rsb	r0, r0, #32
 8006d10:	9b08      	ldr	r3, [sp, #32]
 8006d12:	4418      	add	r0, r3
 8006d14:	f010 001f 	ands.w	r0, r0, #31
 8006d18:	d077      	beq.n	8006e0a <_dtoa_r+0x8f2>
 8006d1a:	f1c0 0320 	rsb	r3, r0, #32
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	dd6b      	ble.n	8006dfa <_dtoa_r+0x8e2>
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	f1c0 001c 	rsb	r0, r0, #28
 8006d28:	4403      	add	r3, r0
 8006d2a:	4480      	add	r8, r0
 8006d2c:	4406      	add	r6, r0
 8006d2e:	9308      	str	r3, [sp, #32]
 8006d30:	f1b8 0f00 	cmp.w	r8, #0
 8006d34:	dd05      	ble.n	8006d42 <_dtoa_r+0x82a>
 8006d36:	4649      	mov	r1, r9
 8006d38:	4642      	mov	r2, r8
 8006d3a:	4658      	mov	r0, fp
 8006d3c:	f001 f854 	bl	8007de8 <__lshift>
 8006d40:	4681      	mov	r9, r0
 8006d42:	9b08      	ldr	r3, [sp, #32]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dd05      	ble.n	8006d54 <_dtoa_r+0x83c>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4658      	mov	r0, fp
 8006d4e:	f001 f84b 	bl	8007de8 <__lshift>
 8006d52:	4604      	mov	r4, r0
 8006d54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d059      	beq.n	8006e0e <_dtoa_r+0x8f6>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4648      	mov	r0, r9
 8006d5e:	f001 f8af 	bl	8007ec0 <__mcmp>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	da53      	bge.n	8006e0e <_dtoa_r+0x8f6>
 8006d66:	1e7b      	subs	r3, r7, #1
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	220a      	movs	r2, #10
 8006d70:	4658      	mov	r0, fp
 8006d72:	f000 fe43 	bl	80079fc <__multadd>
 8006d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d78:	4681      	mov	r9, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8172 	beq.w	8007064 <_dtoa_r+0xb4c>
 8006d80:	2300      	movs	r3, #0
 8006d82:	4629      	mov	r1, r5
 8006d84:	220a      	movs	r2, #10
 8006d86:	4658      	mov	r0, fp
 8006d88:	f000 fe38 	bl	80079fc <__multadd>
 8006d8c:	9b00      	ldr	r3, [sp, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	4605      	mov	r5, r0
 8006d92:	dc67      	bgt.n	8006e64 <_dtoa_r+0x94c>
 8006d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	dc41      	bgt.n	8006e1e <_dtoa_r+0x906>
 8006d9a:	e063      	b.n	8006e64 <_dtoa_r+0x94c>
 8006d9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006da2:	e746      	b.n	8006c32 <_dtoa_r+0x71a>
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	1e5c      	subs	r4, r3, #1
 8006da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	bfbf      	itttt	lt
 8006dae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006db0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006db2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006db4:	1ae3      	sublt	r3, r4, r3
 8006db6:	bfb4      	ite	lt
 8006db8:	18d2      	addlt	r2, r2, r3
 8006dba:	1b1c      	subge	r4, r3, r4
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	bfbc      	itt	lt
 8006dc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006dc2:	2400      	movlt	r4, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bfb5      	itete	lt
 8006dc8:	eba8 0603 	sublt.w	r6, r8, r3
 8006dcc:	9b07      	ldrge	r3, [sp, #28]
 8006dce:	2300      	movlt	r3, #0
 8006dd0:	4646      	movge	r6, r8
 8006dd2:	e730      	b.n	8006c36 <_dtoa_r+0x71e>
 8006dd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006dd8:	4646      	mov	r6, r8
 8006dda:	e735      	b.n	8006c48 <_dtoa_r+0x730>
 8006ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dde:	e75c      	b.n	8006c9a <_dtoa_r+0x782>
 8006de0:	2300      	movs	r3, #0
 8006de2:	e788      	b.n	8006cf6 <_dtoa_r+0x7de>
 8006de4:	3fe00000 	.word	0x3fe00000
 8006de8:	40240000 	.word	0x40240000
 8006dec:	40140000 	.word	0x40140000
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	e780      	b.n	8006cf6 <_dtoa_r+0x7de>
 8006df4:	2300      	movs	r3, #0
 8006df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006df8:	e782      	b.n	8006d00 <_dtoa_r+0x7e8>
 8006dfa:	d099      	beq.n	8006d30 <_dtoa_r+0x818>
 8006dfc:	9a08      	ldr	r2, [sp, #32]
 8006dfe:	331c      	adds	r3, #28
 8006e00:	441a      	add	r2, r3
 8006e02:	4498      	add	r8, r3
 8006e04:	441e      	add	r6, r3
 8006e06:	9208      	str	r2, [sp, #32]
 8006e08:	e792      	b.n	8006d30 <_dtoa_r+0x818>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	e7f6      	b.n	8006dfc <_dtoa_r+0x8e4>
 8006e0e:	9b07      	ldr	r3, [sp, #28]
 8006e10:	9704      	str	r7, [sp, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dc20      	bgt.n	8006e58 <_dtoa_r+0x940>
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	dd1e      	ble.n	8006e5c <_dtoa_r+0x944>
 8006e1e:	9b00      	ldr	r3, [sp, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f aec0 	bne.w	8006ba6 <_dtoa_r+0x68e>
 8006e26:	4621      	mov	r1, r4
 8006e28:	2205      	movs	r2, #5
 8006e2a:	4658      	mov	r0, fp
 8006e2c:	f000 fde6 	bl	80079fc <__multadd>
 8006e30:	4601      	mov	r1, r0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4648      	mov	r0, r9
 8006e36:	f001 f843 	bl	8007ec0 <__mcmp>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f77f aeb3 	ble.w	8006ba6 <_dtoa_r+0x68e>
 8006e40:	4656      	mov	r6, sl
 8006e42:	2331      	movs	r3, #49	@ 0x31
 8006e44:	f806 3b01 	strb.w	r3, [r6], #1
 8006e48:	9b04      	ldr	r3, [sp, #16]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	e6ae      	b.n	8006bae <_dtoa_r+0x696>
 8006e50:	9c07      	ldr	r4, [sp, #28]
 8006e52:	9704      	str	r7, [sp, #16]
 8006e54:	4625      	mov	r5, r4
 8006e56:	e7f3      	b.n	8006e40 <_dtoa_r+0x928>
 8006e58:	9b07      	ldr	r3, [sp, #28]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8104 	beq.w	800706c <_dtoa_r+0xb54>
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	dd05      	ble.n	8006e74 <_dtoa_r+0x95c>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	4658      	mov	r0, fp
 8006e6e:	f000 ffbb 	bl	8007de8 <__lshift>
 8006e72:	4605      	mov	r5, r0
 8006e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d05a      	beq.n	8006f30 <_dtoa_r+0xa18>
 8006e7a:	6869      	ldr	r1, [r5, #4]
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	f000 fd5b 	bl	8007938 <_Balloc>
 8006e82:	4606      	mov	r6, r0
 8006e84:	b928      	cbnz	r0, 8006e92 <_dtoa_r+0x97a>
 8006e86:	4b84      	ldr	r3, [pc, #528]	@ (8007098 <_dtoa_r+0xb80>)
 8006e88:	4602      	mov	r2, r0
 8006e8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e8e:	f7ff bb5a 	b.w	8006546 <_dtoa_r+0x2e>
 8006e92:	692a      	ldr	r2, [r5, #16]
 8006e94:	3202      	adds	r2, #2
 8006e96:	0092      	lsls	r2, r2, #2
 8006e98:	f105 010c 	add.w	r1, r5, #12
 8006e9c:	300c      	adds	r0, #12
 8006e9e:	f7ff fa7a 	bl	8006396 <memcpy>
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 ff9e 	bl	8007de8 <__lshift>
 8006eac:	f10a 0301 	add.w	r3, sl, #1
 8006eb0:	9307      	str	r3, [sp, #28]
 8006eb2:	9b00      	ldr	r3, [sp, #0]
 8006eb4:	4453      	add	r3, sl
 8006eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eb8:	9b02      	ldr	r3, [sp, #8]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	462f      	mov	r7, r5
 8006ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	4648      	mov	r0, r9
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f7ff fa99 	bl	8006404 <quorem>
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fff0 	bl	8007ec0 <__mcmp>
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	9008      	str	r0, [sp, #32]
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f001 f806 	bl	8007ef8 <__mdiff>
 8006eec:	68c2      	ldr	r2, [r0, #12]
 8006eee:	4606      	mov	r6, r0
 8006ef0:	bb02      	cbnz	r2, 8006f34 <_dtoa_r+0xa1c>
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	4648      	mov	r0, r9
 8006ef6:	f000 ffe3 	bl	8007ec0 <__mcmp>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4631      	mov	r1, r6
 8006efe:	4658      	mov	r0, fp
 8006f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f02:	f000 fd59 	bl	80079b8 <_Bfree>
 8006f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f0a:	9e07      	ldr	r6, [sp, #28]
 8006f0c:	ea43 0102 	orr.w	r1, r3, r2
 8006f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f12:	4319      	orrs	r1, r3
 8006f14:	d110      	bne.n	8006f38 <_dtoa_r+0xa20>
 8006f16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f1a:	d029      	beq.n	8006f70 <_dtoa_r+0xa58>
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dd02      	ble.n	8006f28 <_dtoa_r+0xa10>
 8006f22:	9b02      	ldr	r3, [sp, #8]
 8006f24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	f883 8000 	strb.w	r8, [r3]
 8006f2e:	e63f      	b.n	8006bb0 <_dtoa_r+0x698>
 8006f30:	4628      	mov	r0, r5
 8006f32:	e7bb      	b.n	8006eac <_dtoa_r+0x994>
 8006f34:	2201      	movs	r2, #1
 8006f36:	e7e1      	b.n	8006efc <_dtoa_r+0x9e4>
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db04      	blt.n	8006f48 <_dtoa_r+0xa30>
 8006f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f40:	430b      	orrs	r3, r1
 8006f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f44:	430b      	orrs	r3, r1
 8006f46:	d120      	bne.n	8006f8a <_dtoa_r+0xa72>
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	dded      	ble.n	8006f28 <_dtoa_r+0xa10>
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4658      	mov	r0, fp
 8006f52:	f000 ff49 	bl	8007de8 <__lshift>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4681      	mov	r9, r0
 8006f5a:	f000 ffb1 	bl	8007ec0 <__mcmp>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	dc03      	bgt.n	8006f6a <_dtoa_r+0xa52>
 8006f62:	d1e1      	bne.n	8006f28 <_dtoa_r+0xa10>
 8006f64:	f018 0f01 	tst.w	r8, #1
 8006f68:	d0de      	beq.n	8006f28 <_dtoa_r+0xa10>
 8006f6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f6e:	d1d8      	bne.n	8006f22 <_dtoa_r+0xa0a>
 8006f70:	9a00      	ldr	r2, [sp, #0]
 8006f72:	2339      	movs	r3, #57	@ 0x39
 8006f74:	7013      	strb	r3, [r2, #0]
 8006f76:	4633      	mov	r3, r6
 8006f78:	461e      	mov	r6, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f80:	2a39      	cmp	r2, #57	@ 0x39
 8006f82:	d052      	beq.n	800702a <_dtoa_r+0xb12>
 8006f84:	3201      	adds	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e612      	b.n	8006bb0 <_dtoa_r+0x698>
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	dd07      	ble.n	8006f9e <_dtoa_r+0xa86>
 8006f8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f92:	d0ed      	beq.n	8006f70 <_dtoa_r+0xa58>
 8006f94:	9a00      	ldr	r2, [sp, #0]
 8006f96:	f108 0301 	add.w	r3, r8, #1
 8006f9a:	7013      	strb	r3, [r2, #0]
 8006f9c:	e608      	b.n	8006bb0 <_dtoa_r+0x698>
 8006f9e:	9b07      	ldr	r3, [sp, #28]
 8006fa0:	9a07      	ldr	r2, [sp, #28]
 8006fa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d028      	beq.n	8006ffe <_dtoa_r+0xae6>
 8006fac:	4649      	mov	r1, r9
 8006fae:	2300      	movs	r3, #0
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	4658      	mov	r0, fp
 8006fb4:	f000 fd22 	bl	80079fc <__multadd>
 8006fb8:	42af      	cmp	r7, r5
 8006fba:	4681      	mov	r9, r0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	f04f 020a 	mov.w	r2, #10
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	d107      	bne.n	8006fda <_dtoa_r+0xac2>
 8006fca:	f000 fd17 	bl	80079fc <__multadd>
 8006fce:	4607      	mov	r7, r0
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	9b07      	ldr	r3, [sp, #28]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	9307      	str	r3, [sp, #28]
 8006fd8:	e774      	b.n	8006ec4 <_dtoa_r+0x9ac>
 8006fda:	f000 fd0f 	bl	80079fc <__multadd>
 8006fde:	4629      	mov	r1, r5
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	220a      	movs	r2, #10
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	f000 fd08 	bl	80079fc <__multadd>
 8006fec:	4605      	mov	r5, r0
 8006fee:	e7f0      	b.n	8006fd2 <_dtoa_r+0xaba>
 8006ff0:	9b00      	ldr	r3, [sp, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bfcc      	ite	gt
 8006ff6:	461e      	movgt	r6, r3
 8006ff8:	2601      	movle	r6, #1
 8006ffa:	4456      	add	r6, sl
 8006ffc:	2700      	movs	r7, #0
 8006ffe:	4649      	mov	r1, r9
 8007000:	2201      	movs	r2, #1
 8007002:	4658      	mov	r0, fp
 8007004:	f000 fef0 	bl	8007de8 <__lshift>
 8007008:	4621      	mov	r1, r4
 800700a:	4681      	mov	r9, r0
 800700c:	f000 ff58 	bl	8007ec0 <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	dcb0      	bgt.n	8006f76 <_dtoa_r+0xa5e>
 8007014:	d102      	bne.n	800701c <_dtoa_r+0xb04>
 8007016:	f018 0f01 	tst.w	r8, #1
 800701a:	d1ac      	bne.n	8006f76 <_dtoa_r+0xa5e>
 800701c:	4633      	mov	r3, r6
 800701e:	461e      	mov	r6, r3
 8007020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007024:	2a30      	cmp	r2, #48	@ 0x30
 8007026:	d0fa      	beq.n	800701e <_dtoa_r+0xb06>
 8007028:	e5c2      	b.n	8006bb0 <_dtoa_r+0x698>
 800702a:	459a      	cmp	sl, r3
 800702c:	d1a4      	bne.n	8006f78 <_dtoa_r+0xa60>
 800702e:	9b04      	ldr	r3, [sp, #16]
 8007030:	3301      	adds	r3, #1
 8007032:	9304      	str	r3, [sp, #16]
 8007034:	2331      	movs	r3, #49	@ 0x31
 8007036:	f88a 3000 	strb.w	r3, [sl]
 800703a:	e5b9      	b.n	8006bb0 <_dtoa_r+0x698>
 800703c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800703e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800709c <_dtoa_r+0xb84>
 8007042:	b11b      	cbz	r3, 800704c <_dtoa_r+0xb34>
 8007044:	f10a 0308 	add.w	r3, sl, #8
 8007048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4650      	mov	r0, sl
 800704e:	b019      	add	sp, #100	@ 0x64
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007056:	2b01      	cmp	r3, #1
 8007058:	f77f ae37 	ble.w	8006cca <_dtoa_r+0x7b2>
 800705c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800705e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007060:	2001      	movs	r0, #1
 8007062:	e655      	b.n	8006d10 <_dtoa_r+0x7f8>
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f77f aed6 	ble.w	8006e18 <_dtoa_r+0x900>
 800706c:	4656      	mov	r6, sl
 800706e:	4621      	mov	r1, r4
 8007070:	4648      	mov	r0, r9
 8007072:	f7ff f9c7 	bl	8006404 <quorem>
 8007076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800707a:	f806 8b01 	strb.w	r8, [r6], #1
 800707e:	9b00      	ldr	r3, [sp, #0]
 8007080:	eba6 020a 	sub.w	r2, r6, sl
 8007084:	4293      	cmp	r3, r2
 8007086:	ddb3      	ble.n	8006ff0 <_dtoa_r+0xad8>
 8007088:	4649      	mov	r1, r9
 800708a:	2300      	movs	r3, #0
 800708c:	220a      	movs	r2, #10
 800708e:	4658      	mov	r0, fp
 8007090:	f000 fcb4 	bl	80079fc <__multadd>
 8007094:	4681      	mov	r9, r0
 8007096:	e7ea      	b.n	800706e <_dtoa_r+0xb56>
 8007098:	08008c96 	.word	0x08008c96
 800709c:	08008c31 	.word	0x08008c31

080070a0 <_free_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4605      	mov	r5, r0
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d041      	beq.n	800712c <_free_r+0x8c>
 80070a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ac:	1f0c      	subs	r4, r1, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfb8      	it	lt
 80070b2:	18e4      	addlt	r4, r4, r3
 80070b4:	f000 fc34 	bl	8007920 <__malloc_lock>
 80070b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007130 <_free_r+0x90>)
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	b933      	cbnz	r3, 80070cc <_free_r+0x2c>
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	6014      	str	r4, [r2, #0]
 80070c2:	4628      	mov	r0, r5
 80070c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c8:	f000 bc30 	b.w	800792c <__malloc_unlock>
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	d908      	bls.n	80070e2 <_free_r+0x42>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	1821      	adds	r1, r4, r0
 80070d4:	428b      	cmp	r3, r1
 80070d6:	bf01      	itttt	eq
 80070d8:	6819      	ldreq	r1, [r3, #0]
 80070da:	685b      	ldreq	r3, [r3, #4]
 80070dc:	1809      	addeq	r1, r1, r0
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	e7ed      	b.n	80070be <_free_r+0x1e>
 80070e2:	461a      	mov	r2, r3
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b10b      	cbz	r3, 80070ec <_free_r+0x4c>
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d9fa      	bls.n	80070e2 <_free_r+0x42>
 80070ec:	6811      	ldr	r1, [r2, #0]
 80070ee:	1850      	adds	r0, r2, r1
 80070f0:	42a0      	cmp	r0, r4
 80070f2:	d10b      	bne.n	800710c <_free_r+0x6c>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	4401      	add	r1, r0
 80070f8:	1850      	adds	r0, r2, r1
 80070fa:	4283      	cmp	r3, r0
 80070fc:	6011      	str	r1, [r2, #0]
 80070fe:	d1e0      	bne.n	80070c2 <_free_r+0x22>
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	6053      	str	r3, [r2, #4]
 8007106:	4408      	add	r0, r1
 8007108:	6010      	str	r0, [r2, #0]
 800710a:	e7da      	b.n	80070c2 <_free_r+0x22>
 800710c:	d902      	bls.n	8007114 <_free_r+0x74>
 800710e:	230c      	movs	r3, #12
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	e7d6      	b.n	80070c2 <_free_r+0x22>
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	1821      	adds	r1, r4, r0
 8007118:	428b      	cmp	r3, r1
 800711a:	bf04      	itt	eq
 800711c:	6819      	ldreq	r1, [r3, #0]
 800711e:	685b      	ldreq	r3, [r3, #4]
 8007120:	6063      	str	r3, [r4, #4]
 8007122:	bf04      	itt	eq
 8007124:	1809      	addeq	r1, r1, r0
 8007126:	6021      	streq	r1, [r4, #0]
 8007128:	6054      	str	r4, [r2, #4]
 800712a:	e7ca      	b.n	80070c2 <_free_r+0x22>
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	bf00      	nop
 8007130:	200003f4 	.word	0x200003f4

08007134 <rshift>:
 8007134:	6903      	ldr	r3, [r0, #16]
 8007136:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800713a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800713e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007142:	f100 0414 	add.w	r4, r0, #20
 8007146:	dd45      	ble.n	80071d4 <rshift+0xa0>
 8007148:	f011 011f 	ands.w	r1, r1, #31
 800714c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007150:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007154:	d10c      	bne.n	8007170 <rshift+0x3c>
 8007156:	f100 0710 	add.w	r7, r0, #16
 800715a:	4629      	mov	r1, r5
 800715c:	42b1      	cmp	r1, r6
 800715e:	d334      	bcc.n	80071ca <rshift+0x96>
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	1eea      	subs	r2, r5, #3
 8007166:	4296      	cmp	r6, r2
 8007168:	bf38      	it	cc
 800716a:	2300      	movcc	r3, #0
 800716c:	4423      	add	r3, r4
 800716e:	e015      	b.n	800719c <rshift+0x68>
 8007170:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007174:	f1c1 0820 	rsb	r8, r1, #32
 8007178:	40cf      	lsrs	r7, r1
 800717a:	f105 0e04 	add.w	lr, r5, #4
 800717e:	46a1      	mov	r9, r4
 8007180:	4576      	cmp	r6, lr
 8007182:	46f4      	mov	ip, lr
 8007184:	d815      	bhi.n	80071b2 <rshift+0x7e>
 8007186:	1a9a      	subs	r2, r3, r2
 8007188:	0092      	lsls	r2, r2, #2
 800718a:	3a04      	subs	r2, #4
 800718c:	3501      	adds	r5, #1
 800718e:	42ae      	cmp	r6, r5
 8007190:	bf38      	it	cc
 8007192:	2200      	movcc	r2, #0
 8007194:	18a3      	adds	r3, r4, r2
 8007196:	50a7      	str	r7, [r4, r2]
 8007198:	b107      	cbz	r7, 800719c <rshift+0x68>
 800719a:	3304      	adds	r3, #4
 800719c:	1b1a      	subs	r2, r3, r4
 800719e:	42a3      	cmp	r3, r4
 80071a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071a4:	bf08      	it	eq
 80071a6:	2300      	moveq	r3, #0
 80071a8:	6102      	str	r2, [r0, #16]
 80071aa:	bf08      	it	eq
 80071ac:	6143      	streq	r3, [r0, #20]
 80071ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071b2:	f8dc c000 	ldr.w	ip, [ip]
 80071b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80071ba:	ea4c 0707 	orr.w	r7, ip, r7
 80071be:	f849 7b04 	str.w	r7, [r9], #4
 80071c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071c6:	40cf      	lsrs	r7, r1
 80071c8:	e7da      	b.n	8007180 <rshift+0x4c>
 80071ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80071ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80071d2:	e7c3      	b.n	800715c <rshift+0x28>
 80071d4:	4623      	mov	r3, r4
 80071d6:	e7e1      	b.n	800719c <rshift+0x68>

080071d8 <__hexdig_fun>:
 80071d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80071dc:	2b09      	cmp	r3, #9
 80071de:	d802      	bhi.n	80071e6 <__hexdig_fun+0xe>
 80071e0:	3820      	subs	r0, #32
 80071e2:	b2c0      	uxtb	r0, r0
 80071e4:	4770      	bx	lr
 80071e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d801      	bhi.n	80071f2 <__hexdig_fun+0x1a>
 80071ee:	3847      	subs	r0, #71	@ 0x47
 80071f0:	e7f7      	b.n	80071e2 <__hexdig_fun+0xa>
 80071f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d801      	bhi.n	80071fe <__hexdig_fun+0x26>
 80071fa:	3827      	subs	r0, #39	@ 0x27
 80071fc:	e7f1      	b.n	80071e2 <__hexdig_fun+0xa>
 80071fe:	2000      	movs	r0, #0
 8007200:	4770      	bx	lr
	...

08007204 <__gethex>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	b085      	sub	sp, #20
 800720a:	468a      	mov	sl, r1
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	680b      	ldr	r3, [r1, #0]
 8007210:	9001      	str	r0, [sp, #4]
 8007212:	4690      	mov	r8, r2
 8007214:	1c9c      	adds	r4, r3, #2
 8007216:	46a1      	mov	r9, r4
 8007218:	f814 0b01 	ldrb.w	r0, [r4], #1
 800721c:	2830      	cmp	r0, #48	@ 0x30
 800721e:	d0fa      	beq.n	8007216 <__gethex+0x12>
 8007220:	eba9 0303 	sub.w	r3, r9, r3
 8007224:	f1a3 0b02 	sub.w	fp, r3, #2
 8007228:	f7ff ffd6 	bl	80071d8 <__hexdig_fun>
 800722c:	4605      	mov	r5, r0
 800722e:	2800      	cmp	r0, #0
 8007230:	d168      	bne.n	8007304 <__gethex+0x100>
 8007232:	49a0      	ldr	r1, [pc, #640]	@ (80074b4 <__gethex+0x2b0>)
 8007234:	2201      	movs	r2, #1
 8007236:	4648      	mov	r0, r9
 8007238:	f7fe ffc8 	bl	80061cc <strncmp>
 800723c:	4607      	mov	r7, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	d167      	bne.n	8007312 <__gethex+0x10e>
 8007242:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007246:	4626      	mov	r6, r4
 8007248:	f7ff ffc6 	bl	80071d8 <__hexdig_fun>
 800724c:	2800      	cmp	r0, #0
 800724e:	d062      	beq.n	8007316 <__gethex+0x112>
 8007250:	4623      	mov	r3, r4
 8007252:	7818      	ldrb	r0, [r3, #0]
 8007254:	2830      	cmp	r0, #48	@ 0x30
 8007256:	4699      	mov	r9, r3
 8007258:	f103 0301 	add.w	r3, r3, #1
 800725c:	d0f9      	beq.n	8007252 <__gethex+0x4e>
 800725e:	f7ff ffbb 	bl	80071d8 <__hexdig_fun>
 8007262:	fab0 f580 	clz	r5, r0
 8007266:	096d      	lsrs	r5, r5, #5
 8007268:	f04f 0b01 	mov.w	fp, #1
 800726c:	464a      	mov	r2, r9
 800726e:	4616      	mov	r6, r2
 8007270:	3201      	adds	r2, #1
 8007272:	7830      	ldrb	r0, [r6, #0]
 8007274:	f7ff ffb0 	bl	80071d8 <__hexdig_fun>
 8007278:	2800      	cmp	r0, #0
 800727a:	d1f8      	bne.n	800726e <__gethex+0x6a>
 800727c:	498d      	ldr	r1, [pc, #564]	@ (80074b4 <__gethex+0x2b0>)
 800727e:	2201      	movs	r2, #1
 8007280:	4630      	mov	r0, r6
 8007282:	f7fe ffa3 	bl	80061cc <strncmp>
 8007286:	2800      	cmp	r0, #0
 8007288:	d13f      	bne.n	800730a <__gethex+0x106>
 800728a:	b944      	cbnz	r4, 800729e <__gethex+0x9a>
 800728c:	1c74      	adds	r4, r6, #1
 800728e:	4622      	mov	r2, r4
 8007290:	4616      	mov	r6, r2
 8007292:	3201      	adds	r2, #1
 8007294:	7830      	ldrb	r0, [r6, #0]
 8007296:	f7ff ff9f 	bl	80071d8 <__hexdig_fun>
 800729a:	2800      	cmp	r0, #0
 800729c:	d1f8      	bne.n	8007290 <__gethex+0x8c>
 800729e:	1ba4      	subs	r4, r4, r6
 80072a0:	00a7      	lsls	r7, r4, #2
 80072a2:	7833      	ldrb	r3, [r6, #0]
 80072a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80072a8:	2b50      	cmp	r3, #80	@ 0x50
 80072aa:	d13e      	bne.n	800732a <__gethex+0x126>
 80072ac:	7873      	ldrb	r3, [r6, #1]
 80072ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80072b0:	d033      	beq.n	800731a <__gethex+0x116>
 80072b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80072b4:	d034      	beq.n	8007320 <__gethex+0x11c>
 80072b6:	1c71      	adds	r1, r6, #1
 80072b8:	2400      	movs	r4, #0
 80072ba:	7808      	ldrb	r0, [r1, #0]
 80072bc:	f7ff ff8c 	bl	80071d8 <__hexdig_fun>
 80072c0:	1e43      	subs	r3, r0, #1
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b18      	cmp	r3, #24
 80072c6:	d830      	bhi.n	800732a <__gethex+0x126>
 80072c8:	f1a0 0210 	sub.w	r2, r0, #16
 80072cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80072d0:	f7ff ff82 	bl	80071d8 <__hexdig_fun>
 80072d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80072d8:	fa5f fc8c 	uxtb.w	ip, ip
 80072dc:	f1bc 0f18 	cmp.w	ip, #24
 80072e0:	f04f 030a 	mov.w	r3, #10
 80072e4:	d91e      	bls.n	8007324 <__gethex+0x120>
 80072e6:	b104      	cbz	r4, 80072ea <__gethex+0xe6>
 80072e8:	4252      	negs	r2, r2
 80072ea:	4417      	add	r7, r2
 80072ec:	f8ca 1000 	str.w	r1, [sl]
 80072f0:	b1ed      	cbz	r5, 800732e <__gethex+0x12a>
 80072f2:	f1bb 0f00 	cmp.w	fp, #0
 80072f6:	bf0c      	ite	eq
 80072f8:	2506      	moveq	r5, #6
 80072fa:	2500      	movne	r5, #0
 80072fc:	4628      	mov	r0, r5
 80072fe:	b005      	add	sp, #20
 8007300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007304:	2500      	movs	r5, #0
 8007306:	462c      	mov	r4, r5
 8007308:	e7b0      	b.n	800726c <__gethex+0x68>
 800730a:	2c00      	cmp	r4, #0
 800730c:	d1c7      	bne.n	800729e <__gethex+0x9a>
 800730e:	4627      	mov	r7, r4
 8007310:	e7c7      	b.n	80072a2 <__gethex+0x9e>
 8007312:	464e      	mov	r6, r9
 8007314:	462f      	mov	r7, r5
 8007316:	2501      	movs	r5, #1
 8007318:	e7c3      	b.n	80072a2 <__gethex+0x9e>
 800731a:	2400      	movs	r4, #0
 800731c:	1cb1      	adds	r1, r6, #2
 800731e:	e7cc      	b.n	80072ba <__gethex+0xb6>
 8007320:	2401      	movs	r4, #1
 8007322:	e7fb      	b.n	800731c <__gethex+0x118>
 8007324:	fb03 0002 	mla	r0, r3, r2, r0
 8007328:	e7ce      	b.n	80072c8 <__gethex+0xc4>
 800732a:	4631      	mov	r1, r6
 800732c:	e7de      	b.n	80072ec <__gethex+0xe8>
 800732e:	eba6 0309 	sub.w	r3, r6, r9
 8007332:	3b01      	subs	r3, #1
 8007334:	4629      	mov	r1, r5
 8007336:	2b07      	cmp	r3, #7
 8007338:	dc0a      	bgt.n	8007350 <__gethex+0x14c>
 800733a:	9801      	ldr	r0, [sp, #4]
 800733c:	f000 fafc 	bl	8007938 <_Balloc>
 8007340:	4604      	mov	r4, r0
 8007342:	b940      	cbnz	r0, 8007356 <__gethex+0x152>
 8007344:	4b5c      	ldr	r3, [pc, #368]	@ (80074b8 <__gethex+0x2b4>)
 8007346:	4602      	mov	r2, r0
 8007348:	21e4      	movs	r1, #228	@ 0xe4
 800734a:	485c      	ldr	r0, [pc, #368]	@ (80074bc <__gethex+0x2b8>)
 800734c:	f7ff f83c 	bl	80063c8 <__assert_func>
 8007350:	3101      	adds	r1, #1
 8007352:	105b      	asrs	r3, r3, #1
 8007354:	e7ef      	b.n	8007336 <__gethex+0x132>
 8007356:	f100 0a14 	add.w	sl, r0, #20
 800735a:	2300      	movs	r3, #0
 800735c:	4655      	mov	r5, sl
 800735e:	469b      	mov	fp, r3
 8007360:	45b1      	cmp	r9, r6
 8007362:	d337      	bcc.n	80073d4 <__gethex+0x1d0>
 8007364:	f845 bb04 	str.w	fp, [r5], #4
 8007368:	eba5 050a 	sub.w	r5, r5, sl
 800736c:	10ad      	asrs	r5, r5, #2
 800736e:	6125      	str	r5, [r4, #16]
 8007370:	4658      	mov	r0, fp
 8007372:	f000 fbd3 	bl	8007b1c <__hi0bits>
 8007376:	016d      	lsls	r5, r5, #5
 8007378:	f8d8 6000 	ldr.w	r6, [r8]
 800737c:	1a2d      	subs	r5, r5, r0
 800737e:	42b5      	cmp	r5, r6
 8007380:	dd54      	ble.n	800742c <__gethex+0x228>
 8007382:	1bad      	subs	r5, r5, r6
 8007384:	4629      	mov	r1, r5
 8007386:	4620      	mov	r0, r4
 8007388:	f000 ff67 	bl	800825a <__any_on>
 800738c:	4681      	mov	r9, r0
 800738e:	b178      	cbz	r0, 80073b0 <__gethex+0x1ac>
 8007390:	1e6b      	subs	r3, r5, #1
 8007392:	1159      	asrs	r1, r3, #5
 8007394:	f003 021f 	and.w	r2, r3, #31
 8007398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800739c:	f04f 0901 	mov.w	r9, #1
 80073a0:	fa09 f202 	lsl.w	r2, r9, r2
 80073a4:	420a      	tst	r2, r1
 80073a6:	d003      	beq.n	80073b0 <__gethex+0x1ac>
 80073a8:	454b      	cmp	r3, r9
 80073aa:	dc36      	bgt.n	800741a <__gethex+0x216>
 80073ac:	f04f 0902 	mov.w	r9, #2
 80073b0:	4629      	mov	r1, r5
 80073b2:	4620      	mov	r0, r4
 80073b4:	f7ff febe 	bl	8007134 <rshift>
 80073b8:	442f      	add	r7, r5
 80073ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073be:	42bb      	cmp	r3, r7
 80073c0:	da42      	bge.n	8007448 <__gethex+0x244>
 80073c2:	9801      	ldr	r0, [sp, #4]
 80073c4:	4621      	mov	r1, r4
 80073c6:	f000 faf7 	bl	80079b8 <_Bfree>
 80073ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073cc:	2300      	movs	r3, #0
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	25a3      	movs	r5, #163	@ 0xa3
 80073d2:	e793      	b.n	80072fc <__gethex+0xf8>
 80073d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80073d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80073da:	d012      	beq.n	8007402 <__gethex+0x1fe>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d104      	bne.n	80073ea <__gethex+0x1e6>
 80073e0:	f845 bb04 	str.w	fp, [r5], #4
 80073e4:	f04f 0b00 	mov.w	fp, #0
 80073e8:	465b      	mov	r3, fp
 80073ea:	7830      	ldrb	r0, [r6, #0]
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	f7ff fef3 	bl	80071d8 <__hexdig_fun>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	f000 000f 	and.w	r0, r0, #15
 80073f8:	4098      	lsls	r0, r3
 80073fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80073fe:	3304      	adds	r3, #4
 8007400:	e7ae      	b.n	8007360 <__gethex+0x15c>
 8007402:	45b1      	cmp	r9, r6
 8007404:	d8ea      	bhi.n	80073dc <__gethex+0x1d8>
 8007406:	492b      	ldr	r1, [pc, #172]	@ (80074b4 <__gethex+0x2b0>)
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	4630      	mov	r0, r6
 800740e:	f7fe fedd 	bl	80061cc <strncmp>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	2800      	cmp	r0, #0
 8007416:	d1e1      	bne.n	80073dc <__gethex+0x1d8>
 8007418:	e7a2      	b.n	8007360 <__gethex+0x15c>
 800741a:	1ea9      	subs	r1, r5, #2
 800741c:	4620      	mov	r0, r4
 800741e:	f000 ff1c 	bl	800825a <__any_on>
 8007422:	2800      	cmp	r0, #0
 8007424:	d0c2      	beq.n	80073ac <__gethex+0x1a8>
 8007426:	f04f 0903 	mov.w	r9, #3
 800742a:	e7c1      	b.n	80073b0 <__gethex+0x1ac>
 800742c:	da09      	bge.n	8007442 <__gethex+0x23e>
 800742e:	1b75      	subs	r5, r6, r5
 8007430:	4621      	mov	r1, r4
 8007432:	9801      	ldr	r0, [sp, #4]
 8007434:	462a      	mov	r2, r5
 8007436:	f000 fcd7 	bl	8007de8 <__lshift>
 800743a:	1b7f      	subs	r7, r7, r5
 800743c:	4604      	mov	r4, r0
 800743e:	f100 0a14 	add.w	sl, r0, #20
 8007442:	f04f 0900 	mov.w	r9, #0
 8007446:	e7b8      	b.n	80073ba <__gethex+0x1b6>
 8007448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800744c:	42bd      	cmp	r5, r7
 800744e:	dd6f      	ble.n	8007530 <__gethex+0x32c>
 8007450:	1bed      	subs	r5, r5, r7
 8007452:	42ae      	cmp	r6, r5
 8007454:	dc34      	bgt.n	80074c0 <__gethex+0x2bc>
 8007456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d022      	beq.n	80074a4 <__gethex+0x2a0>
 800745e:	2b03      	cmp	r3, #3
 8007460:	d024      	beq.n	80074ac <__gethex+0x2a8>
 8007462:	2b01      	cmp	r3, #1
 8007464:	d115      	bne.n	8007492 <__gethex+0x28e>
 8007466:	42ae      	cmp	r6, r5
 8007468:	d113      	bne.n	8007492 <__gethex+0x28e>
 800746a:	2e01      	cmp	r6, #1
 800746c:	d10b      	bne.n	8007486 <__gethex+0x282>
 800746e:	9a02      	ldr	r2, [sp, #8]
 8007470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	2301      	movs	r3, #1
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	f8ca 3000 	str.w	r3, [sl]
 800747e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007480:	2562      	movs	r5, #98	@ 0x62
 8007482:	601c      	str	r4, [r3, #0]
 8007484:	e73a      	b.n	80072fc <__gethex+0xf8>
 8007486:	1e71      	subs	r1, r6, #1
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fee6 	bl	800825a <__any_on>
 800748e:	2800      	cmp	r0, #0
 8007490:	d1ed      	bne.n	800746e <__gethex+0x26a>
 8007492:	9801      	ldr	r0, [sp, #4]
 8007494:	4621      	mov	r1, r4
 8007496:	f000 fa8f 	bl	80079b8 <_Bfree>
 800749a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800749c:	2300      	movs	r3, #0
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	2550      	movs	r5, #80	@ 0x50
 80074a2:	e72b      	b.n	80072fc <__gethex+0xf8>
 80074a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f3      	bne.n	8007492 <__gethex+0x28e>
 80074aa:	e7e0      	b.n	800746e <__gethex+0x26a>
 80074ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1dd      	bne.n	800746e <__gethex+0x26a>
 80074b2:	e7ee      	b.n	8007492 <__gethex+0x28e>
 80074b4:	08008af0 	.word	0x08008af0
 80074b8:	08008c96 	.word	0x08008c96
 80074bc:	08008ca7 	.word	0x08008ca7
 80074c0:	1e6f      	subs	r7, r5, #1
 80074c2:	f1b9 0f00 	cmp.w	r9, #0
 80074c6:	d130      	bne.n	800752a <__gethex+0x326>
 80074c8:	b127      	cbz	r7, 80074d4 <__gethex+0x2d0>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 fec4 	bl	800825a <__any_on>
 80074d2:	4681      	mov	r9, r0
 80074d4:	117a      	asrs	r2, r7, #5
 80074d6:	2301      	movs	r3, #1
 80074d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80074dc:	f007 071f 	and.w	r7, r7, #31
 80074e0:	40bb      	lsls	r3, r7
 80074e2:	4213      	tst	r3, r2
 80074e4:	4629      	mov	r1, r5
 80074e6:	4620      	mov	r0, r4
 80074e8:	bf18      	it	ne
 80074ea:	f049 0902 	orrne.w	r9, r9, #2
 80074ee:	f7ff fe21 	bl	8007134 <rshift>
 80074f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80074f6:	1b76      	subs	r6, r6, r5
 80074f8:	2502      	movs	r5, #2
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	d047      	beq.n	8007590 <__gethex+0x38c>
 8007500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d015      	beq.n	8007534 <__gethex+0x330>
 8007508:	2b03      	cmp	r3, #3
 800750a:	d017      	beq.n	800753c <__gethex+0x338>
 800750c:	2b01      	cmp	r3, #1
 800750e:	d109      	bne.n	8007524 <__gethex+0x320>
 8007510:	f019 0f02 	tst.w	r9, #2
 8007514:	d006      	beq.n	8007524 <__gethex+0x320>
 8007516:	f8da 3000 	ldr.w	r3, [sl]
 800751a:	ea49 0903 	orr.w	r9, r9, r3
 800751e:	f019 0f01 	tst.w	r9, #1
 8007522:	d10e      	bne.n	8007542 <__gethex+0x33e>
 8007524:	f045 0510 	orr.w	r5, r5, #16
 8007528:	e032      	b.n	8007590 <__gethex+0x38c>
 800752a:	f04f 0901 	mov.w	r9, #1
 800752e:	e7d1      	b.n	80074d4 <__gethex+0x2d0>
 8007530:	2501      	movs	r5, #1
 8007532:	e7e2      	b.n	80074fa <__gethex+0x2f6>
 8007534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007536:	f1c3 0301 	rsb	r3, r3, #1
 800753a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800753c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <__gethex+0x320>
 8007542:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007546:	f104 0314 	add.w	r3, r4, #20
 800754a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800754e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007552:	f04f 0c00 	mov.w	ip, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f853 2b04 	ldr.w	r2, [r3], #4
 800755c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007560:	d01b      	beq.n	800759a <__gethex+0x396>
 8007562:	3201      	adds	r2, #1
 8007564:	6002      	str	r2, [r0, #0]
 8007566:	2d02      	cmp	r5, #2
 8007568:	f104 0314 	add.w	r3, r4, #20
 800756c:	d13c      	bne.n	80075e8 <__gethex+0x3e4>
 800756e:	f8d8 2000 	ldr.w	r2, [r8]
 8007572:	3a01      	subs	r2, #1
 8007574:	42b2      	cmp	r2, r6
 8007576:	d109      	bne.n	800758c <__gethex+0x388>
 8007578:	1171      	asrs	r1, r6, #5
 800757a:	2201      	movs	r2, #1
 800757c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007580:	f006 061f 	and.w	r6, r6, #31
 8007584:	fa02 f606 	lsl.w	r6, r2, r6
 8007588:	421e      	tst	r6, r3
 800758a:	d13a      	bne.n	8007602 <__gethex+0x3fe>
 800758c:	f045 0520 	orr.w	r5, r5, #32
 8007590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007592:	601c      	str	r4, [r3, #0]
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	601f      	str	r7, [r3, #0]
 8007598:	e6b0      	b.n	80072fc <__gethex+0xf8>
 800759a:	4299      	cmp	r1, r3
 800759c:	f843 cc04 	str.w	ip, [r3, #-4]
 80075a0:	d8d9      	bhi.n	8007556 <__gethex+0x352>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	459b      	cmp	fp, r3
 80075a6:	db17      	blt.n	80075d8 <__gethex+0x3d4>
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	9801      	ldr	r0, [sp, #4]
 80075ac:	3101      	adds	r1, #1
 80075ae:	f000 f9c3 	bl	8007938 <_Balloc>
 80075b2:	4681      	mov	r9, r0
 80075b4:	b918      	cbnz	r0, 80075be <__gethex+0x3ba>
 80075b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007620 <__gethex+0x41c>)
 80075b8:	4602      	mov	r2, r0
 80075ba:	2184      	movs	r1, #132	@ 0x84
 80075bc:	e6c5      	b.n	800734a <__gethex+0x146>
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	3202      	adds	r2, #2
 80075c2:	f104 010c 	add.w	r1, r4, #12
 80075c6:	0092      	lsls	r2, r2, #2
 80075c8:	300c      	adds	r0, #12
 80075ca:	f7fe fee4 	bl	8006396 <memcpy>
 80075ce:	4621      	mov	r1, r4
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	f000 f9f1 	bl	80079b8 <_Bfree>
 80075d6:	464c      	mov	r4, r9
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075e0:	6122      	str	r2, [r4, #16]
 80075e2:	2201      	movs	r2, #1
 80075e4:	615a      	str	r2, [r3, #20]
 80075e6:	e7be      	b.n	8007566 <__gethex+0x362>
 80075e8:	6922      	ldr	r2, [r4, #16]
 80075ea:	455a      	cmp	r2, fp
 80075ec:	dd0b      	ble.n	8007606 <__gethex+0x402>
 80075ee:	2101      	movs	r1, #1
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7ff fd9f 	bl	8007134 <rshift>
 80075f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075fa:	3701      	adds	r7, #1
 80075fc:	42bb      	cmp	r3, r7
 80075fe:	f6ff aee0 	blt.w	80073c2 <__gethex+0x1be>
 8007602:	2501      	movs	r5, #1
 8007604:	e7c2      	b.n	800758c <__gethex+0x388>
 8007606:	f016 061f 	ands.w	r6, r6, #31
 800760a:	d0fa      	beq.n	8007602 <__gethex+0x3fe>
 800760c:	4453      	add	r3, sl
 800760e:	f1c6 0620 	rsb	r6, r6, #32
 8007612:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007616:	f000 fa81 	bl	8007b1c <__hi0bits>
 800761a:	42b0      	cmp	r0, r6
 800761c:	dbe7      	blt.n	80075ee <__gethex+0x3ea>
 800761e:	e7f0      	b.n	8007602 <__gethex+0x3fe>
 8007620:	08008c96 	.word	0x08008c96

08007624 <L_shift>:
 8007624:	f1c2 0208 	rsb	r2, r2, #8
 8007628:	0092      	lsls	r2, r2, #2
 800762a:	b570      	push	{r4, r5, r6, lr}
 800762c:	f1c2 0620 	rsb	r6, r2, #32
 8007630:	6843      	ldr	r3, [r0, #4]
 8007632:	6804      	ldr	r4, [r0, #0]
 8007634:	fa03 f506 	lsl.w	r5, r3, r6
 8007638:	432c      	orrs	r4, r5
 800763a:	40d3      	lsrs	r3, r2
 800763c:	6004      	str	r4, [r0, #0]
 800763e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007642:	4288      	cmp	r0, r1
 8007644:	d3f4      	bcc.n	8007630 <L_shift+0xc>
 8007646:	bd70      	pop	{r4, r5, r6, pc}

08007648 <__match>:
 8007648:	b530      	push	{r4, r5, lr}
 800764a:	6803      	ldr	r3, [r0, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007652:	b914      	cbnz	r4, 800765a <__match+0x12>
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	2001      	movs	r0, #1
 8007658:	bd30      	pop	{r4, r5, pc}
 800765a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800765e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007662:	2d19      	cmp	r5, #25
 8007664:	bf98      	it	ls
 8007666:	3220      	addls	r2, #32
 8007668:	42a2      	cmp	r2, r4
 800766a:	d0f0      	beq.n	800764e <__match+0x6>
 800766c:	2000      	movs	r0, #0
 800766e:	e7f3      	b.n	8007658 <__match+0x10>

08007670 <__hexnan>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	6801      	ldr	r1, [r0, #0]
 8007678:	115e      	asrs	r6, r3, #5
 800767a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800767e:	f013 031f 	ands.w	r3, r3, #31
 8007682:	b087      	sub	sp, #28
 8007684:	bf18      	it	ne
 8007686:	3604      	addne	r6, #4
 8007688:	2500      	movs	r5, #0
 800768a:	1f37      	subs	r7, r6, #4
 800768c:	4682      	mov	sl, r0
 800768e:	4690      	mov	r8, r2
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	f846 5c04 	str.w	r5, [r6, #-4]
 8007696:	46b9      	mov	r9, r7
 8007698:	463c      	mov	r4, r7
 800769a:	9502      	str	r5, [sp, #8]
 800769c:	46ab      	mov	fp, r5
 800769e:	784a      	ldrb	r2, [r1, #1]
 80076a0:	1c4b      	adds	r3, r1, #1
 80076a2:	9303      	str	r3, [sp, #12]
 80076a4:	b342      	cbz	r2, 80076f8 <__hexnan+0x88>
 80076a6:	4610      	mov	r0, r2
 80076a8:	9105      	str	r1, [sp, #20]
 80076aa:	9204      	str	r2, [sp, #16]
 80076ac:	f7ff fd94 	bl	80071d8 <__hexdig_fun>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d151      	bne.n	8007758 <__hexnan+0xe8>
 80076b4:	9a04      	ldr	r2, [sp, #16]
 80076b6:	9905      	ldr	r1, [sp, #20]
 80076b8:	2a20      	cmp	r2, #32
 80076ba:	d818      	bhi.n	80076ee <__hexnan+0x7e>
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	459b      	cmp	fp, r3
 80076c0:	dd13      	ble.n	80076ea <__hexnan+0x7a>
 80076c2:	454c      	cmp	r4, r9
 80076c4:	d206      	bcs.n	80076d4 <__hexnan+0x64>
 80076c6:	2d07      	cmp	r5, #7
 80076c8:	dc04      	bgt.n	80076d4 <__hexnan+0x64>
 80076ca:	462a      	mov	r2, r5
 80076cc:	4649      	mov	r1, r9
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7ff ffa8 	bl	8007624 <L_shift>
 80076d4:	4544      	cmp	r4, r8
 80076d6:	d952      	bls.n	800777e <__hexnan+0x10e>
 80076d8:	2300      	movs	r3, #0
 80076da:	f1a4 0904 	sub.w	r9, r4, #4
 80076de:	f844 3c04 	str.w	r3, [r4, #-4]
 80076e2:	f8cd b008 	str.w	fp, [sp, #8]
 80076e6:	464c      	mov	r4, r9
 80076e8:	461d      	mov	r5, r3
 80076ea:	9903      	ldr	r1, [sp, #12]
 80076ec:	e7d7      	b.n	800769e <__hexnan+0x2e>
 80076ee:	2a29      	cmp	r2, #41	@ 0x29
 80076f0:	d157      	bne.n	80077a2 <__hexnan+0x132>
 80076f2:	3102      	adds	r1, #2
 80076f4:	f8ca 1000 	str.w	r1, [sl]
 80076f8:	f1bb 0f00 	cmp.w	fp, #0
 80076fc:	d051      	beq.n	80077a2 <__hexnan+0x132>
 80076fe:	454c      	cmp	r4, r9
 8007700:	d206      	bcs.n	8007710 <__hexnan+0xa0>
 8007702:	2d07      	cmp	r5, #7
 8007704:	dc04      	bgt.n	8007710 <__hexnan+0xa0>
 8007706:	462a      	mov	r2, r5
 8007708:	4649      	mov	r1, r9
 800770a:	4620      	mov	r0, r4
 800770c:	f7ff ff8a 	bl	8007624 <L_shift>
 8007710:	4544      	cmp	r4, r8
 8007712:	d936      	bls.n	8007782 <__hexnan+0x112>
 8007714:	f1a8 0204 	sub.w	r2, r8, #4
 8007718:	4623      	mov	r3, r4
 800771a:	f853 1b04 	ldr.w	r1, [r3], #4
 800771e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007722:	429f      	cmp	r7, r3
 8007724:	d2f9      	bcs.n	800771a <__hexnan+0xaa>
 8007726:	1b3b      	subs	r3, r7, r4
 8007728:	f023 0303 	bic.w	r3, r3, #3
 800772c:	3304      	adds	r3, #4
 800772e:	3401      	adds	r4, #1
 8007730:	3e03      	subs	r6, #3
 8007732:	42b4      	cmp	r4, r6
 8007734:	bf88      	it	hi
 8007736:	2304      	movhi	r3, #4
 8007738:	4443      	add	r3, r8
 800773a:	2200      	movs	r2, #0
 800773c:	f843 2b04 	str.w	r2, [r3], #4
 8007740:	429f      	cmp	r7, r3
 8007742:	d2fb      	bcs.n	800773c <__hexnan+0xcc>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	b91b      	cbnz	r3, 8007750 <__hexnan+0xe0>
 8007748:	4547      	cmp	r7, r8
 800774a:	d128      	bne.n	800779e <__hexnan+0x12e>
 800774c:	2301      	movs	r3, #1
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	2005      	movs	r0, #5
 8007752:	b007      	add	sp, #28
 8007754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007758:	3501      	adds	r5, #1
 800775a:	2d08      	cmp	r5, #8
 800775c:	f10b 0b01 	add.w	fp, fp, #1
 8007760:	dd06      	ble.n	8007770 <__hexnan+0x100>
 8007762:	4544      	cmp	r4, r8
 8007764:	d9c1      	bls.n	80076ea <__hexnan+0x7a>
 8007766:	2300      	movs	r3, #0
 8007768:	f844 3c04 	str.w	r3, [r4, #-4]
 800776c:	2501      	movs	r5, #1
 800776e:	3c04      	subs	r4, #4
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	f000 000f 	and.w	r0, r0, #15
 8007776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800777a:	6020      	str	r0, [r4, #0]
 800777c:	e7b5      	b.n	80076ea <__hexnan+0x7a>
 800777e:	2508      	movs	r5, #8
 8007780:	e7b3      	b.n	80076ea <__hexnan+0x7a>
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0dd      	beq.n	8007744 <__hexnan+0xd4>
 8007788:	f1c3 0320 	rsb	r3, r3, #32
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	40da      	lsrs	r2, r3
 8007792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007796:	4013      	ands	r3, r2
 8007798:	f846 3c04 	str.w	r3, [r6, #-4]
 800779c:	e7d2      	b.n	8007744 <__hexnan+0xd4>
 800779e:	3f04      	subs	r7, #4
 80077a0:	e7d0      	b.n	8007744 <__hexnan+0xd4>
 80077a2:	2004      	movs	r0, #4
 80077a4:	e7d5      	b.n	8007752 <__hexnan+0xe2>
	...

080077a8 <malloc>:
 80077a8:	4b02      	ldr	r3, [pc, #8]	@ (80077b4 <malloc+0xc>)
 80077aa:	4601      	mov	r1, r0
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f000 b825 	b.w	80077fc <_malloc_r>
 80077b2:	bf00      	nop
 80077b4:	20000188 	.word	0x20000188

080077b8 <sbrk_aligned>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4e0f      	ldr	r6, [pc, #60]	@ (80077f8 <sbrk_aligned+0x40>)
 80077bc:	460c      	mov	r4, r1
 80077be:	6831      	ldr	r1, [r6, #0]
 80077c0:	4605      	mov	r5, r0
 80077c2:	b911      	cbnz	r1, 80077ca <sbrk_aligned+0x12>
 80077c4:	f000 fffa 	bl	80087bc <_sbrk_r>
 80077c8:	6030      	str	r0, [r6, #0]
 80077ca:	4621      	mov	r1, r4
 80077cc:	4628      	mov	r0, r5
 80077ce:	f000 fff5 	bl	80087bc <_sbrk_r>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d103      	bne.n	80077de <sbrk_aligned+0x26>
 80077d6:	f04f 34ff 	mov.w	r4, #4294967295
 80077da:	4620      	mov	r0, r4
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
 80077de:	1cc4      	adds	r4, r0, #3
 80077e0:	f024 0403 	bic.w	r4, r4, #3
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d0f8      	beq.n	80077da <sbrk_aligned+0x22>
 80077e8:	1a21      	subs	r1, r4, r0
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 ffe6 	bl	80087bc <_sbrk_r>
 80077f0:	3001      	adds	r0, #1
 80077f2:	d1f2      	bne.n	80077da <sbrk_aligned+0x22>
 80077f4:	e7ef      	b.n	80077d6 <sbrk_aligned+0x1e>
 80077f6:	bf00      	nop
 80077f8:	200003f0 	.word	0x200003f0

080077fc <_malloc_r>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	1ccd      	adds	r5, r1, #3
 8007802:	f025 0503 	bic.w	r5, r5, #3
 8007806:	3508      	adds	r5, #8
 8007808:	2d0c      	cmp	r5, #12
 800780a:	bf38      	it	cc
 800780c:	250c      	movcc	r5, #12
 800780e:	2d00      	cmp	r5, #0
 8007810:	4606      	mov	r6, r0
 8007812:	db01      	blt.n	8007818 <_malloc_r+0x1c>
 8007814:	42a9      	cmp	r1, r5
 8007816:	d904      	bls.n	8007822 <_malloc_r+0x26>
 8007818:	230c      	movs	r3, #12
 800781a:	6033      	str	r3, [r6, #0]
 800781c:	2000      	movs	r0, #0
 800781e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078f8 <_malloc_r+0xfc>
 8007826:	f000 f87b 	bl	8007920 <__malloc_lock>
 800782a:	f8d8 3000 	ldr.w	r3, [r8]
 800782e:	461c      	mov	r4, r3
 8007830:	bb44      	cbnz	r4, 8007884 <_malloc_r+0x88>
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff ffbf 	bl	80077b8 <sbrk_aligned>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	4604      	mov	r4, r0
 800783e:	d158      	bne.n	80078f2 <_malloc_r+0xf6>
 8007840:	f8d8 4000 	ldr.w	r4, [r8]
 8007844:	4627      	mov	r7, r4
 8007846:	2f00      	cmp	r7, #0
 8007848:	d143      	bne.n	80078d2 <_malloc_r+0xd6>
 800784a:	2c00      	cmp	r4, #0
 800784c:	d04b      	beq.n	80078e6 <_malloc_r+0xea>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	4639      	mov	r1, r7
 8007852:	4630      	mov	r0, r6
 8007854:	eb04 0903 	add.w	r9, r4, r3
 8007858:	f000 ffb0 	bl	80087bc <_sbrk_r>
 800785c:	4581      	cmp	r9, r0
 800785e:	d142      	bne.n	80078e6 <_malloc_r+0xea>
 8007860:	6821      	ldr	r1, [r4, #0]
 8007862:	1a6d      	subs	r5, r5, r1
 8007864:	4629      	mov	r1, r5
 8007866:	4630      	mov	r0, r6
 8007868:	f7ff ffa6 	bl	80077b8 <sbrk_aligned>
 800786c:	3001      	adds	r0, #1
 800786e:	d03a      	beq.n	80078e6 <_malloc_r+0xea>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	442b      	add	r3, r5
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	f8d8 3000 	ldr.w	r3, [r8]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	bb62      	cbnz	r2, 80078d8 <_malloc_r+0xdc>
 800787e:	f8c8 7000 	str.w	r7, [r8]
 8007882:	e00f      	b.n	80078a4 <_malloc_r+0xa8>
 8007884:	6822      	ldr	r2, [r4, #0]
 8007886:	1b52      	subs	r2, r2, r5
 8007888:	d420      	bmi.n	80078cc <_malloc_r+0xd0>
 800788a:	2a0b      	cmp	r2, #11
 800788c:	d917      	bls.n	80078be <_malloc_r+0xc2>
 800788e:	1961      	adds	r1, r4, r5
 8007890:	42a3      	cmp	r3, r4
 8007892:	6025      	str	r5, [r4, #0]
 8007894:	bf18      	it	ne
 8007896:	6059      	strne	r1, [r3, #4]
 8007898:	6863      	ldr	r3, [r4, #4]
 800789a:	bf08      	it	eq
 800789c:	f8c8 1000 	streq.w	r1, [r8]
 80078a0:	5162      	str	r2, [r4, r5]
 80078a2:	604b      	str	r3, [r1, #4]
 80078a4:	4630      	mov	r0, r6
 80078a6:	f000 f841 	bl	800792c <__malloc_unlock>
 80078aa:	f104 000b 	add.w	r0, r4, #11
 80078ae:	1d23      	adds	r3, r4, #4
 80078b0:	f020 0007 	bic.w	r0, r0, #7
 80078b4:	1ac2      	subs	r2, r0, r3
 80078b6:	bf1c      	itt	ne
 80078b8:	1a1b      	subne	r3, r3, r0
 80078ba:	50a3      	strne	r3, [r4, r2]
 80078bc:	e7af      	b.n	800781e <_malloc_r+0x22>
 80078be:	6862      	ldr	r2, [r4, #4]
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	bf0c      	ite	eq
 80078c4:	f8c8 2000 	streq.w	r2, [r8]
 80078c8:	605a      	strne	r2, [r3, #4]
 80078ca:	e7eb      	b.n	80078a4 <_malloc_r+0xa8>
 80078cc:	4623      	mov	r3, r4
 80078ce:	6864      	ldr	r4, [r4, #4]
 80078d0:	e7ae      	b.n	8007830 <_malloc_r+0x34>
 80078d2:	463c      	mov	r4, r7
 80078d4:	687f      	ldr	r7, [r7, #4]
 80078d6:	e7b6      	b.n	8007846 <_malloc_r+0x4a>
 80078d8:	461a      	mov	r2, r3
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	d1fb      	bne.n	80078d8 <_malloc_r+0xdc>
 80078e0:	2300      	movs	r3, #0
 80078e2:	6053      	str	r3, [r2, #4]
 80078e4:	e7de      	b.n	80078a4 <_malloc_r+0xa8>
 80078e6:	230c      	movs	r3, #12
 80078e8:	6033      	str	r3, [r6, #0]
 80078ea:	4630      	mov	r0, r6
 80078ec:	f000 f81e 	bl	800792c <__malloc_unlock>
 80078f0:	e794      	b.n	800781c <_malloc_r+0x20>
 80078f2:	6005      	str	r5, [r0, #0]
 80078f4:	e7d6      	b.n	80078a4 <_malloc_r+0xa8>
 80078f6:	bf00      	nop
 80078f8:	200003f4 	.word	0x200003f4

080078fc <__ascii_mbtowc>:
 80078fc:	b082      	sub	sp, #8
 80078fe:	b901      	cbnz	r1, 8007902 <__ascii_mbtowc+0x6>
 8007900:	a901      	add	r1, sp, #4
 8007902:	b142      	cbz	r2, 8007916 <__ascii_mbtowc+0x1a>
 8007904:	b14b      	cbz	r3, 800791a <__ascii_mbtowc+0x1e>
 8007906:	7813      	ldrb	r3, [r2, #0]
 8007908:	600b      	str	r3, [r1, #0]
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	1e10      	subs	r0, r2, #0
 800790e:	bf18      	it	ne
 8007910:	2001      	movne	r0, #1
 8007912:	b002      	add	sp, #8
 8007914:	4770      	bx	lr
 8007916:	4610      	mov	r0, r2
 8007918:	e7fb      	b.n	8007912 <__ascii_mbtowc+0x16>
 800791a:	f06f 0001 	mvn.w	r0, #1
 800791e:	e7f8      	b.n	8007912 <__ascii_mbtowc+0x16>

08007920 <__malloc_lock>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__malloc_lock+0x8>)
 8007922:	f7fe bd36 	b.w	8006392 <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	200003ec 	.word	0x200003ec

0800792c <__malloc_unlock>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__malloc_unlock+0x8>)
 800792e:	f7fe bd31 	b.w	8006394 <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	200003ec 	.word	0x200003ec

08007938 <_Balloc>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	69c6      	ldr	r6, [r0, #28]
 800793c:	4604      	mov	r4, r0
 800793e:	460d      	mov	r5, r1
 8007940:	b976      	cbnz	r6, 8007960 <_Balloc+0x28>
 8007942:	2010      	movs	r0, #16
 8007944:	f7ff ff30 	bl	80077a8 <malloc>
 8007948:	4602      	mov	r2, r0
 800794a:	61e0      	str	r0, [r4, #28]
 800794c:	b920      	cbnz	r0, 8007958 <_Balloc+0x20>
 800794e:	4b18      	ldr	r3, [pc, #96]	@ (80079b0 <_Balloc+0x78>)
 8007950:	4818      	ldr	r0, [pc, #96]	@ (80079b4 <_Balloc+0x7c>)
 8007952:	216b      	movs	r1, #107	@ 0x6b
 8007954:	f7fe fd38 	bl	80063c8 <__assert_func>
 8007958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800795c:	6006      	str	r6, [r0, #0]
 800795e:	60c6      	str	r6, [r0, #12]
 8007960:	69e6      	ldr	r6, [r4, #28]
 8007962:	68f3      	ldr	r3, [r6, #12]
 8007964:	b183      	cbz	r3, 8007988 <_Balloc+0x50>
 8007966:	69e3      	ldr	r3, [r4, #28]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800796e:	b9b8      	cbnz	r0, 80079a0 <_Balloc+0x68>
 8007970:	2101      	movs	r1, #1
 8007972:	fa01 f605 	lsl.w	r6, r1, r5
 8007976:	1d72      	adds	r2, r6, #5
 8007978:	0092      	lsls	r2, r2, #2
 800797a:	4620      	mov	r0, r4
 800797c:	f000 ff35 	bl	80087ea <_calloc_r>
 8007980:	b160      	cbz	r0, 800799c <_Balloc+0x64>
 8007982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007986:	e00e      	b.n	80079a6 <_Balloc+0x6e>
 8007988:	2221      	movs	r2, #33	@ 0x21
 800798a:	2104      	movs	r1, #4
 800798c:	4620      	mov	r0, r4
 800798e:	f000 ff2c 	bl	80087ea <_calloc_r>
 8007992:	69e3      	ldr	r3, [r4, #28]
 8007994:	60f0      	str	r0, [r6, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e4      	bne.n	8007966 <_Balloc+0x2e>
 800799c:	2000      	movs	r0, #0
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	6802      	ldr	r2, [r0, #0]
 80079a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079a6:	2300      	movs	r3, #0
 80079a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079ac:	e7f7      	b.n	800799e <_Balloc+0x66>
 80079ae:	bf00      	nop
 80079b0:	08008b7c 	.word	0x08008b7c
 80079b4:	08008d07 	.word	0x08008d07

080079b8 <_Bfree>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	69c6      	ldr	r6, [r0, #28]
 80079bc:	4605      	mov	r5, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	b976      	cbnz	r6, 80079e0 <_Bfree+0x28>
 80079c2:	2010      	movs	r0, #16
 80079c4:	f7ff fef0 	bl	80077a8 <malloc>
 80079c8:	4602      	mov	r2, r0
 80079ca:	61e8      	str	r0, [r5, #28]
 80079cc:	b920      	cbnz	r0, 80079d8 <_Bfree+0x20>
 80079ce:	4b09      	ldr	r3, [pc, #36]	@ (80079f4 <_Bfree+0x3c>)
 80079d0:	4809      	ldr	r0, [pc, #36]	@ (80079f8 <_Bfree+0x40>)
 80079d2:	218f      	movs	r1, #143	@ 0x8f
 80079d4:	f7fe fcf8 	bl	80063c8 <__assert_func>
 80079d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079dc:	6006      	str	r6, [r0, #0]
 80079de:	60c6      	str	r6, [r0, #12]
 80079e0:	b13c      	cbz	r4, 80079f2 <_Bfree+0x3a>
 80079e2:	69eb      	ldr	r3, [r5, #28]
 80079e4:	6862      	ldr	r2, [r4, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079ec:	6021      	str	r1, [r4, #0]
 80079ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	08008b7c 	.word	0x08008b7c
 80079f8:	08008d07 	.word	0x08008d07

080079fc <__multadd>:
 80079fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a00:	690d      	ldr	r5, [r1, #16]
 8007a02:	4607      	mov	r7, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	461e      	mov	r6, r3
 8007a08:	f101 0c14 	add.w	ip, r1, #20
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a12:	b299      	uxth	r1, r3
 8007a14:	fb02 6101 	mla	r1, r2, r1, r6
 8007a18:	0c1e      	lsrs	r6, r3, #16
 8007a1a:	0c0b      	lsrs	r3, r1, #16
 8007a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a20:	b289      	uxth	r1, r1
 8007a22:	3001      	adds	r0, #1
 8007a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a28:	4285      	cmp	r5, r0
 8007a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a32:	dcec      	bgt.n	8007a0e <__multadd+0x12>
 8007a34:	b30e      	cbz	r6, 8007a7a <__multadd+0x7e>
 8007a36:	68a3      	ldr	r3, [r4, #8]
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	dc19      	bgt.n	8007a70 <__multadd+0x74>
 8007a3c:	6861      	ldr	r1, [r4, #4]
 8007a3e:	4638      	mov	r0, r7
 8007a40:	3101      	adds	r1, #1
 8007a42:	f7ff ff79 	bl	8007938 <_Balloc>
 8007a46:	4680      	mov	r8, r0
 8007a48:	b928      	cbnz	r0, 8007a56 <__multadd+0x5a>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a80 <__multadd+0x84>)
 8007a4e:	480d      	ldr	r0, [pc, #52]	@ (8007a84 <__multadd+0x88>)
 8007a50:	21ba      	movs	r1, #186	@ 0xba
 8007a52:	f7fe fcb9 	bl	80063c8 <__assert_func>
 8007a56:	6922      	ldr	r2, [r4, #16]
 8007a58:	3202      	adds	r2, #2
 8007a5a:	f104 010c 	add.w	r1, r4, #12
 8007a5e:	0092      	lsls	r2, r2, #2
 8007a60:	300c      	adds	r0, #12
 8007a62:	f7fe fc98 	bl	8006396 <memcpy>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ffa5 	bl	80079b8 <_Bfree>
 8007a6e:	4644      	mov	r4, r8
 8007a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a74:	3501      	adds	r5, #1
 8007a76:	615e      	str	r6, [r3, #20]
 8007a78:	6125      	str	r5, [r4, #16]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	08008c96 	.word	0x08008c96
 8007a84:	08008d07 	.word	0x08008d07

08007a88 <__s2b>:
 8007a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	4615      	mov	r5, r2
 8007a90:	461f      	mov	r7, r3
 8007a92:	2209      	movs	r2, #9
 8007a94:	3308      	adds	r3, #8
 8007a96:	4606      	mov	r6, r0
 8007a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	db09      	blt.n	8007ab8 <__s2b+0x30>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff ff47 	bl	8007938 <_Balloc>
 8007aaa:	b940      	cbnz	r0, 8007abe <__s2b+0x36>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b19      	ldr	r3, [pc, #100]	@ (8007b14 <__s2b+0x8c>)
 8007ab0:	4819      	ldr	r0, [pc, #100]	@ (8007b18 <__s2b+0x90>)
 8007ab2:	21d3      	movs	r1, #211	@ 0xd3
 8007ab4:	f7fe fc88 	bl	80063c8 <__assert_func>
 8007ab8:	0052      	lsls	r2, r2, #1
 8007aba:	3101      	adds	r1, #1
 8007abc:	e7f0      	b.n	8007aa0 <__s2b+0x18>
 8007abe:	9b08      	ldr	r3, [sp, #32]
 8007ac0:	6143      	str	r3, [r0, #20]
 8007ac2:	2d09      	cmp	r5, #9
 8007ac4:	f04f 0301 	mov.w	r3, #1
 8007ac8:	6103      	str	r3, [r0, #16]
 8007aca:	dd16      	ble.n	8007afa <__s2b+0x72>
 8007acc:	f104 0909 	add.w	r9, r4, #9
 8007ad0:	46c8      	mov	r8, r9
 8007ad2:	442c      	add	r4, r5
 8007ad4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ad8:	4601      	mov	r1, r0
 8007ada:	3b30      	subs	r3, #48	@ 0x30
 8007adc:	220a      	movs	r2, #10
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7ff ff8c 	bl	80079fc <__multadd>
 8007ae4:	45a0      	cmp	r8, r4
 8007ae6:	d1f5      	bne.n	8007ad4 <__s2b+0x4c>
 8007ae8:	f1a5 0408 	sub.w	r4, r5, #8
 8007aec:	444c      	add	r4, r9
 8007aee:	1b2d      	subs	r5, r5, r4
 8007af0:	1963      	adds	r3, r4, r5
 8007af2:	42bb      	cmp	r3, r7
 8007af4:	db04      	blt.n	8007b00 <__s2b+0x78>
 8007af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afa:	340a      	adds	r4, #10
 8007afc:	2509      	movs	r5, #9
 8007afe:	e7f6      	b.n	8007aee <__s2b+0x66>
 8007b00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b04:	4601      	mov	r1, r0
 8007b06:	3b30      	subs	r3, #48	@ 0x30
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ff76 	bl	80079fc <__multadd>
 8007b10:	e7ee      	b.n	8007af0 <__s2b+0x68>
 8007b12:	bf00      	nop
 8007b14:	08008c96 	.word	0x08008c96
 8007b18:	08008d07 	.word	0x08008d07

08007b1c <__hi0bits>:
 8007b1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b20:	4603      	mov	r3, r0
 8007b22:	bf36      	itet	cc
 8007b24:	0403      	lslcc	r3, r0, #16
 8007b26:	2000      	movcs	r0, #0
 8007b28:	2010      	movcc	r0, #16
 8007b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b2e:	bf3c      	itt	cc
 8007b30:	021b      	lslcc	r3, r3, #8
 8007b32:	3008      	addcc	r0, #8
 8007b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b38:	bf3c      	itt	cc
 8007b3a:	011b      	lslcc	r3, r3, #4
 8007b3c:	3004      	addcc	r0, #4
 8007b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b42:	bf3c      	itt	cc
 8007b44:	009b      	lslcc	r3, r3, #2
 8007b46:	3002      	addcc	r0, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db05      	blt.n	8007b58 <__hi0bits+0x3c>
 8007b4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b50:	f100 0001 	add.w	r0, r0, #1
 8007b54:	bf08      	it	eq
 8007b56:	2020      	moveq	r0, #32
 8007b58:	4770      	bx	lr

08007b5a <__lo0bits>:
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f013 0007 	ands.w	r0, r3, #7
 8007b62:	d00b      	beq.n	8007b7c <__lo0bits+0x22>
 8007b64:	07d9      	lsls	r1, r3, #31
 8007b66:	d421      	bmi.n	8007bac <__lo0bits+0x52>
 8007b68:	0798      	lsls	r0, r3, #30
 8007b6a:	bf49      	itett	mi
 8007b6c:	085b      	lsrmi	r3, r3, #1
 8007b6e:	089b      	lsrpl	r3, r3, #2
 8007b70:	2001      	movmi	r0, #1
 8007b72:	6013      	strmi	r3, [r2, #0]
 8007b74:	bf5c      	itt	pl
 8007b76:	6013      	strpl	r3, [r2, #0]
 8007b78:	2002      	movpl	r0, #2
 8007b7a:	4770      	bx	lr
 8007b7c:	b299      	uxth	r1, r3
 8007b7e:	b909      	cbnz	r1, 8007b84 <__lo0bits+0x2a>
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	2010      	movs	r0, #16
 8007b84:	b2d9      	uxtb	r1, r3
 8007b86:	b909      	cbnz	r1, 8007b8c <__lo0bits+0x32>
 8007b88:	3008      	adds	r0, #8
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	0719      	lsls	r1, r3, #28
 8007b8e:	bf04      	itt	eq
 8007b90:	091b      	lsreq	r3, r3, #4
 8007b92:	3004      	addeq	r0, #4
 8007b94:	0799      	lsls	r1, r3, #30
 8007b96:	bf04      	itt	eq
 8007b98:	089b      	lsreq	r3, r3, #2
 8007b9a:	3002      	addeq	r0, #2
 8007b9c:	07d9      	lsls	r1, r3, #31
 8007b9e:	d403      	bmi.n	8007ba8 <__lo0bits+0x4e>
 8007ba0:	085b      	lsrs	r3, r3, #1
 8007ba2:	f100 0001 	add.w	r0, r0, #1
 8007ba6:	d003      	beq.n	8007bb0 <__lo0bits+0x56>
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	4770      	bx	lr
 8007bac:	2000      	movs	r0, #0
 8007bae:	4770      	bx	lr
 8007bb0:	2020      	movs	r0, #32
 8007bb2:	4770      	bx	lr

08007bb4 <__i2b>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	2101      	movs	r1, #1
 8007bba:	f7ff febd 	bl	8007938 <_Balloc>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <__i2b+0x1a>
 8007bc2:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <__i2b+0x24>)
 8007bc4:	4805      	ldr	r0, [pc, #20]	@ (8007bdc <__i2b+0x28>)
 8007bc6:	f240 1145 	movw	r1, #325	@ 0x145
 8007bca:	f7fe fbfd 	bl	80063c8 <__assert_func>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	6144      	str	r4, [r0, #20]
 8007bd2:	6103      	str	r3, [r0, #16]
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08008c96 	.word	0x08008c96
 8007bdc:	08008d07 	.word	0x08008d07

08007be0 <__multiply>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	4614      	mov	r4, r2
 8007be6:	690a      	ldr	r2, [r1, #16]
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	bfa8      	it	ge
 8007bee:	4623      	movge	r3, r4
 8007bf0:	460f      	mov	r7, r1
 8007bf2:	bfa4      	itt	ge
 8007bf4:	460c      	movge	r4, r1
 8007bf6:	461f      	movge	r7, r3
 8007bf8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c00:	68a3      	ldr	r3, [r4, #8]
 8007c02:	6861      	ldr	r1, [r4, #4]
 8007c04:	eb0a 0609 	add.w	r6, sl, r9
 8007c08:	42b3      	cmp	r3, r6
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	bfb8      	it	lt
 8007c0e:	3101      	addlt	r1, #1
 8007c10:	f7ff fe92 	bl	8007938 <_Balloc>
 8007c14:	b930      	cbnz	r0, 8007c24 <__multiply+0x44>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4b44      	ldr	r3, [pc, #272]	@ (8007d2c <__multiply+0x14c>)
 8007c1a:	4845      	ldr	r0, [pc, #276]	@ (8007d30 <__multiply+0x150>)
 8007c1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c20:	f7fe fbd2 	bl	80063c8 <__assert_func>
 8007c24:	f100 0514 	add.w	r5, r0, #20
 8007c28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4543      	cmp	r3, r8
 8007c32:	d321      	bcc.n	8007c78 <__multiply+0x98>
 8007c34:	f107 0114 	add.w	r1, r7, #20
 8007c38:	f104 0214 	add.w	r2, r4, #20
 8007c3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c44:	9302      	str	r3, [sp, #8]
 8007c46:	1b13      	subs	r3, r2, r4
 8007c48:	3b15      	subs	r3, #21
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	3304      	adds	r3, #4
 8007c50:	f104 0715 	add.w	r7, r4, #21
 8007c54:	42ba      	cmp	r2, r7
 8007c56:	bf38      	it	cc
 8007c58:	2304      	movcc	r3, #4
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	9b02      	ldr	r3, [sp, #8]
 8007c5e:	9103      	str	r1, [sp, #12]
 8007c60:	428b      	cmp	r3, r1
 8007c62:	d80c      	bhi.n	8007c7e <__multiply+0x9e>
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	dd03      	ble.n	8007c70 <__multiply+0x90>
 8007c68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05b      	beq.n	8007d28 <__multiply+0x148>
 8007c70:	6106      	str	r6, [r0, #16]
 8007c72:	b005      	add	sp, #20
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	f843 2b04 	str.w	r2, [r3], #4
 8007c7c:	e7d8      	b.n	8007c30 <__multiply+0x50>
 8007c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c82:	f1ba 0f00 	cmp.w	sl, #0
 8007c86:	d024      	beq.n	8007cd2 <__multiply+0xf2>
 8007c88:	f104 0e14 	add.w	lr, r4, #20
 8007c8c:	46a9      	mov	r9, r5
 8007c8e:	f04f 0c00 	mov.w	ip, #0
 8007c92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c96:	f8d9 3000 	ldr.w	r3, [r9]
 8007c9a:	fa1f fb87 	uxth.w	fp, r7
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ca4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ca8:	f8d9 7000 	ldr.w	r7, [r9]
 8007cac:	4463      	add	r3, ip
 8007cae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cb2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cc0:	4572      	cmp	r2, lr
 8007cc2:	f849 3b04 	str.w	r3, [r9], #4
 8007cc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cca:	d8e2      	bhi.n	8007c92 <__multiply+0xb2>
 8007ccc:	9b01      	ldr	r3, [sp, #4]
 8007cce:	f845 c003 	str.w	ip, [r5, r3]
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cd8:	3104      	adds	r1, #4
 8007cda:	f1b9 0f00 	cmp.w	r9, #0
 8007cde:	d021      	beq.n	8007d24 <__multiply+0x144>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	f104 0c14 	add.w	ip, r4, #20
 8007ce6:	46ae      	mov	lr, r5
 8007ce8:	f04f 0a00 	mov.w	sl, #0
 8007cec:	f8bc b000 	ldrh.w	fp, [ip]
 8007cf0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cf4:	fb09 770b 	mla	r7, r9, fp, r7
 8007cf8:	4457      	add	r7, sl
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d00:	f84e 3b04 	str.w	r3, [lr], #4
 8007d04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d0c:	f8be 3000 	ldrh.w	r3, [lr]
 8007d10:	fb09 330a 	mla	r3, r9, sl, r3
 8007d14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d18:	4562      	cmp	r2, ip
 8007d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d1e:	d8e5      	bhi.n	8007cec <__multiply+0x10c>
 8007d20:	9f01      	ldr	r7, [sp, #4]
 8007d22:	51eb      	str	r3, [r5, r7]
 8007d24:	3504      	adds	r5, #4
 8007d26:	e799      	b.n	8007c5c <__multiply+0x7c>
 8007d28:	3e01      	subs	r6, #1
 8007d2a:	e79b      	b.n	8007c64 <__multiply+0x84>
 8007d2c:	08008c96 	.word	0x08008c96
 8007d30:	08008d07 	.word	0x08008d07

08007d34 <__pow5mult>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	4615      	mov	r5, r2
 8007d3a:	f012 0203 	ands.w	r2, r2, #3
 8007d3e:	4607      	mov	r7, r0
 8007d40:	460e      	mov	r6, r1
 8007d42:	d007      	beq.n	8007d54 <__pow5mult+0x20>
 8007d44:	4c25      	ldr	r4, [pc, #148]	@ (8007ddc <__pow5mult+0xa8>)
 8007d46:	3a01      	subs	r2, #1
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d4e:	f7ff fe55 	bl	80079fc <__multadd>
 8007d52:	4606      	mov	r6, r0
 8007d54:	10ad      	asrs	r5, r5, #2
 8007d56:	d03d      	beq.n	8007dd4 <__pow5mult+0xa0>
 8007d58:	69fc      	ldr	r4, [r7, #28]
 8007d5a:	b97c      	cbnz	r4, 8007d7c <__pow5mult+0x48>
 8007d5c:	2010      	movs	r0, #16
 8007d5e:	f7ff fd23 	bl	80077a8 <malloc>
 8007d62:	4602      	mov	r2, r0
 8007d64:	61f8      	str	r0, [r7, #28]
 8007d66:	b928      	cbnz	r0, 8007d74 <__pow5mult+0x40>
 8007d68:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <__pow5mult+0xac>)
 8007d6a:	481e      	ldr	r0, [pc, #120]	@ (8007de4 <__pow5mult+0xb0>)
 8007d6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d70:	f7fe fb2a 	bl	80063c8 <__assert_func>
 8007d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d78:	6004      	str	r4, [r0, #0]
 8007d7a:	60c4      	str	r4, [r0, #12]
 8007d7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d84:	b94c      	cbnz	r4, 8007d9a <__pow5mult+0x66>
 8007d86:	f240 2171 	movw	r1, #625	@ 0x271
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	f7ff ff12 	bl	8007bb4 <__i2b>
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d96:	4604      	mov	r4, r0
 8007d98:	6003      	str	r3, [r0, #0]
 8007d9a:	f04f 0900 	mov.w	r9, #0
 8007d9e:	07eb      	lsls	r3, r5, #31
 8007da0:	d50a      	bpl.n	8007db8 <__pow5mult+0x84>
 8007da2:	4631      	mov	r1, r6
 8007da4:	4622      	mov	r2, r4
 8007da6:	4638      	mov	r0, r7
 8007da8:	f7ff ff1a 	bl	8007be0 <__multiply>
 8007dac:	4631      	mov	r1, r6
 8007dae:	4680      	mov	r8, r0
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff fe01 	bl	80079b8 <_Bfree>
 8007db6:	4646      	mov	r6, r8
 8007db8:	106d      	asrs	r5, r5, #1
 8007dba:	d00b      	beq.n	8007dd4 <__pow5mult+0xa0>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	b938      	cbnz	r0, 8007dd0 <__pow5mult+0x9c>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7ff ff0b 	bl	8007be0 <__multiply>
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	f8c0 9000 	str.w	r9, [r0]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	e7e4      	b.n	8007d9e <__pow5mult+0x6a>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	bf00      	nop
 8007ddc:	08008d60 	.word	0x08008d60
 8007de0:	08008b7c 	.word	0x08008b7c
 8007de4:	08008d07 	.word	0x08008d07

08007de8 <__lshift>:
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	460c      	mov	r4, r1
 8007dee:	6849      	ldr	r1, [r1, #4]
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	4607      	mov	r7, r0
 8007dfa:	4691      	mov	r9, r2
 8007dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e00:	f108 0601 	add.w	r6, r8, #1
 8007e04:	42b3      	cmp	r3, r6
 8007e06:	db0b      	blt.n	8007e20 <__lshift+0x38>
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff fd95 	bl	8007938 <_Balloc>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b948      	cbnz	r0, 8007e26 <__lshift+0x3e>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b28      	ldr	r3, [pc, #160]	@ (8007eb8 <__lshift+0xd0>)
 8007e16:	4829      	ldr	r0, [pc, #164]	@ (8007ebc <__lshift+0xd4>)
 8007e18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e1c:	f7fe fad4 	bl	80063c8 <__assert_func>
 8007e20:	3101      	adds	r1, #1
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	e7ee      	b.n	8007e04 <__lshift+0x1c>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f100 0114 	add.w	r1, r0, #20
 8007e2c:	f100 0210 	add.w	r2, r0, #16
 8007e30:	4618      	mov	r0, r3
 8007e32:	4553      	cmp	r3, sl
 8007e34:	db33      	blt.n	8007e9e <__lshift+0xb6>
 8007e36:	6920      	ldr	r0, [r4, #16]
 8007e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e3c:	f104 0314 	add.w	r3, r4, #20
 8007e40:	f019 091f 	ands.w	r9, r9, #31
 8007e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e4c:	d02b      	beq.n	8007ea6 <__lshift+0xbe>
 8007e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e52:	468a      	mov	sl, r1
 8007e54:	2200      	movs	r2, #0
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	fa00 f009 	lsl.w	r0, r0, r9
 8007e5c:	4310      	orrs	r0, r2
 8007e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8007e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e66:	459c      	cmp	ip, r3
 8007e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e6c:	d8f3      	bhi.n	8007e56 <__lshift+0x6e>
 8007e6e:	ebac 0304 	sub.w	r3, ip, r4
 8007e72:	3b15      	subs	r3, #21
 8007e74:	f023 0303 	bic.w	r3, r3, #3
 8007e78:	3304      	adds	r3, #4
 8007e7a:	f104 0015 	add.w	r0, r4, #21
 8007e7e:	4584      	cmp	ip, r0
 8007e80:	bf38      	it	cc
 8007e82:	2304      	movcc	r3, #4
 8007e84:	50ca      	str	r2, [r1, r3]
 8007e86:	b10a      	cbz	r2, 8007e8c <__lshift+0xa4>
 8007e88:	f108 0602 	add.w	r6, r8, #2
 8007e8c:	3e01      	subs	r6, #1
 8007e8e:	4638      	mov	r0, r7
 8007e90:	612e      	str	r6, [r5, #16]
 8007e92:	4621      	mov	r1, r4
 8007e94:	f7ff fd90 	bl	80079b8 <_Bfree>
 8007e98:	4628      	mov	r0, r5
 8007e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	e7c5      	b.n	8007e32 <__lshift+0x4a>
 8007ea6:	3904      	subs	r1, #4
 8007ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eb0:	459c      	cmp	ip, r3
 8007eb2:	d8f9      	bhi.n	8007ea8 <__lshift+0xc0>
 8007eb4:	e7ea      	b.n	8007e8c <__lshift+0xa4>
 8007eb6:	bf00      	nop
 8007eb8:	08008c96 	.word	0x08008c96
 8007ebc:	08008d07 	.word	0x08008d07

08007ec0 <__mcmp>:
 8007ec0:	690a      	ldr	r2, [r1, #16]
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6900      	ldr	r0, [r0, #16]
 8007ec6:	1a80      	subs	r0, r0, r2
 8007ec8:	b530      	push	{r4, r5, lr}
 8007eca:	d10e      	bne.n	8007eea <__mcmp+0x2a>
 8007ecc:	3314      	adds	r3, #20
 8007ece:	3114      	adds	r1, #20
 8007ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ee0:	4295      	cmp	r5, r2
 8007ee2:	d003      	beq.n	8007eec <__mcmp+0x2c>
 8007ee4:	d205      	bcs.n	8007ef2 <__mcmp+0x32>
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	bd30      	pop	{r4, r5, pc}
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d3f3      	bcc.n	8007ed8 <__mcmp+0x18>
 8007ef0:	e7fb      	b.n	8007eea <__mcmp+0x2a>
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7f9      	b.n	8007eea <__mcmp+0x2a>
	...

08007ef8 <__mdiff>:
 8007ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	4689      	mov	r9, r1
 8007efe:	4606      	mov	r6, r0
 8007f00:	4611      	mov	r1, r2
 8007f02:	4648      	mov	r0, r9
 8007f04:	4614      	mov	r4, r2
 8007f06:	f7ff ffdb 	bl	8007ec0 <__mcmp>
 8007f0a:	1e05      	subs	r5, r0, #0
 8007f0c:	d112      	bne.n	8007f34 <__mdiff+0x3c>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff fd11 	bl	8007938 <_Balloc>
 8007f16:	4602      	mov	r2, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <__mdiff+0x2e>
 8007f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008018 <__mdiff+0x120>)
 8007f1c:	f240 2137 	movw	r1, #567	@ 0x237
 8007f20:	483e      	ldr	r0, [pc, #248]	@ (800801c <__mdiff+0x124>)
 8007f22:	f7fe fa51 	bl	80063c8 <__assert_func>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	b003      	add	sp, #12
 8007f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	bfbc      	itt	lt
 8007f36:	464b      	movlt	r3, r9
 8007f38:	46a1      	movlt	r9, r4
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f40:	bfba      	itte	lt
 8007f42:	461c      	movlt	r4, r3
 8007f44:	2501      	movlt	r5, #1
 8007f46:	2500      	movge	r5, #0
 8007f48:	f7ff fcf6 	bl	8007938 <_Balloc>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	b918      	cbnz	r0, 8007f58 <__mdiff+0x60>
 8007f50:	4b31      	ldr	r3, [pc, #196]	@ (8008018 <__mdiff+0x120>)
 8007f52:	f240 2145 	movw	r1, #581	@ 0x245
 8007f56:	e7e3      	b.n	8007f20 <__mdiff+0x28>
 8007f58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f5c:	6926      	ldr	r6, [r4, #16]
 8007f5e:	60c5      	str	r5, [r0, #12]
 8007f60:	f109 0310 	add.w	r3, r9, #16
 8007f64:	f109 0514 	add.w	r5, r9, #20
 8007f68:	f104 0e14 	add.w	lr, r4, #20
 8007f6c:	f100 0b14 	add.w	fp, r0, #20
 8007f70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	46d9      	mov	r9, fp
 8007f7c:	f04f 0c00 	mov.w	ip, #0
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	fa1f f38a 	uxth.w	r3, sl
 8007f90:	4619      	mov	r1, r3
 8007f92:	b283      	uxth	r3, r0
 8007f94:	1acb      	subs	r3, r1, r3
 8007f96:	0c00      	lsrs	r0, r0, #16
 8007f98:	4463      	add	r3, ip
 8007f9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fa8:	4576      	cmp	r6, lr
 8007faa:	f849 3b04 	str.w	r3, [r9], #4
 8007fae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fb2:	d8e5      	bhi.n	8007f80 <__mdiff+0x88>
 8007fb4:	1b33      	subs	r3, r6, r4
 8007fb6:	3b15      	subs	r3, #21
 8007fb8:	f023 0303 	bic.w	r3, r3, #3
 8007fbc:	3415      	adds	r4, #21
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	42a6      	cmp	r6, r4
 8007fc2:	bf38      	it	cc
 8007fc4:	2304      	movcc	r3, #4
 8007fc6:	441d      	add	r5, r3
 8007fc8:	445b      	add	r3, fp
 8007fca:	461e      	mov	r6, r3
 8007fcc:	462c      	mov	r4, r5
 8007fce:	4544      	cmp	r4, r8
 8007fd0:	d30e      	bcc.n	8007ff0 <__mdiff+0xf8>
 8007fd2:	f108 0103 	add.w	r1, r8, #3
 8007fd6:	1b49      	subs	r1, r1, r5
 8007fd8:	f021 0103 	bic.w	r1, r1, #3
 8007fdc:	3d03      	subs	r5, #3
 8007fde:	45a8      	cmp	r8, r5
 8007fe0:	bf38      	it	cc
 8007fe2:	2100      	movcc	r1, #0
 8007fe4:	440b      	add	r3, r1
 8007fe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fea:	b191      	cbz	r1, 8008012 <__mdiff+0x11a>
 8007fec:	6117      	str	r7, [r2, #16]
 8007fee:	e79d      	b.n	8007f2c <__mdiff+0x34>
 8007ff0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ff4:	46e6      	mov	lr, ip
 8007ff6:	0c08      	lsrs	r0, r1, #16
 8007ff8:	fa1c fc81 	uxtah	ip, ip, r1
 8007ffc:	4471      	add	r1, lr
 8007ffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008002:	b289      	uxth	r1, r1
 8008004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008008:	f846 1b04 	str.w	r1, [r6], #4
 800800c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008010:	e7dd      	b.n	8007fce <__mdiff+0xd6>
 8008012:	3f01      	subs	r7, #1
 8008014:	e7e7      	b.n	8007fe6 <__mdiff+0xee>
 8008016:	bf00      	nop
 8008018:	08008c96 	.word	0x08008c96
 800801c:	08008d07 	.word	0x08008d07

08008020 <__ulp>:
 8008020:	b082      	sub	sp, #8
 8008022:	ed8d 0b00 	vstr	d0, [sp]
 8008026:	9a01      	ldr	r2, [sp, #4]
 8008028:	4b0f      	ldr	r3, [pc, #60]	@ (8008068 <__ulp+0x48>)
 800802a:	4013      	ands	r3, r2
 800802c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008030:	2b00      	cmp	r3, #0
 8008032:	dc08      	bgt.n	8008046 <__ulp+0x26>
 8008034:	425b      	negs	r3, r3
 8008036:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800803a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800803e:	da04      	bge.n	800804a <__ulp+0x2a>
 8008040:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008044:	4113      	asrs	r3, r2
 8008046:	2200      	movs	r2, #0
 8008048:	e008      	b.n	800805c <__ulp+0x3c>
 800804a:	f1a2 0314 	sub.w	r3, r2, #20
 800804e:	2b1e      	cmp	r3, #30
 8008050:	bfda      	itte	le
 8008052:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008056:	40da      	lsrle	r2, r3
 8008058:	2201      	movgt	r2, #1
 800805a:	2300      	movs	r3, #0
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	ec41 0b10 	vmov	d0, r0, r1
 8008064:	b002      	add	sp, #8
 8008066:	4770      	bx	lr
 8008068:	7ff00000 	.word	0x7ff00000

0800806c <__b2d>:
 800806c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008070:	6906      	ldr	r6, [r0, #16]
 8008072:	f100 0814 	add.w	r8, r0, #20
 8008076:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800807a:	1f37      	subs	r7, r6, #4
 800807c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008080:	4610      	mov	r0, r2
 8008082:	f7ff fd4b 	bl	8007b1c <__hi0bits>
 8008086:	f1c0 0320 	rsb	r3, r0, #32
 800808a:	280a      	cmp	r0, #10
 800808c:	600b      	str	r3, [r1, #0]
 800808e:	491b      	ldr	r1, [pc, #108]	@ (80080fc <__b2d+0x90>)
 8008090:	dc15      	bgt.n	80080be <__b2d+0x52>
 8008092:	f1c0 0c0b 	rsb	ip, r0, #11
 8008096:	fa22 f30c 	lsr.w	r3, r2, ip
 800809a:	45b8      	cmp	r8, r7
 800809c:	ea43 0501 	orr.w	r5, r3, r1
 80080a0:	bf34      	ite	cc
 80080a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080a6:	2300      	movcs	r3, #0
 80080a8:	3015      	adds	r0, #21
 80080aa:	fa02 f000 	lsl.w	r0, r2, r0
 80080ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80080b2:	4303      	orrs	r3, r0
 80080b4:	461c      	mov	r4, r3
 80080b6:	ec45 4b10 	vmov	d0, r4, r5
 80080ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080be:	45b8      	cmp	r8, r7
 80080c0:	bf3a      	itte	cc
 80080c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80080ca:	2300      	movcs	r3, #0
 80080cc:	380b      	subs	r0, #11
 80080ce:	d012      	beq.n	80080f6 <__b2d+0x8a>
 80080d0:	f1c0 0120 	rsb	r1, r0, #32
 80080d4:	fa23 f401 	lsr.w	r4, r3, r1
 80080d8:	4082      	lsls	r2, r0
 80080da:	4322      	orrs	r2, r4
 80080dc:	4547      	cmp	r7, r8
 80080de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80080e2:	bf8c      	ite	hi
 80080e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80080e8:	2200      	movls	r2, #0
 80080ea:	4083      	lsls	r3, r0
 80080ec:	40ca      	lsrs	r2, r1
 80080ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80080f2:	4313      	orrs	r3, r2
 80080f4:	e7de      	b.n	80080b4 <__b2d+0x48>
 80080f6:	ea42 0501 	orr.w	r5, r2, r1
 80080fa:	e7db      	b.n	80080b4 <__b2d+0x48>
 80080fc:	3ff00000 	.word	0x3ff00000

08008100 <__d2b>:
 8008100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008104:	460f      	mov	r7, r1
 8008106:	2101      	movs	r1, #1
 8008108:	ec59 8b10 	vmov	r8, r9, d0
 800810c:	4616      	mov	r6, r2
 800810e:	f7ff fc13 	bl	8007938 <_Balloc>
 8008112:	4604      	mov	r4, r0
 8008114:	b930      	cbnz	r0, 8008124 <__d2b+0x24>
 8008116:	4602      	mov	r2, r0
 8008118:	4b23      	ldr	r3, [pc, #140]	@ (80081a8 <__d2b+0xa8>)
 800811a:	4824      	ldr	r0, [pc, #144]	@ (80081ac <__d2b+0xac>)
 800811c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008120:	f7fe f952 	bl	80063c8 <__assert_func>
 8008124:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800812c:	b10d      	cbz	r5, 8008132 <__d2b+0x32>
 800812e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	f1b8 0300 	subs.w	r3, r8, #0
 8008138:	d023      	beq.n	8008182 <__d2b+0x82>
 800813a:	4668      	mov	r0, sp
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	f7ff fd0c 	bl	8007b5a <__lo0bits>
 8008142:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008146:	b1d0      	cbz	r0, 800817e <__d2b+0x7e>
 8008148:	f1c0 0320 	rsb	r3, r0, #32
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	430b      	orrs	r3, r1
 8008152:	40c2      	lsrs	r2, r0
 8008154:	6163      	str	r3, [r4, #20]
 8008156:	9201      	str	r2, [sp, #4]
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	61a3      	str	r3, [r4, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf0c      	ite	eq
 8008160:	2201      	moveq	r2, #1
 8008162:	2202      	movne	r2, #2
 8008164:	6122      	str	r2, [r4, #16]
 8008166:	b1a5      	cbz	r5, 8008192 <__d2b+0x92>
 8008168:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800816c:	4405      	add	r5, r0
 800816e:	603d      	str	r5, [r7, #0]
 8008170:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008174:	6030      	str	r0, [r6, #0]
 8008176:	4620      	mov	r0, r4
 8008178:	b003      	add	sp, #12
 800817a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800817e:	6161      	str	r1, [r4, #20]
 8008180:	e7ea      	b.n	8008158 <__d2b+0x58>
 8008182:	a801      	add	r0, sp, #4
 8008184:	f7ff fce9 	bl	8007b5a <__lo0bits>
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	6163      	str	r3, [r4, #20]
 800818c:	3020      	adds	r0, #32
 800818e:	2201      	movs	r2, #1
 8008190:	e7e8      	b.n	8008164 <__d2b+0x64>
 8008192:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008196:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800819a:	6038      	str	r0, [r7, #0]
 800819c:	6918      	ldr	r0, [r3, #16]
 800819e:	f7ff fcbd 	bl	8007b1c <__hi0bits>
 80081a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081a6:	e7e5      	b.n	8008174 <__d2b+0x74>
 80081a8:	08008c96 	.word	0x08008c96
 80081ac:	08008d07 	.word	0x08008d07

080081b0 <__ratio>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	b085      	sub	sp, #20
 80081b6:	e9cd 1000 	strd	r1, r0, [sp]
 80081ba:	a902      	add	r1, sp, #8
 80081bc:	f7ff ff56 	bl	800806c <__b2d>
 80081c0:	9800      	ldr	r0, [sp, #0]
 80081c2:	a903      	add	r1, sp, #12
 80081c4:	ec55 4b10 	vmov	r4, r5, d0
 80081c8:	f7ff ff50 	bl	800806c <__b2d>
 80081cc:	9b01      	ldr	r3, [sp, #4]
 80081ce:	6919      	ldr	r1, [r3, #16]
 80081d0:	9b00      	ldr	r3, [sp, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	1ac9      	subs	r1, r1, r3
 80081d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	ec5b ab10 	vmov	sl, fp, d0
 80081e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bfce      	itee	gt
 80081e8:	462a      	movgt	r2, r5
 80081ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081ee:	465a      	movle	r2, fp
 80081f0:	462f      	mov	r7, r5
 80081f2:	46d9      	mov	r9, fp
 80081f4:	bfcc      	ite	gt
 80081f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80081fe:	464b      	mov	r3, r9
 8008200:	4652      	mov	r2, sl
 8008202:	4620      	mov	r0, r4
 8008204:	4639      	mov	r1, r7
 8008206:	f7f8 fb39 	bl	800087c <__aeabi_ddiv>
 800820a:	ec41 0b10 	vmov	d0, r0, r1
 800820e:	b005      	add	sp, #20
 8008210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008214 <__copybits>:
 8008214:	3901      	subs	r1, #1
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	1149      	asrs	r1, r1, #5
 800821a:	6914      	ldr	r4, [r2, #16]
 800821c:	3101      	adds	r1, #1
 800821e:	f102 0314 	add.w	r3, r2, #20
 8008222:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008226:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800822a:	1f05      	subs	r5, r0, #4
 800822c:	42a3      	cmp	r3, r4
 800822e:	d30c      	bcc.n	800824a <__copybits+0x36>
 8008230:	1aa3      	subs	r3, r4, r2
 8008232:	3b11      	subs	r3, #17
 8008234:	f023 0303 	bic.w	r3, r3, #3
 8008238:	3211      	adds	r2, #17
 800823a:	42a2      	cmp	r2, r4
 800823c:	bf88      	it	hi
 800823e:	2300      	movhi	r3, #0
 8008240:	4418      	add	r0, r3
 8008242:	2300      	movs	r3, #0
 8008244:	4288      	cmp	r0, r1
 8008246:	d305      	bcc.n	8008254 <__copybits+0x40>
 8008248:	bd70      	pop	{r4, r5, r6, pc}
 800824a:	f853 6b04 	ldr.w	r6, [r3], #4
 800824e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008252:	e7eb      	b.n	800822c <__copybits+0x18>
 8008254:	f840 3b04 	str.w	r3, [r0], #4
 8008258:	e7f4      	b.n	8008244 <__copybits+0x30>

0800825a <__any_on>:
 800825a:	f100 0214 	add.w	r2, r0, #20
 800825e:	6900      	ldr	r0, [r0, #16]
 8008260:	114b      	asrs	r3, r1, #5
 8008262:	4298      	cmp	r0, r3
 8008264:	b510      	push	{r4, lr}
 8008266:	db11      	blt.n	800828c <__any_on+0x32>
 8008268:	dd0a      	ble.n	8008280 <__any_on+0x26>
 800826a:	f011 011f 	ands.w	r1, r1, #31
 800826e:	d007      	beq.n	8008280 <__any_on+0x26>
 8008270:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008274:	fa24 f001 	lsr.w	r0, r4, r1
 8008278:	fa00 f101 	lsl.w	r1, r0, r1
 800827c:	428c      	cmp	r4, r1
 800827e:	d10b      	bne.n	8008298 <__any_on+0x3e>
 8008280:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008284:	4293      	cmp	r3, r2
 8008286:	d803      	bhi.n	8008290 <__any_on+0x36>
 8008288:	2000      	movs	r0, #0
 800828a:	bd10      	pop	{r4, pc}
 800828c:	4603      	mov	r3, r0
 800828e:	e7f7      	b.n	8008280 <__any_on+0x26>
 8008290:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008294:	2900      	cmp	r1, #0
 8008296:	d0f5      	beq.n	8008284 <__any_on+0x2a>
 8008298:	2001      	movs	r0, #1
 800829a:	e7f6      	b.n	800828a <__any_on+0x30>

0800829c <__ascii_wctomb>:
 800829c:	4603      	mov	r3, r0
 800829e:	4608      	mov	r0, r1
 80082a0:	b141      	cbz	r1, 80082b4 <__ascii_wctomb+0x18>
 80082a2:	2aff      	cmp	r2, #255	@ 0xff
 80082a4:	d904      	bls.n	80082b0 <__ascii_wctomb+0x14>
 80082a6:	228a      	movs	r2, #138	@ 0x8a
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	4770      	bx	lr
 80082b0:	700a      	strb	r2, [r1, #0]
 80082b2:	2001      	movs	r0, #1
 80082b4:	4770      	bx	lr

080082b6 <__sfputc_r>:
 80082b6:	6893      	ldr	r3, [r2, #8]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	b410      	push	{r4}
 80082be:	6093      	str	r3, [r2, #8]
 80082c0:	da08      	bge.n	80082d4 <__sfputc_r+0x1e>
 80082c2:	6994      	ldr	r4, [r2, #24]
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	db01      	blt.n	80082cc <__sfputc_r+0x16>
 80082c8:	290a      	cmp	r1, #10
 80082ca:	d103      	bne.n	80082d4 <__sfputc_r+0x1e>
 80082cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d0:	f7fd bedf 	b.w	8006092 <__swbuf_r>
 80082d4:	6813      	ldr	r3, [r2, #0]
 80082d6:	1c58      	adds	r0, r3, #1
 80082d8:	6010      	str	r0, [r2, #0]
 80082da:	7019      	strb	r1, [r3, #0]
 80082dc:	4608      	mov	r0, r1
 80082de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <__sfputs_r>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	4614      	mov	r4, r2
 80082ec:	18d5      	adds	r5, r2, r3
 80082ee:	42ac      	cmp	r4, r5
 80082f0:	d101      	bne.n	80082f6 <__sfputs_r+0x12>
 80082f2:	2000      	movs	r0, #0
 80082f4:	e007      	b.n	8008306 <__sfputs_r+0x22>
 80082f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fa:	463a      	mov	r2, r7
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff ffda 	bl	80082b6 <__sfputc_r>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d1f3      	bne.n	80082ee <__sfputs_r+0xa>
 8008306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008308 <_vfiprintf_r>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	460d      	mov	r5, r1
 800830e:	b09d      	sub	sp, #116	@ 0x74
 8008310:	4614      	mov	r4, r2
 8008312:	4698      	mov	r8, r3
 8008314:	4606      	mov	r6, r0
 8008316:	b118      	cbz	r0, 8008320 <_vfiprintf_r+0x18>
 8008318:	6a03      	ldr	r3, [r0, #32]
 800831a:	b90b      	cbnz	r3, 8008320 <_vfiprintf_r+0x18>
 800831c:	f7fd fdd0 	bl	8005ec0 <__sinit>
 8008320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008322:	07d9      	lsls	r1, r3, #31
 8008324:	d405      	bmi.n	8008332 <_vfiprintf_r+0x2a>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	059a      	lsls	r2, r3, #22
 800832a:	d402      	bmi.n	8008332 <_vfiprintf_r+0x2a>
 800832c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800832e:	f7fe f830 	bl	8006392 <__retarget_lock_acquire_recursive>
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	071b      	lsls	r3, r3, #28
 8008336:	d501      	bpl.n	800833c <_vfiprintf_r+0x34>
 8008338:	692b      	ldr	r3, [r5, #16]
 800833a:	b99b      	cbnz	r3, 8008364 <_vfiprintf_r+0x5c>
 800833c:	4629      	mov	r1, r5
 800833e:	4630      	mov	r0, r6
 8008340:	f7fd fee6 	bl	8006110 <__swsetup_r>
 8008344:	b170      	cbz	r0, 8008364 <_vfiprintf_r+0x5c>
 8008346:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008348:	07dc      	lsls	r4, r3, #31
 800834a:	d504      	bpl.n	8008356 <_vfiprintf_r+0x4e>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	b01d      	add	sp, #116	@ 0x74
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	0598      	lsls	r0, r3, #22
 800835a:	d4f7      	bmi.n	800834c <_vfiprintf_r+0x44>
 800835c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800835e:	f7fe f819 	bl	8006394 <__retarget_lock_release_recursive>
 8008362:	e7f3      	b.n	800834c <_vfiprintf_r+0x44>
 8008364:	2300      	movs	r3, #0
 8008366:	9309      	str	r3, [sp, #36]	@ 0x24
 8008368:	2320      	movs	r3, #32
 800836a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800836e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008372:	2330      	movs	r3, #48	@ 0x30
 8008374:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008524 <_vfiprintf_r+0x21c>
 8008378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800837c:	f04f 0901 	mov.w	r9, #1
 8008380:	4623      	mov	r3, r4
 8008382:	469a      	mov	sl, r3
 8008384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008388:	b10a      	cbz	r2, 800838e <_vfiprintf_r+0x86>
 800838a:	2a25      	cmp	r2, #37	@ 0x25
 800838c:	d1f9      	bne.n	8008382 <_vfiprintf_r+0x7a>
 800838e:	ebba 0b04 	subs.w	fp, sl, r4
 8008392:	d00b      	beq.n	80083ac <_vfiprintf_r+0xa4>
 8008394:	465b      	mov	r3, fp
 8008396:	4622      	mov	r2, r4
 8008398:	4629      	mov	r1, r5
 800839a:	4630      	mov	r0, r6
 800839c:	f7ff ffa2 	bl	80082e4 <__sfputs_r>
 80083a0:	3001      	adds	r0, #1
 80083a2:	f000 80a7 	beq.w	80084f4 <_vfiprintf_r+0x1ec>
 80083a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083a8:	445a      	add	r2, fp
 80083aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ac:	f89a 3000 	ldrb.w	r3, [sl]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 809f 	beq.w	80084f4 <_vfiprintf_r+0x1ec>
 80083b6:	2300      	movs	r3, #0
 80083b8:	f04f 32ff 	mov.w	r2, #4294967295
 80083bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c0:	f10a 0a01 	add.w	sl, sl, #1
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	9307      	str	r3, [sp, #28]
 80083c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80083ce:	4654      	mov	r4, sl
 80083d0:	2205      	movs	r2, #5
 80083d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d6:	4853      	ldr	r0, [pc, #332]	@ (8008524 <_vfiprintf_r+0x21c>)
 80083d8:	f7f7 ff12 	bl	8000200 <memchr>
 80083dc:	9a04      	ldr	r2, [sp, #16]
 80083de:	b9d8      	cbnz	r0, 8008418 <_vfiprintf_r+0x110>
 80083e0:	06d1      	lsls	r1, r2, #27
 80083e2:	bf44      	itt	mi
 80083e4:	2320      	movmi	r3, #32
 80083e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ea:	0713      	lsls	r3, r2, #28
 80083ec:	bf44      	itt	mi
 80083ee:	232b      	movmi	r3, #43	@ 0x2b
 80083f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083f4:	f89a 3000 	ldrb.w	r3, [sl]
 80083f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083fa:	d015      	beq.n	8008428 <_vfiprintf_r+0x120>
 80083fc:	9a07      	ldr	r2, [sp, #28]
 80083fe:	4654      	mov	r4, sl
 8008400:	2000      	movs	r0, #0
 8008402:	f04f 0c0a 	mov.w	ip, #10
 8008406:	4621      	mov	r1, r4
 8008408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800840c:	3b30      	subs	r3, #48	@ 0x30
 800840e:	2b09      	cmp	r3, #9
 8008410:	d94b      	bls.n	80084aa <_vfiprintf_r+0x1a2>
 8008412:	b1b0      	cbz	r0, 8008442 <_vfiprintf_r+0x13a>
 8008414:	9207      	str	r2, [sp, #28]
 8008416:	e014      	b.n	8008442 <_vfiprintf_r+0x13a>
 8008418:	eba0 0308 	sub.w	r3, r0, r8
 800841c:	fa09 f303 	lsl.w	r3, r9, r3
 8008420:	4313      	orrs	r3, r2
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	46a2      	mov	sl, r4
 8008426:	e7d2      	b.n	80083ce <_vfiprintf_r+0xc6>
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	1d19      	adds	r1, r3, #4
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	9103      	str	r1, [sp, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	bfbb      	ittet	lt
 8008434:	425b      	neglt	r3, r3
 8008436:	f042 0202 	orrlt.w	r2, r2, #2
 800843a:	9307      	strge	r3, [sp, #28]
 800843c:	9307      	strlt	r3, [sp, #28]
 800843e:	bfb8      	it	lt
 8008440:	9204      	strlt	r2, [sp, #16]
 8008442:	7823      	ldrb	r3, [r4, #0]
 8008444:	2b2e      	cmp	r3, #46	@ 0x2e
 8008446:	d10a      	bne.n	800845e <_vfiprintf_r+0x156>
 8008448:	7863      	ldrb	r3, [r4, #1]
 800844a:	2b2a      	cmp	r3, #42	@ 0x2a
 800844c:	d132      	bne.n	80084b4 <_vfiprintf_r+0x1ac>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	1d1a      	adds	r2, r3, #4
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	9203      	str	r2, [sp, #12]
 8008456:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800845a:	3402      	adds	r4, #2
 800845c:	9305      	str	r3, [sp, #20]
 800845e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008534 <_vfiprintf_r+0x22c>
 8008462:	7821      	ldrb	r1, [r4, #0]
 8008464:	2203      	movs	r2, #3
 8008466:	4650      	mov	r0, sl
 8008468:	f7f7 feca 	bl	8000200 <memchr>
 800846c:	b138      	cbz	r0, 800847e <_vfiprintf_r+0x176>
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	eba0 000a 	sub.w	r0, r0, sl
 8008474:	2240      	movs	r2, #64	@ 0x40
 8008476:	4082      	lsls	r2, r0
 8008478:	4313      	orrs	r3, r2
 800847a:	3401      	adds	r4, #1
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008482:	4829      	ldr	r0, [pc, #164]	@ (8008528 <_vfiprintf_r+0x220>)
 8008484:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008488:	2206      	movs	r2, #6
 800848a:	f7f7 feb9 	bl	8000200 <memchr>
 800848e:	2800      	cmp	r0, #0
 8008490:	d03f      	beq.n	8008512 <_vfiprintf_r+0x20a>
 8008492:	4b26      	ldr	r3, [pc, #152]	@ (800852c <_vfiprintf_r+0x224>)
 8008494:	bb1b      	cbnz	r3, 80084de <_vfiprintf_r+0x1d6>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	3307      	adds	r3, #7
 800849a:	f023 0307 	bic.w	r3, r3, #7
 800849e:	3308      	adds	r3, #8
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	443b      	add	r3, r7
 80084a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a8:	e76a      	b.n	8008380 <_vfiprintf_r+0x78>
 80084aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ae:	460c      	mov	r4, r1
 80084b0:	2001      	movs	r0, #1
 80084b2:	e7a8      	b.n	8008406 <_vfiprintf_r+0xfe>
 80084b4:	2300      	movs	r3, #0
 80084b6:	3401      	adds	r4, #1
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	4619      	mov	r1, r3
 80084bc:	f04f 0c0a 	mov.w	ip, #10
 80084c0:	4620      	mov	r0, r4
 80084c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c6:	3a30      	subs	r2, #48	@ 0x30
 80084c8:	2a09      	cmp	r2, #9
 80084ca:	d903      	bls.n	80084d4 <_vfiprintf_r+0x1cc>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0c6      	beq.n	800845e <_vfiprintf_r+0x156>
 80084d0:	9105      	str	r1, [sp, #20]
 80084d2:	e7c4      	b.n	800845e <_vfiprintf_r+0x156>
 80084d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d8:	4604      	mov	r4, r0
 80084da:	2301      	movs	r3, #1
 80084dc:	e7f0      	b.n	80084c0 <_vfiprintf_r+0x1b8>
 80084de:	ab03      	add	r3, sp, #12
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	462a      	mov	r2, r5
 80084e4:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <_vfiprintf_r+0x228>)
 80084e6:	a904      	add	r1, sp, #16
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7fd f8a5 	bl	8005638 <_printf_float>
 80084ee:	4607      	mov	r7, r0
 80084f0:	1c78      	adds	r0, r7, #1
 80084f2:	d1d6      	bne.n	80084a2 <_vfiprintf_r+0x19a>
 80084f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084f6:	07d9      	lsls	r1, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_vfiprintf_r+0x1fe>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_vfiprintf_r+0x1fe>
 8008500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008502:	f7fd ff47 	bl	8006394 <__retarget_lock_release_recursive>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	065b      	lsls	r3, r3, #25
 800850a:	f53f af1f 	bmi.w	800834c <_vfiprintf_r+0x44>
 800850e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008510:	e71e      	b.n	8008350 <_vfiprintf_r+0x48>
 8008512:	ab03      	add	r3, sp, #12
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	462a      	mov	r2, r5
 8008518:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <_vfiprintf_r+0x228>)
 800851a:	a904      	add	r1, sp, #16
 800851c:	4630      	mov	r0, r6
 800851e:	f7fd fb23 	bl	8005b68 <_printf_i>
 8008522:	e7e4      	b.n	80084ee <_vfiprintf_r+0x1e6>
 8008524:	08008f61 	.word	0x08008f61
 8008528:	08008f6b 	.word	0x08008f6b
 800852c:	08005639 	.word	0x08005639
 8008530:	080082e5 	.word	0x080082e5
 8008534:	08008f67 	.word	0x08008f67

08008538 <__sflush_r>:
 8008538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	0716      	lsls	r6, r2, #28
 8008542:	4605      	mov	r5, r0
 8008544:	460c      	mov	r4, r1
 8008546:	d454      	bmi.n	80085f2 <__sflush_r+0xba>
 8008548:	684b      	ldr	r3, [r1, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dc02      	bgt.n	8008554 <__sflush_r+0x1c>
 800854e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	dd48      	ble.n	80085e6 <__sflush_r+0xae>
 8008554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008556:	2e00      	cmp	r6, #0
 8008558:	d045      	beq.n	80085e6 <__sflush_r+0xae>
 800855a:	2300      	movs	r3, #0
 800855c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008560:	682f      	ldr	r7, [r5, #0]
 8008562:	6a21      	ldr	r1, [r4, #32]
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	d030      	beq.n	80085ca <__sflush_r+0x92>
 8008568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	0759      	lsls	r1, r3, #29
 800856e:	d505      	bpl.n	800857c <__sflush_r+0x44>
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008576:	b10b      	cbz	r3, 800857c <__sflush_r+0x44>
 8008578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800857a:	1ad2      	subs	r2, r2, r3
 800857c:	2300      	movs	r3, #0
 800857e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008580:	6a21      	ldr	r1, [r4, #32]
 8008582:	4628      	mov	r0, r5
 8008584:	47b0      	blx	r6
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	d106      	bne.n	800859a <__sflush_r+0x62>
 800858c:	6829      	ldr	r1, [r5, #0]
 800858e:	291d      	cmp	r1, #29
 8008590:	d82b      	bhi.n	80085ea <__sflush_r+0xb2>
 8008592:	4a2a      	ldr	r2, [pc, #168]	@ (800863c <__sflush_r+0x104>)
 8008594:	410a      	asrs	r2, r1
 8008596:	07d6      	lsls	r6, r2, #31
 8008598:	d427      	bmi.n	80085ea <__sflush_r+0xb2>
 800859a:	2200      	movs	r2, #0
 800859c:	6062      	str	r2, [r4, #4]
 800859e:	04d9      	lsls	r1, r3, #19
 80085a0:	6922      	ldr	r2, [r4, #16]
 80085a2:	6022      	str	r2, [r4, #0]
 80085a4:	d504      	bpl.n	80085b0 <__sflush_r+0x78>
 80085a6:	1c42      	adds	r2, r0, #1
 80085a8:	d101      	bne.n	80085ae <__sflush_r+0x76>
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	b903      	cbnz	r3, 80085b0 <__sflush_r+0x78>
 80085ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80085b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b2:	602f      	str	r7, [r5, #0]
 80085b4:	b1b9      	cbz	r1, 80085e6 <__sflush_r+0xae>
 80085b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085ba:	4299      	cmp	r1, r3
 80085bc:	d002      	beq.n	80085c4 <__sflush_r+0x8c>
 80085be:	4628      	mov	r0, r5
 80085c0:	f7fe fd6e 	bl	80070a0 <_free_r>
 80085c4:	2300      	movs	r3, #0
 80085c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c8:	e00d      	b.n	80085e6 <__sflush_r+0xae>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b0      	blx	r6
 80085d0:	4602      	mov	r2, r0
 80085d2:	1c50      	adds	r0, r2, #1
 80085d4:	d1c9      	bne.n	800856a <__sflush_r+0x32>
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0c6      	beq.n	800856a <__sflush_r+0x32>
 80085dc:	2b1d      	cmp	r3, #29
 80085de:	d001      	beq.n	80085e4 <__sflush_r+0xac>
 80085e0:	2b16      	cmp	r3, #22
 80085e2:	d11e      	bne.n	8008622 <__sflush_r+0xea>
 80085e4:	602f      	str	r7, [r5, #0]
 80085e6:	2000      	movs	r0, #0
 80085e8:	e022      	b.n	8008630 <__sflush_r+0xf8>
 80085ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ee:	b21b      	sxth	r3, r3
 80085f0:	e01b      	b.n	800862a <__sflush_r+0xf2>
 80085f2:	690f      	ldr	r7, [r1, #16]
 80085f4:	2f00      	cmp	r7, #0
 80085f6:	d0f6      	beq.n	80085e6 <__sflush_r+0xae>
 80085f8:	0793      	lsls	r3, r2, #30
 80085fa:	680e      	ldr	r6, [r1, #0]
 80085fc:	bf08      	it	eq
 80085fe:	694b      	ldreq	r3, [r1, #20]
 8008600:	600f      	str	r7, [r1, #0]
 8008602:	bf18      	it	ne
 8008604:	2300      	movne	r3, #0
 8008606:	eba6 0807 	sub.w	r8, r6, r7
 800860a:	608b      	str	r3, [r1, #8]
 800860c:	f1b8 0f00 	cmp.w	r8, #0
 8008610:	dde9      	ble.n	80085e6 <__sflush_r+0xae>
 8008612:	6a21      	ldr	r1, [r4, #32]
 8008614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008616:	4643      	mov	r3, r8
 8008618:	463a      	mov	r2, r7
 800861a:	4628      	mov	r0, r5
 800861c:	47b0      	blx	r6
 800861e:	2800      	cmp	r0, #0
 8008620:	dc08      	bgt.n	8008634 <__sflush_r+0xfc>
 8008622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008634:	4407      	add	r7, r0
 8008636:	eba8 0800 	sub.w	r8, r8, r0
 800863a:	e7e7      	b.n	800860c <__sflush_r+0xd4>
 800863c:	dfbffffe 	.word	0xdfbffffe

08008640 <_fflush_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	690b      	ldr	r3, [r1, #16]
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	b913      	cbnz	r3, 8008650 <_fflush_r+0x10>
 800864a:	2500      	movs	r5, #0
 800864c:	4628      	mov	r0, r5
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	b118      	cbz	r0, 800865a <_fflush_r+0x1a>
 8008652:	6a03      	ldr	r3, [r0, #32]
 8008654:	b90b      	cbnz	r3, 800865a <_fflush_r+0x1a>
 8008656:	f7fd fc33 	bl	8005ec0 <__sinit>
 800865a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f3      	beq.n	800864a <_fflush_r+0xa>
 8008662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008664:	07d0      	lsls	r0, r2, #31
 8008666:	d404      	bmi.n	8008672 <_fflush_r+0x32>
 8008668:	0599      	lsls	r1, r3, #22
 800866a:	d402      	bmi.n	8008672 <_fflush_r+0x32>
 800866c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800866e:	f7fd fe90 	bl	8006392 <__retarget_lock_acquire_recursive>
 8008672:	4628      	mov	r0, r5
 8008674:	4621      	mov	r1, r4
 8008676:	f7ff ff5f 	bl	8008538 <__sflush_r>
 800867a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800867c:	07da      	lsls	r2, r3, #31
 800867e:	4605      	mov	r5, r0
 8008680:	d4e4      	bmi.n	800864c <_fflush_r+0xc>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	059b      	lsls	r3, r3, #22
 8008686:	d4e1      	bmi.n	800864c <_fflush_r+0xc>
 8008688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800868a:	f7fd fe83 	bl	8006394 <__retarget_lock_release_recursive>
 800868e:	e7dd      	b.n	800864c <_fflush_r+0xc>

08008690 <fiprintf>:
 8008690:	b40e      	push	{r1, r2, r3}
 8008692:	b503      	push	{r0, r1, lr}
 8008694:	4601      	mov	r1, r0
 8008696:	ab03      	add	r3, sp, #12
 8008698:	4805      	ldr	r0, [pc, #20]	@ (80086b0 <fiprintf+0x20>)
 800869a:	f853 2b04 	ldr.w	r2, [r3], #4
 800869e:	6800      	ldr	r0, [r0, #0]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	f7ff fe31 	bl	8008308 <_vfiprintf_r>
 80086a6:	b002      	add	sp, #8
 80086a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086ac:	b003      	add	sp, #12
 80086ae:	4770      	bx	lr
 80086b0:	20000188 	.word	0x20000188

080086b4 <__swhatbuf_r>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086bc:	2900      	cmp	r1, #0
 80086be:	b096      	sub	sp, #88	@ 0x58
 80086c0:	4615      	mov	r5, r2
 80086c2:	461e      	mov	r6, r3
 80086c4:	da0d      	bge.n	80086e2 <__swhatbuf_r+0x2e>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	bf14      	ite	ne
 80086d2:	2340      	movne	r3, #64	@ 0x40
 80086d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086d8:	2000      	movs	r0, #0
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	b016      	add	sp, #88	@ 0x58
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	466a      	mov	r2, sp
 80086e4:	f000 f848 	bl	8008778 <_fstat_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	dbec      	blt.n	80086c6 <__swhatbuf_r+0x12>
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086f6:	4259      	negs	r1, r3
 80086f8:	4159      	adcs	r1, r3
 80086fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086fe:	e7eb      	b.n	80086d8 <__swhatbuf_r+0x24>

08008700 <__smakebuf_r>:
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008704:	079d      	lsls	r5, r3, #30
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d507      	bpl.n	800871c <__smakebuf_r+0x1c>
 800870c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	2301      	movs	r3, #1
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	b003      	add	sp, #12
 800871a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871c:	ab01      	add	r3, sp, #4
 800871e:	466a      	mov	r2, sp
 8008720:	f7ff ffc8 	bl	80086b4 <__swhatbuf_r>
 8008724:	9f00      	ldr	r7, [sp, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	4639      	mov	r1, r7
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff f866 	bl	80077fc <_malloc_r>
 8008730:	b948      	cbnz	r0, 8008746 <__smakebuf_r+0x46>
 8008732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008736:	059a      	lsls	r2, r3, #22
 8008738:	d4ee      	bmi.n	8008718 <__smakebuf_r+0x18>
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	e7e2      	b.n	800870c <__smakebuf_r+0xc>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	6020      	str	r0, [r4, #0]
 800874a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008756:	b15b      	cbz	r3, 8008770 <__smakebuf_r+0x70>
 8008758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875c:	4630      	mov	r0, r6
 800875e:	f000 f81d 	bl	800879c <_isatty_r>
 8008762:	b128      	cbz	r0, 8008770 <__smakebuf_r+0x70>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	431d      	orrs	r5, r3
 8008774:	81a5      	strh	r5, [r4, #12]
 8008776:	e7cf      	b.n	8008718 <__smakebuf_r+0x18>

08008778 <_fstat_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	@ (8008798 <_fstat_r+0x20>)
 800877c:	2300      	movs	r3, #0
 800877e:	4604      	mov	r4, r0
 8008780:	4608      	mov	r0, r1
 8008782:	4611      	mov	r1, r2
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	f7f9 fa39 	bl	8001bfc <_fstat>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	d102      	bne.n	8008794 <_fstat_r+0x1c>
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	b103      	cbz	r3, 8008794 <_fstat_r+0x1c>
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	bd38      	pop	{r3, r4, r5, pc}
 8008796:	bf00      	nop
 8008798:	200003e8 	.word	0x200003e8

0800879c <_isatty_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d06      	ldr	r5, [pc, #24]	@ (80087b8 <_isatty_r+0x1c>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f7f9 fa38 	bl	8001c1c <_isatty>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_isatty_r+0x1a>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_isatty_r+0x1a>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	200003e8 	.word	0x200003e8

080087bc <_sbrk_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d06      	ldr	r5, [pc, #24]	@ (80087d8 <_sbrk_r+0x1c>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	f7f9 fa40 	bl	8001c4c <_sbrk>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_sbrk_r+0x1a>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_sbrk_r+0x1a>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	200003e8 	.word	0x200003e8

080087dc <abort>:
 80087dc:	b508      	push	{r3, lr}
 80087de:	2006      	movs	r0, #6
 80087e0:	f000 f840 	bl	8008864 <raise>
 80087e4:	2001      	movs	r0, #1
 80087e6:	f7f9 f9d5 	bl	8001b94 <_exit>

080087ea <_calloc_r>:
 80087ea:	b570      	push	{r4, r5, r6, lr}
 80087ec:	fba1 5402 	umull	r5, r4, r1, r2
 80087f0:	b93c      	cbnz	r4, 8008802 <_calloc_r+0x18>
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7ff f802 	bl	80077fc <_malloc_r>
 80087f8:	4606      	mov	r6, r0
 80087fa:	b928      	cbnz	r0, 8008808 <_calloc_r+0x1e>
 80087fc:	2600      	movs	r6, #0
 80087fe:	4630      	mov	r0, r6
 8008800:	bd70      	pop	{r4, r5, r6, pc}
 8008802:	220c      	movs	r2, #12
 8008804:	6002      	str	r2, [r0, #0]
 8008806:	e7f9      	b.n	80087fc <_calloc_r+0x12>
 8008808:	462a      	mov	r2, r5
 800880a:	4621      	mov	r1, r4
 800880c:	f7fd fcd6 	bl	80061bc <memset>
 8008810:	e7f5      	b.n	80087fe <_calloc_r+0x14>

08008812 <_raise_r>:
 8008812:	291f      	cmp	r1, #31
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4605      	mov	r5, r0
 8008818:	460c      	mov	r4, r1
 800881a:	d904      	bls.n	8008826 <_raise_r+0x14>
 800881c:	2316      	movs	r3, #22
 800881e:	6003      	str	r3, [r0, #0]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008828:	b112      	cbz	r2, 8008830 <_raise_r+0x1e>
 800882a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800882e:	b94b      	cbnz	r3, 8008844 <_raise_r+0x32>
 8008830:	4628      	mov	r0, r5
 8008832:	f000 f831 	bl	8008898 <_getpid_r>
 8008836:	4622      	mov	r2, r4
 8008838:	4601      	mov	r1, r0
 800883a:	4628      	mov	r0, r5
 800883c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008840:	f000 b818 	b.w	8008874 <_kill_r>
 8008844:	2b01      	cmp	r3, #1
 8008846:	d00a      	beq.n	800885e <_raise_r+0x4c>
 8008848:	1c59      	adds	r1, r3, #1
 800884a:	d103      	bne.n	8008854 <_raise_r+0x42>
 800884c:	2316      	movs	r3, #22
 800884e:	6003      	str	r3, [r0, #0]
 8008850:	2001      	movs	r0, #1
 8008852:	e7e7      	b.n	8008824 <_raise_r+0x12>
 8008854:	2100      	movs	r1, #0
 8008856:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800885a:	4620      	mov	r0, r4
 800885c:	4798      	blx	r3
 800885e:	2000      	movs	r0, #0
 8008860:	e7e0      	b.n	8008824 <_raise_r+0x12>
	...

08008864 <raise>:
 8008864:	4b02      	ldr	r3, [pc, #8]	@ (8008870 <raise+0xc>)
 8008866:	4601      	mov	r1, r0
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	f7ff bfd2 	b.w	8008812 <_raise_r>
 800886e:	bf00      	nop
 8008870:	20000188 	.word	0x20000188

08008874 <_kill_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	@ (8008894 <_kill_r+0x20>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	f7f9 f977 	bl	8001b74 <_kill>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d102      	bne.n	8008890 <_kill_r+0x1c>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	b103      	cbz	r3, 8008890 <_kill_r+0x1c>
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	200003e8 	.word	0x200003e8

08008898 <_getpid_r>:
 8008898:	f7f9 b964 	b.w	8001b64 <_getpid>

0800889c <_init>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr

080088a8 <_fini>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr
