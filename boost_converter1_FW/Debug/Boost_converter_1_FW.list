
Boost_converter_1_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800309c  0800309c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800309c  0800309c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800309c  0800309c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800309c  0800309c  0000409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030a0  080030a0  000040a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  080030b0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080030b0  0000524c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9e4  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b30  00000000  00000000  00011a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00013548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a0  00000000  00000000  00014170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b8e  00000000  00000000  00014b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb9f  00000000  00000000  0002569e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ad5d  00000000  00000000  0003423d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ef9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  0009efe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a1bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800304c 	.word	0x0800304c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800304c 	.word	0x0800304c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fcb8 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80e 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fa76 	bl	8000718 <MX_GPIO_Init>
  MX_ADC_Init();
 800022c:	f000 f864 	bl	80002f8 <MX_ADC_Init>
  MX_TIM1_Init();
 8000230:	f000 f940 	bl	80004b4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f9e0 	bl	80005f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000238:	f000 fa0e 	bl	8000658 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800023c:	f000 fa3c 	bl	80006b8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	e7fd      	b.n	8000240 <main+0x24>

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b095      	sub	sp, #84	@ 0x54
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	2420      	movs	r4, #32
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2330      	movs	r3, #48	@ 0x30
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f002 fecd 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	2310      	movs	r3, #16
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	0018      	movs	r0, r3
 8000260:	2310      	movs	r3, #16
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f002 fec5 	bl	8002ff4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026a:	003b      	movs	r3, r7
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f002 febe 	bl	8002ff4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000278:	0021      	movs	r1, r4
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2211      	movs	r2, #17
 800027e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2201      	movs	r2, #1
 8000284:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2201      	movs	r2, #1
 800028a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2210      	movs	r2, #16
 8000290:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	187b      	adds	r3, r7, r1
 800029a:	0018      	movs	r0, r3
 800029c:	f001 f938 	bl	8001510 <HAL_RCC_OscConfig>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002a4:	f000 fa7a 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	2110      	movs	r1, #16
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2207      	movs	r2, #7
 80002ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2201      	movs	r2, #1
 80002b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fc40 	bl	8001b4c <HAL_RCC_ClockConfig>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002d0:	f000 fa64 	bl	800079c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002d4:	003b      	movs	r3, r7
 80002d6:	2201      	movs	r2, #1
 80002d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002da:	003b      	movs	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	003b      	movs	r3, r7
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 fd78 	bl	8001dd8 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002ec:	f000 fa56 	bl	800079c <Error_Handler>
  }
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b015      	add	sp, #84	@ 0x54
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	0018      	movs	r0, r3
 8000302:	230c      	movs	r3, #12
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f002 fe74 	bl	8002ff4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800030c:	4b67      	ldr	r3, [pc, #412]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800030e:	4a68      	ldr	r2, [pc, #416]	@ (80004b0 <MX_ADC_Init+0x1b8>)
 8000310:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000312:	4b66      	ldr	r3, [pc, #408]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000318:	4b64      	ldr	r3, [pc, #400]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031e:	4b63      	ldr	r3, [pc, #396]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000324:	4b61      	ldr	r3, [pc, #388]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000326:	2201      	movs	r2, #1
 8000328:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	4b60      	ldr	r3, [pc, #384]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800032c:	2204      	movs	r2, #4
 800032e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000330:	4b5e      	ldr	r3, [pc, #376]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000332:	2200      	movs	r2, #0
 8000334:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000336:	4b5d      	ldr	r3, [pc, #372]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000338:	2200      	movs	r2, #0
 800033a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800033c:	4b5b      	ldr	r3, [pc, #364]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800033e:	2200      	movs	r2, #0
 8000340:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b5a      	ldr	r3, [pc, #360]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000344:	2200      	movs	r2, #0
 8000346:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000348:	4b58      	ldr	r3, [pc, #352]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800034a:	22c2      	movs	r2, #194	@ 0xc2
 800034c:	32ff      	adds	r2, #255	@ 0xff
 800034e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000350:	4b56      	ldr	r3, [pc, #344]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000356:	4b55      	ldr	r3, [pc, #340]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000358:	2224      	movs	r2, #36	@ 0x24
 800035a:	2100      	movs	r1, #0
 800035c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035e:	4b53      	ldr	r3, [pc, #332]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000360:	2201      	movs	r2, #1
 8000362:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000364:	4b51      	ldr	r3, [pc, #324]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fc78 	bl	8000c5c <HAL_ADC_Init>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000370:	f000 fa14 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2280      	movs	r2, #128	@ 0x80
 800037e:	0152      	lsls	r2, r2, #5
 8000380:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2280      	movs	r2, #128	@ 0x80
 8000386:	0552      	lsls	r2, r2, #21
 8000388:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800038a:	1d3a      	adds	r2, r7, #4
 800038c:	4b47      	ldr	r3, [pc, #284]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800038e:	0011      	movs	r1, r2
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fda3 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800039a:	f000 f9ff 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003a4:	1d3a      	adds	r2, r7, #4
 80003a6:	4b41      	ldr	r3, [pc, #260]	@ (80004ac <MX_ADC_Init+0x1b4>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fd96 	bl	8000edc <HAL_ADC_ConfigChannel>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80003b4:	f000 f9f2 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2203      	movs	r2, #3
 80003bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003be:	1d3a      	adds	r2, r7, #4
 80003c0:	4b3a      	ldr	r3, [pc, #232]	@ (80004ac <MX_ADC_Init+0x1b4>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fd89 	bl	8000edc <HAL_ADC_ConfigChannel>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80003ce:	f000 f9e5 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2204      	movs	r2, #4
 80003d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d8:	1d3a      	adds	r2, r7, #4
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <MX_ADC_Init+0x1b4>)
 80003dc:	0011      	movs	r1, r2
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fd7c 	bl	8000edc <HAL_ADC_ConfigChannel>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80003e8:	f000 f9d8 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2205      	movs	r2, #5
 80003f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	4b2d      	ldr	r3, [pc, #180]	@ (80004ac <MX_ADC_Init+0x1b4>)
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 fd6f 	bl	8000edc <HAL_ADC_ConfigChannel>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000402:	f000 f9cb 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2206      	movs	r2, #6
 800040a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800040c:	1d3a      	adds	r2, r7, #4
 800040e:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000410:	0011      	movs	r1, r2
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fd62 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 800041c:	f000 f9be 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	4b20      	ldr	r3, [pc, #128]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f000 fd55 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000436:	f000 f9b1 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2208      	movs	r2, #8
 800043e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000440:	1d3a      	adds	r2, r7, #4
 8000442:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fd48 	bl	8000edc <HAL_ADC_ConfigChannel>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000450:	f000 f9a4 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2209      	movs	r2, #9
 8000458:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800045a:	1d3a      	adds	r2, r7, #4
 800045c:	4b13      	ldr	r3, [pc, #76]	@ (80004ac <MX_ADC_Init+0x1b4>)
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fd3b 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800046a:	f000 f997 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2210      	movs	r2, #16
 8000472:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000474:	1d3a      	adds	r2, r7, #4
 8000476:	4b0d      	ldr	r3, [pc, #52]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fd2e 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000484:	f000 f98a 	bl	800079c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2211      	movs	r2, #17
 800048c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <MX_ADC_Init+0x1b4>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fd21 	bl	8000edc <HAL_ADC_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800049e:	f000 f97d 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b004      	add	sp, #16
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	20000028 	.word	0x20000028
 80004b0:	40012400 	.word	0x40012400

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b092      	sub	sp, #72	@ 0x48
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	2340      	movs	r3, #64	@ 0x40
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	2308      	movs	r3, #8
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 fd95 	bl	8002ff4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ca:	2324      	movs	r3, #36	@ 0x24
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	231c      	movs	r3, #28
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 fd8d 	bl	8002ff4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	0018      	movs	r0, r3
 80004de:	2320      	movs	r3, #32
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f002 fd86 	bl	8002ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e8:	4b40      	ldr	r3, [pc, #256]	@ (80005ec <MX_TIM1_Init+0x138>)
 80004ea:	4a41      	ldr	r2, [pc, #260]	@ (80005f0 <MX_TIM1_Init+0x13c>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ee:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <MX_TIM1_Init+0x138>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b3d      	ldr	r3, [pc, #244]	@ (80005ec <MX_TIM1_Init+0x138>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004fa:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <MX_TIM1_Init+0x138>)
 80004fc:	4a3d      	ldr	r2, [pc, #244]	@ (80005f4 <MX_TIM1_Init+0x140>)
 80004fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b3a      	ldr	r3, [pc, #232]	@ (80005ec <MX_TIM1_Init+0x138>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000506:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <MX_TIM1_Init+0x138>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b37      	ldr	r3, [pc, #220]	@ (80005ec <MX_TIM1_Init+0x138>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000512:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <MX_TIM1_Init+0x138>)
 8000514:	0018      	movs	r0, r3
 8000516:	f001 fd2d 	bl	8001f74 <HAL_TIM_PWM_Init>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 f93d 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2140      	movs	r1, #64	@ 0x40
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000530:	187a      	adds	r2, r7, r1
 8000532:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <MX_TIM1_Init+0x138>)
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f002 f8b2 	bl	80026a0 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000540:	f000 f92c 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000544:	2124      	movs	r1, #36	@ 0x24
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2260      	movs	r2, #96	@ 0x60
 800054a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000570:	1879      	adds	r1, r7, r1
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_TIM1_Init+0x138>)
 8000574:	2200      	movs	r2, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fd4c 	bl	8002014 <HAL_TIM_PWM_ConfigChannel>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000580:	f000 f90c 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000584:	2324      	movs	r3, #36	@ 0x24
 8000586:	18f9      	adds	r1, r7, r3
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <MX_TIM1_Init+0x138>)
 800058a:	220c      	movs	r2, #12
 800058c:	0018      	movs	r0, r3
 800058e:	f001 fd41 	bl	8002014 <HAL_TIM_PWM_ConfigChannel>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000596:	f000 f901 	bl	800079c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	0192      	lsls	r2, r2, #6
 80005be:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005c6:	1d3a      	adds	r2, r7, #4
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <MX_TIM1_Init+0x138>)
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 f8bf 	bl	8002750 <HAL_TIMEx_ConfigBreakDeadTime>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80005d6:	f000 f8e1 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005da:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <MX_TIM1_Init+0x138>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 f98b 	bl	80008f8 <HAL_TIM_MspPostInit>

}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b012      	add	sp, #72	@ 0x48
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	20000068 	.word	0x20000068
 80005f0:	40012c00 	.word	0x40012c00
 80005f4:	0000ffff 	.word	0x0000ffff

080005f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	@ (8000654 <MX_USART1_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	0252      	lsls	r2, r2, #9
 8000608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <MX_USART1_UART_Init+0x58>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 f8e5 	bl	800280c <HAL_UART_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f8a9 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000b0 	.word	0x200000b0
 8000654:	40013800 	.word	0x40013800

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	@ (80006b4 <MX_USART2_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000664:	22e1      	movs	r2, #225	@ 0xe1
 8000666:	0252      	lsls	r2, r2, #9
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800069c:	0018      	movs	r0, r3
 800069e:	f002 f8b5 	bl	800280c <HAL_UART_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f879 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000138 	.word	0x20000138
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	@ (8000714 <MX_USART3_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006c4:	22e1      	movs	r2, #225	@ 0xe1
 80006c6:	0252      	lsls	r2, r2, #9
 80006c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <MX_USART3_UART_Init+0x58>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 f885 	bl	800280c <HAL_UART_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f849 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200001c0 	.word	0x200001c0
 8000714:	40004800 	.word	0x40004800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	0309      	lsls	r1, r1, #12
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_GPIO_Init+0x80>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	031b      	lsls	r3, r3, #12
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_GPIO_Init+0x80>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	03c9      	lsls	r1, r1, #15
 8000744:	430a      	orrs	r2, r1
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_GPIO_Init+0x80>)
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	03db      	lsls	r3, r3, #15
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_GPIO_Init+0x80>)
 800075c:	2180      	movs	r1, #128	@ 0x80
 800075e:	0289      	lsls	r1, r1, #10
 8000760:	430a      	orrs	r2, r1
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	2380      	movs	r3, #128	@ 0x80
 800076a:	029b      	lsls	r3, r3, #10
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	02c9      	lsls	r1, r1, #11
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MX_GPIO_Init+0x80>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	02db      	lsls	r3, r3, #11
 8000788:	4013      	ands	r3, r2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b004      	add	sp, #16
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	40021000 	.word	0x40021000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <HAL_MspInit+0x44>)
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <HAL_MspInit+0x44>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	619a      	str	r2, [r3, #24]
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <HAL_MspInit+0x44>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <HAL_MspInit+0x44>)
 80007c8:	69da      	ldr	r2, [r3, #28]
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_MspInit+0x44>)
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	0549      	lsls	r1, r1, #21
 80007d0:	430a      	orrs	r2, r1
 80007d2:	61da      	str	r2, [r3, #28]
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <HAL_MspInit+0x44>)
 80007d6:	69da      	ldr	r2, [r3, #28]
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	055b      	lsls	r3, r3, #21
 80007dc:	4013      	ands	r3, r2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08b      	sub	sp, #44	@ 0x2c
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	2414      	movs	r4, #20
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f002 fbf6 	bl	8002ff4 <memset>
  if(hadc->Instance==ADC1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a27      	ldr	r2, [pc, #156]	@ (80008ac <HAL_ADC_MspInit+0xbc>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d148      	bne.n	80008a4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000812:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	0089      	lsls	r1, r1, #2
 800081c:	430a      	orrs	r2, r1
 800081e:	619a      	str	r2, [r3, #24]
 8000820:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 8000822:	699a      	ldr	r2, [r3, #24]
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 8000834:	2180      	movs	r1, #128	@ 0x80
 8000836:	0289      	lsls	r1, r1, #10
 8000838:	430a      	orrs	r2, r1
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 800083e:	695a      	ldr	r2, [r3, #20]
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	029b      	lsls	r3, r3, #10
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	02c9      	lsls	r1, r1, #11
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <HAL_ADC_MspInit+0xc0>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	2380      	movs	r3, #128	@ 0x80
 800085e:	02db      	lsls	r3, r3, #11
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000866:	193b      	adds	r3, r7, r4
 8000868:	22fb      	movs	r2, #251	@ 0xfb
 800086a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2203      	movs	r2, #3
 8000870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	193a      	adds	r2, r7, r4
 800087a:	2390      	movs	r3, #144	@ 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fcd5 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2203      	movs	r2, #3
 800088a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2203      	movs	r2, #3
 8000890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	193b      	adds	r3, r7, r4
 800089a:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <HAL_ADC_MspInit+0xc4>)
 800089c:	0019      	movs	r1, r3
 800089e:	0010      	movs	r0, r2
 80008a0:	f000 fcc6 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b00b      	add	sp, #44	@ 0x2c
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	40012400 	.word	0x40012400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000400 	.word	0x48000400

080008b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_TIM_PWM_MspInit+0x38>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d10d      	bne.n	80008e6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	0109      	lsls	r1, r1, #4
 80008d4:	430a      	orrs	r2, r1
 80008d6:	619a      	str	r2, [r3, #24]
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008da:	699a      	ldr	r2, [r3, #24]
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b004      	add	sp, #16
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	@ 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	240c      	movs	r4, #12
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fb72 	bl	8002ff4 <memset>
  if(htim->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_TIM_MspPostInit+0x78>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d125      	bne.n	8000966 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_TIM_MspPostInit+0x7c>)
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_TIM_MspPostInit+0x7c>)
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	0289      	lsls	r1, r1, #10
 8000924:	430a      	orrs	r2, r1
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_TIM_MspPostInit+0x7c>)
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	029b      	lsls	r3, r3, #10
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2290      	movs	r2, #144	@ 0x90
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	0021      	movs	r1, r4
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2202      	movs	r2, #2
 8000944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	187a      	adds	r2, r7, r1
 800095a:	2390      	movs	r3, #144	@ 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fc65 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b009      	add	sp, #36	@ 0x24
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b08f      	sub	sp, #60	@ 0x3c
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	2424      	movs	r4, #36	@ 0x24
 8000982:	193b      	adds	r3, r7, r4
 8000984:	0018      	movs	r0, r3
 8000986:	2314      	movs	r3, #20
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f002 fb32 	bl	8002ff4 <memset>
  if(huart->Instance==USART1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a55      	ldr	r2, [pc, #340]	@ (8000aec <HAL_UART_MspInit+0x174>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d132      	bne.n	8000a00 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099a:	4b55      	ldr	r3, [pc, #340]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	4b54      	ldr	r3, [pc, #336]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 80009a0:	2180      	movs	r1, #128	@ 0x80
 80009a2:	01c9      	lsls	r1, r1, #7
 80009a4:	430a      	orrs	r2, r1
 80009a6:	619a      	str	r2, [r3, #24]
 80009a8:	4b51      	ldr	r3, [pc, #324]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4013      	ands	r3, r2
 80009b2:	623b      	str	r3, [r7, #32]
 80009b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b4e      	ldr	r3, [pc, #312]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 80009b8:	695a      	ldr	r2, [r3, #20]
 80009ba:	4b4d      	ldr	r3, [pc, #308]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	02c9      	lsls	r1, r1, #11
 80009c0:	430a      	orrs	r2, r1
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	02db      	lsls	r3, r3, #11
 80009cc:	4013      	ands	r3, r2
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	22c0      	movs	r2, #192	@ 0xc0
 80009d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2203      	movs	r2, #3
 80009ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	4a3f      	ldr	r2, [pc, #252]	@ (8000af4 <HAL_UART_MspInit+0x17c>)
 80009f6:	0019      	movs	r1, r3
 80009f8:	0010      	movs	r0, r2
 80009fa:	f000 fc19 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009fe:	e070      	b.n	8000ae2 <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a3c      	ldr	r2, [pc, #240]	@ (8000af8 <HAL_UART_MspInit+0x180>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d133      	bne.n	8000a72 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a0c:	69da      	ldr	r2, [r3, #28]
 8000a0e:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	61da      	str	r2, [r3, #28]
 8000a18:	4b35      	ldr	r3, [pc, #212]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	2380      	movs	r3, #128	@ 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b32      	ldr	r3, [pc, #200]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	0289      	lsls	r1, r1, #10
 8000a30:	430a      	orrs	r2, r1
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000a42:	2124      	movs	r1, #36	@ 0x24
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	4a2d      	ldr	r2, [pc, #180]	@ (8000afc <HAL_UART_MspInit+0x184>)
 8000a48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2203      	movs	r2, #3
 8000a5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2201      	movs	r2, #1
 8000a60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	187a      	adds	r2, r7, r1
 8000a64:	2390      	movs	r3, #144	@ 0x90
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fbe0 	bl	8001230 <HAL_GPIO_Init>
}
 8000a70:	e037      	b.n	8000ae2 <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART3)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <HAL_UART_MspInit+0x188>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d132      	bne.n	8000ae2 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a7e:	69da      	ldr	r2, [r3, #28]
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	02c9      	lsls	r1, r1, #11
 8000a86:	430a      	orrs	r2, r1
 8000a88:	61da      	str	r2, [r3, #28]
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	02db      	lsls	r3, r3, #11
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000a9e:	2180      	movs	r1, #128	@ 0x80
 8000aa0:	02c9      	lsls	r1, r1, #11
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	615a      	str	r2, [r3, #20]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_UART_MspInit+0x178>)
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	02db      	lsls	r3, r3, #11
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab4:	2124      	movs	r1, #36	@ 0x24
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	22c0      	movs	r2, #192	@ 0xc0
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2203      	movs	r2, #3
 8000ace:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	4a06      	ldr	r2, [pc, #24]	@ (8000af4 <HAL_UART_MspInit+0x17c>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f000 fba7 	bl	8001230 <HAL_GPIO_Init>
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b00f      	add	sp, #60	@ 0x3c
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	40004400 	.word	0x40004400
 8000afc:	00008004 	.word	0x00008004
 8000b00:	40004800 	.word	0x40004800

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f87a 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b40:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b44:	f7ff fff7 	bl	8000b36 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6e:	f002 fa49 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff fb53 	bl	800021c <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   r0, =_estack
 8000b78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	080030a4 	.word	0x080030a4
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	2000024c 	.word	0x2000024c

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>
	...

08000b94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <HAL_Init+0x24>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_Init+0x24>)
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f809 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000baa:	f7ff fdfd 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_InitTick+0x5c>)
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_InitTick+0x60>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0019      	movs	r1, r3
 8000bce:	23fa      	movs	r3, #250	@ 0xfa
 8000bd0:	0098      	lsls	r0, r3, #2
 8000bd2:	f7ff fa97 	bl	8000104 <__udivsi3>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0020      	movs	r0, r4
 8000bdc:	f7ff fa92 	bl	8000104 <__udivsi3>
 8000be0:	0003      	movs	r3, r0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fb17 	bl	8001216 <HAL_SYSTICK_Config>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e00f      	b.n	8000c10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d80b      	bhi.n	8000c0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 faf4 	bl	80011ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_InitTick+0x64>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	18d2      	adds	r2, r2, r3
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000248 	.word	0x20000248

08000c48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	20000248 	.word	0x20000248

08000c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e125      	b.n	8000ec6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10a      	bne.n	8000c98 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2234      	movs	r2, #52	@ 0x34
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fdac 	bl	80007f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d000      	beq.n	8000ca4 <HAL_ADC_Init+0x48>
 8000ca2:	e103      	b.n	8000eac <HAL_ADC_Init+0x250>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d000      	beq.n	8000cb0 <HAL_ADC_Init+0x54>
 8000cae:	e0fd      	b.n	8000eac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cba:	d000      	beq.n	8000cbe <HAL_ADC_Init+0x62>
 8000cbc:	e0f6      	b.n	8000eac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cc2:	4a83      	ldr	r2, [pc, #524]	@ (8000ed0 <HAL_ADC_Init+0x274>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d112      	bne.n	8000d02 <HAL_ADC_Init+0xa6>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d009      	beq.n	8000cfe <HAL_ADC_Init+0xa2>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	2380      	movs	r3, #128	@ 0x80
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_Init+0xa6>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_ADC_Init+0xa8>
 8000d02:	2300      	movs	r3, #0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d116      	bne.n	8000d36 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2218      	movs	r2, #24
 8000d10:	4393      	bics	r3, r2
 8000d12:	0019      	movs	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	0899      	lsrs	r1, r3, #2
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4964      	ldr	r1, [pc, #400]	@ (8000ed4 <HAL_ADC_Init+0x278>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7e1b      	ldrb	r3, [r3, #24]
 8000d4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e5b      	ldrb	r3, [r3, #25]
 8000d50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7e9b      	ldrb	r3, [r3, #26]
 8000d58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d002      	beq.n	8000d6a <HAL_ADC_Init+0x10e>
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	015b      	lsls	r3, r3, #5
 8000d68:	e000      	b.n	8000d6c <HAL_ADC_Init+0x110>
 8000d6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d72:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d101      	bne.n	8000d80 <HAL_ADC_Init+0x124>
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	e000      	b.n	8000d82 <HAL_ADC_Init+0x126>
 8000d80:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d82:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2124      	movs	r1, #36	@ 0x24
 8000d88:	5c5b      	ldrb	r3, [r3, r1]
 8000d8a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d8c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7edb      	ldrb	r3, [r3, #27]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d115      	bne.n	8000dc8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7e9b      	ldrb	r3, [r3, #26]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2280      	movs	r2, #128	@ 0x80
 8000da8:	0252      	lsls	r2, r2, #9
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	e00b      	b.n	8000dc8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db4:	2220      	movs	r2, #32
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69da      	ldr	r2, [r3, #28]
 8000dcc:	23c2      	movs	r3, #194	@ 0xc2
 8000dce:	33ff      	adds	r3, #255	@ 0xff
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d007      	beq.n	8000de4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68d9      	ldr	r1, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	055b      	lsls	r3, r3, #21
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d01b      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d017      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d013      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00f      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d00b      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d007      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d003      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	d112      	bne.n	8000e5e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2107      	movs	r1, #7
 8000e44:	438a      	bics	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6959      	ldr	r1, [r3, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e52:	2207      	movs	r2, #7
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <HAL_ADC_Init+0x27c>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d10b      	bne.n	8000e86 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4393      	bics	r3, r2
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e84:	e01c      	b.n	8000ec0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8a:	2212      	movs	r2, #18
 8000e8c:	4393      	bics	r3, r2
 8000e8e:	2210      	movs	r2, #16
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eaa:	e009      	b.n	8000ec0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	fffffefd 	.word	0xfffffefd
 8000ed4:	fffe0219 	.word	0xfffe0219
 8000ed8:	833fffe7 	.word	0x833fffe7

08000edc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	055b      	lsls	r3, r3, #21
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d011      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x46>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d00d      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x46>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d009      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x46>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d005      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x46>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d001      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x46>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2234      	movs	r2, #52	@ 0x34
 8000f26:	5c9b      	ldrb	r3, [r3, r2]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_ADC_ConfigChannel+0x54>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e0bb      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x1cc>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2234      	movs	r2, #52	@ 0x34
 8000f34:	2101      	movs	r1, #1
 8000f36:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4013      	ands	r3, r2
 8000f42:	d000      	beq.n	8000f46 <HAL_ADC_ConfigChannel+0x6a>
 8000f44:	e09f      	b.n	8001086 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a59      	ldr	r2, [pc, #356]	@ (80010b0 <HAL_ADC_ConfigChannel+0x1d4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d100      	bne.n	8000f52 <HAL_ADC_ConfigChannel+0x76>
 8000f50:	e077      	b.n	8001042 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	055b      	lsls	r3, r3, #21
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d037      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d033      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d02f      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d02b      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d027      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d023      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d01f      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d01b      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	400b      	ands	r3, r1
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d012      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2107      	movs	r1, #7
 8000fca:	438a      	bics	r2, r1
 8000fcc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6959      	ldr	r1, [r3, #20]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2207      	movs	r2, #7
 8000fda:	401a      	ands	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	d003      	beq.n	8000ff4 <HAL_ADC_ConfigChannel+0x118>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b11      	cmp	r3, #17
 8000ff2:	d152      	bne.n	800109a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ff6:	6819      	ldr	r1, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	d102      	bne.n	8001006 <HAL_ADC_ConfigChannel+0x12a>
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	e001      	b.n	800100a <HAL_ADC_ConfigChannel+0x12e>
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	03db      	lsls	r3, r3, #15
 800100a:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <HAL_ADC_ConfigChannel+0x1d8>)
 800100c:	430b      	orrs	r3, r1
 800100e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b10      	cmp	r3, #16
 8001016:	d140      	bne.n	800109a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001018:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <HAL_ADC_ConfigChannel+0x1dc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4927      	ldr	r1, [pc, #156]	@ (80010bc <HAL_ADC_ConfigChannel+0x1e0>)
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff f870 	bl	8000104 <__udivsi3>
 8001024:	0003      	movs	r3, r0
 8001026:	001a      	movs	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	189b      	adds	r3, r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001032:	e002      	b.n	800103a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	3b01      	subs	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f9      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x158>
 8001040:	e02b      	b.n	800109a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	4099      	lsls	r1, r3
 8001050:	000b      	movs	r3, r1
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	400a      	ands	r2, r1
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b10      	cmp	r3, #16
 8001062:	d003      	beq.n	800106c <HAL_ADC_ConfigChannel+0x190>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b11      	cmp	r3, #17
 800106a:	d116      	bne.n	800109a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_ADC_ConfigChannel+0x1d8>)
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b10      	cmp	r3, #16
 8001076:	d101      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1a0>
 8001078:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800107a:	e000      	b.n	800107e <HAL_ADC_ConfigChannel+0x1a2>
 800107c:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <HAL_ADC_ConfigChannel+0x1e8>)
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e009      	b.n	800109a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108a:	2220      	movs	r2, #32
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2234      	movs	r2, #52	@ 0x34
 800109e:	2100      	movs	r1, #0
 80010a0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010a2:	230f      	movs	r3, #15
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b004      	add	sp, #16
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	00001001 	.word	0x00001001
 80010b4:	40012708 	.word	0x40012708
 80010b8:	20000000 	.word	0x20000000
 80010bc:	000f4240 	.word	0x000f4240
 80010c0:	ff7fffff 	.word	0xff7fffff
 80010c4:	ffbfffff 	.word	0xffbfffff

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b7f      	cmp	r3, #127	@ 0x7f
 80010dc:	d828      	bhi.n	8001130 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <__NVIC_SetPriority+0xd4>)
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	33c0      	adds	r3, #192	@ 0xc0
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	589b      	ldr	r3, [r3, r2]
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	0011      	movs	r1, r2
 80010f4:	2203      	movs	r2, #3
 80010f6:	400a      	ands	r2, r1
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	21ff      	movs	r1, #255	@ 0xff
 80010fc:	4091      	lsls	r1, r2
 80010fe:	000a      	movs	r2, r1
 8001100:	43d2      	mvns	r2, r2
 8001102:	401a      	ands	r2, r3
 8001104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	22ff      	movs	r2, #255	@ 0xff
 800110c:	401a      	ands	r2, r3
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	0018      	movs	r0, r3
 8001114:	2303      	movs	r3, #3
 8001116:	4003      	ands	r3, r0
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111c:	481f      	ldr	r0, [pc, #124]	@ (800119c <__NVIC_SetPriority+0xd4>)
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b25b      	sxtb	r3, r3
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	430a      	orrs	r2, r1
 8001128:	33c0      	adds	r3, #192	@ 0xc0
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800112e:	e031      	b.n	8001194 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <__NVIC_SetPriority+0xd8>)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0019      	movs	r1, r3
 8001138:	230f      	movs	r3, #15
 800113a:	400b      	ands	r3, r1
 800113c:	3b08      	subs	r3, #8
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3306      	adds	r3, #6
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	3304      	adds	r3, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1dfa      	adds	r2, r7, #7
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	0011      	movs	r1, r2
 8001150:	2203      	movs	r2, #3
 8001152:	400a      	ands	r2, r1
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	21ff      	movs	r1, #255	@ 0xff
 8001158:	4091      	lsls	r1, r2
 800115a:	000a      	movs	r2, r1
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	22ff      	movs	r2, #255	@ 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	2303      	movs	r3, #3
 8001172:	4003      	ands	r3, r0
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <__NVIC_SetPriority+0xd8>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	001c      	movs	r4, r3
 8001180:	230f      	movs	r3, #15
 8001182:	4023      	ands	r3, r4
 8001184:	3b08      	subs	r3, #8
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	430a      	orrs	r2, r1
 800118a:	3306      	adds	r3, #6
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	18c3      	adds	r3, r0, r3
 8001190:	3304      	adds	r3, #4
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b003      	add	sp, #12
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	045b      	lsls	r3, r3, #17
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d301      	bcc.n	80011bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b8:	2301      	movs	r3, #1
 80011ba:	e010      	b.n	80011de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <SysTick_Config+0x44>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	3a01      	subs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c4:	2301      	movs	r3, #1
 80011c6:	425b      	negs	r3, r3
 80011c8:	2103      	movs	r1, #3
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff7c 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x44>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x44>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	210f      	movs	r1, #15
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	1c02      	adds	r2, r0, #0
 80011fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	187b      	adds	r3, r7, r1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff ffbf 	bl	80011a4 <SysTick_Config>
 8001226:	0003      	movs	r3, r0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e14f      	b.n	80014e0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_GPIO_Init+0x28>
 8001256:	e140      	b.n	80014da <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	2201      	movs	r2, #1
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4013      	ands	r3, r2
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d017      	beq.n	800130e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	4013      	ands	r3, r2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d123      	bne.n	8001362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	58d3      	ldr	r3, [r2, r3]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2207      	movs	r2, #7
 800132c:	4013      	ands	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2107      	movs	r1, #7
 8001346:	400b      	ands	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	401a      	ands	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	23c0      	movs	r3, #192	@ 0xc0
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d100      	bne.n	80013a4 <HAL_GPIO_Init+0x174>
 80013a2:	e09a      	b.n	80014da <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	4b54      	ldr	r3, [pc, #336]	@ (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	619a      	str	r2, [r3, #24]
 80013b0:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013bc:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <HAL_GPIO_Init+0x2cc>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	589b      	ldr	r3, [r3, r2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	2390      	movs	r3, #144	@ 0x90
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x1e2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a44      	ldr	r2, [pc, #272]	@ (8001500 <HAL_GPIO_Init+0x2d0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x1de>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a43      	ldr	r2, [pc, #268]	@ (8001504 <HAL_GPIO_Init+0x2d4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x1da>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a42      	ldr	r2, [pc, #264]	@ (8001508 <HAL_GPIO_Init+0x2d8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x1d6>
 8001402:	2303      	movs	r3, #3
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 8001406:	2305      	movs	r3, #5
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 8001412:	2300      	movs	r3, #0
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	2103      	movs	r1, #3
 8001418:	400a      	ands	r2, r1
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	@ (80014fc <HAL_GPIO_Init+0x2cc>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b36      	ldr	r3, [pc, #216]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	035b      	lsls	r3, r3, #13
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001456:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	039b      	lsls	r3, r3, #14
 8001474:	4013      	ands	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	2380      	movs	r3, #128	@ 0x80
 800149c:	029b      	lsls	r3, r3, #10
 800149e:	4013      	ands	r3, r2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	4013      	ands	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <HAL_GPIO_Init+0x2dc>)
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	1e13      	subs	r3, r2, #0
 80014ea:	d000      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
 80014ec:	e6a8      	b.n	8001240 <HAL_GPIO_Init+0x10>
  } 
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b006      	add	sp, #24
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000
 8001500:	48000400 	.word	0x48000400
 8001504:	48000800 	.word	0x48000800
 8001508:	48000c00 	.word	0x48000c00
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e305      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x1e>
 800152c:	e08d      	b.n	800164a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800152e:	4bc5      	ldr	r3, [pc, #788]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	220c      	movs	r2, #12
 8001534:	4013      	ands	r3, r2
 8001536:	2b04      	cmp	r3, #4
 8001538:	d00e      	beq.n	8001558 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800153a:	4bc2      	ldr	r3, [pc, #776]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	220c      	movs	r2, #12
 8001540:	4013      	ands	r3, r2
 8001542:	2b08      	cmp	r3, #8
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x64>
 8001546:	4bbf      	ldr	r3, [pc, #764]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	23c0      	movs	r3, #192	@ 0xc0
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	401a      	ands	r2, r3
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	025b      	lsls	r3, r3, #9
 8001554:	429a      	cmp	r2, r3
 8001556:	d10d      	bne.n	8001574 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	4bba      	ldr	r3, [pc, #744]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	d100      	bne.n	8001566 <HAL_RCC_OscConfig+0x56>
 8001564:	e070      	b.n	8001648 <HAL_RCC_OscConfig+0x138>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d000      	beq.n	8001570 <HAL_RCC_OscConfig+0x60>
 800156e:	e06b      	b.n	8001648 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e2dc      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x7c>
 800157c:	4bb1      	ldr	r3, [pc, #708]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4bb0      	ldr	r3, [pc, #704]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	0249      	lsls	r1, r1, #9
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e02f      	b.n	80015ec <HAL_RCC_OscConfig+0xdc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <HAL_RCC_OscConfig+0x9e>
 8001594:	4bab      	ldr	r3, [pc, #684]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4baa      	ldr	r3, [pc, #680]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800159a:	49ab      	ldr	r1, [pc, #684]	@ (8001848 <HAL_RCC_OscConfig+0x338>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015a6:	49a9      	ldr	r1, [pc, #676]	@ (800184c <HAL_RCC_OscConfig+0x33c>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e01e      	b.n	80015ec <HAL_RCC_OscConfig+0xdc>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10e      	bne.n	80015d4 <HAL_RCC_OscConfig+0xc4>
 80015b6:	4ba3      	ldr	r3, [pc, #652]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4ba2      	ldr	r3, [pc, #648]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	02c9      	lsls	r1, r1, #11
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b9e      	ldr	r3, [pc, #632]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	0249      	lsls	r1, r1, #9
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xdc>
 80015d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015da:	499b      	ldr	r1, [pc, #620]	@ (8001848 <HAL_RCC_OscConfig+0x338>)
 80015dc:	400a      	ands	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	4b98      	ldr	r3, [pc, #608]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b97      	ldr	r3, [pc, #604]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015e6:	4999      	ldr	r1, [pc, #612]	@ (800184c <HAL_RCC_OscConfig+0x33c>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d014      	beq.n	800161e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb28 	bl	8000c48 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb23 	bl	8000c48 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	@ 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e28e      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001610:	4b8c      	ldr	r3, [pc, #560]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0xee>
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb13 	bl	8000c48 <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fb0e 	bl	8000c48 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	@ 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e279      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b82      	ldr	r3, [pc, #520]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	029b      	lsls	r3, r3, #10
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x118>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x146>
 8001654:	e06c      	b.n	8001730 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001656:	4b7b      	ldr	r3, [pc, #492]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	220c      	movs	r2, #12
 800165c:	4013      	ands	r3, r2
 800165e:	d00e      	beq.n	800167e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001660:	4b78      	ldr	r3, [pc, #480]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	220c      	movs	r2, #12
 8001666:	4013      	ands	r3, r2
 8001668:	2b08      	cmp	r3, #8
 800166a:	d11f      	bne.n	80016ac <HAL_RCC_OscConfig+0x19c>
 800166c:	4b75      	ldr	r3, [pc, #468]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	23c0      	movs	r3, #192	@ 0xc0
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	401a      	ands	r2, r3
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	429a      	cmp	r2, r3
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b71      	ldr	r3, [pc, #452]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x184>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e24c      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b6b      	ldr	r3, [pc, #428]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	22f8      	movs	r2, #248	@ 0xf8
 800169a:	4393      	bics	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00da      	lsls	r2, r3, #3
 80016a4:	4b67      	ldr	r3, [pc, #412]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	e041      	b.n	8001730 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d024      	beq.n	80016fe <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b63      	ldr	r3, [pc, #396]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b62      	ldr	r3, [pc, #392]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fac2 	bl	8000c48 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fabd 	bl	8000c48 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e228      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d0f1      	beq.n	80016ca <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b57      	ldr	r3, [pc, #348]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	22f8      	movs	r2, #248	@ 0xf8
 80016ec:	4393      	bics	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00da      	lsls	r2, r3, #3
 80016f6:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e018      	b.n	8001730 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001704:	2101      	movs	r1, #1
 8001706:	438a      	bics	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fa9d 	bl	8000c48 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fa98 	bl	8000c48 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e203      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d1f1      	bne.n	8001714 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2208      	movs	r2, #8
 8001736:	4013      	ands	r3, r2
 8001738:	d036      	beq.n	80017a8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d019      	beq.n	8001776 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001742:	4b40      	ldr	r3, [pc, #256]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001746:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fa7b 	bl	8000c48 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fa76 	bl	8000c48 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1e1      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d0f1      	beq.n	8001758 <HAL_RCC_OscConfig+0x248>
 8001774:	e018      	b.n	80017a8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001776:	4b33      	ldr	r3, [pc, #204]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800177a:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800177c:	2101      	movs	r1, #1
 800177e:	438a      	bics	r2, r1
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fa61 	bl	8000c48 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fa5c 	bl	8000c48 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1c7      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179e:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d1f1      	bne.n	800178c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2204      	movs	r2, #4
 80017ae:	4013      	ands	r3, r2
 80017b0:	d100      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2a4>
 80017b2:	e0b5      	b.n	8001920 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b4:	201f      	movs	r0, #31
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80017be:	69da      	ldr	r2, [r3, #28]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	055b      	lsls	r3, r3, #21
 80017c4:	4013      	ands	r3, r2
 80017c6:	d110      	bne.n	80017ea <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80017ce:	2180      	movs	r1, #128	@ 0x80
 80017d0:	0549      	lsls	r1, r1, #21
 80017d2:	430a      	orrs	r2, r1
 80017d4:	61da      	str	r2, [r3, #28]
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	055b      	lsls	r3, r3, #21
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_RCC_OscConfig+0x340>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d11a      	bne.n	800182c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <HAL_RCC_OscConfig+0x340>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_RCC_OscConfig+0x340>)
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	0049      	lsls	r1, r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001804:	f7ff fa20 	bl	8000c48 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff fa1b 	bl	8000c48 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	@ 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e186      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_RCC_OscConfig+0x340>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10f      	bne.n	8001854 <HAL_RCC_OscConfig+0x344>
 8001834:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	4b02      	ldr	r3, [pc, #8]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 800183a:	2101      	movs	r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	621a      	str	r2, [r3, #32]
 8001840:	e036      	b.n	80018b0 <HAL_RCC_OscConfig+0x3a0>
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	40021000 	.word	0x40021000
 8001848:	fffeffff 	.word	0xfffeffff
 800184c:	fffbffff 	.word	0xfffbffff
 8001850:	40007000 	.word	0x40007000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x366>
 800185c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	4bb5      	ldr	r3, [pc, #724]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001862:	2101      	movs	r1, #1
 8001864:	438a      	bics	r2, r1
 8001866:	621a      	str	r2, [r3, #32]
 8001868:	4bb3      	ldr	r3, [pc, #716]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800186a:	6a1a      	ldr	r2, [r3, #32]
 800186c:	4bb2      	ldr	r3, [pc, #712]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800186e:	2104      	movs	r1, #4
 8001870:	438a      	bics	r2, r1
 8001872:	621a      	str	r2, [r3, #32]
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x3a0>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x388>
 800187e:	4bae      	ldr	r3, [pc, #696]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001880:	6a1a      	ldr	r2, [r3, #32]
 8001882:	4bad      	ldr	r3, [pc, #692]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001884:	2104      	movs	r1, #4
 8001886:	430a      	orrs	r2, r1
 8001888:	621a      	str	r2, [r3, #32]
 800188a:	4bab      	ldr	r3, [pc, #684]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4baa      	ldr	r3, [pc, #680]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	621a      	str	r2, [r3, #32]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0x3a0>
 8001898:	4ba7      	ldr	r3, [pc, #668]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	4ba6      	ldr	r3, [pc, #664]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800189e:	2101      	movs	r1, #1
 80018a0:	438a      	bics	r2, r1
 80018a2:	621a      	str	r2, [r3, #32]
 80018a4:	4ba4      	ldr	r3, [pc, #656]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	4ba3      	ldr	r3, [pc, #652]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80018aa:	2104      	movs	r1, #4
 80018ac:	438a      	bics	r2, r1
 80018ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d014      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f9c6 	bl	8000c48 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff f9c1 	bl	8000c48 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4a9b      	ldr	r2, [pc, #620]	@ (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e12b      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	4b98      	ldr	r3, [pc, #608]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	2202      	movs	r2, #2
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3b2>
 80018e0:	e013      	b.n	800190a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff f9b1 	bl	8000c48 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ea:	e009      	b.n	8001900 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff f9ac 	bl	8000c48 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	4a91      	ldr	r2, [pc, #580]	@ (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e116      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b8d      	ldr	r3, [pc, #564]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	2202      	movs	r2, #2
 8001906:	4013      	ands	r3, r2
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800190a:	231f      	movs	r3, #31
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b88      	ldr	r3, [pc, #544]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	4b87      	ldr	r3, [pc, #540]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800191a:	4989      	ldr	r1, [pc, #548]	@ (8001b40 <HAL_RCC_OscConfig+0x630>)
 800191c:	400a      	ands	r2, r1
 800191e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	4013      	ands	r3, r2
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d12a      	bne.n	8001988 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001932:	4b81      	ldr	r3, [pc, #516]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001936:	4b80      	ldr	r3, [pc, #512]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001938:	2104      	movs	r1, #4
 800193a:	430a      	orrs	r2, r1
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800193e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001942:	4b7d      	ldr	r3, [pc, #500]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001944:	2101      	movs	r1, #1
 8001946:	430a      	orrs	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff f97d 	bl	8000c48 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001954:	f7ff f978 	bl	8000c48 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0e3      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001966:	4b74      	ldr	r3, [pc, #464]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d0f1      	beq.n	8001954 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001970:	4b71      	ldr	r3, [pc, #452]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001974:	22f8      	movs	r2, #248	@ 0xf8
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	00da      	lsls	r2, r3, #3
 8001980:	4b6d      	ldr	r3, [pc, #436]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
 8001986:	e034      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	3305      	adds	r3, #5
 800198e:	d111      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001990:	4b69      	ldr	r3, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001994:	4b68      	ldr	r3, [pc, #416]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001996:	2104      	movs	r1, #4
 8001998:	438a      	bics	r2, r1
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800199c:	4b66      	ldr	r3, [pc, #408]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	22f8      	movs	r2, #248	@ 0xf8
 80019a2:	4393      	bics	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	00da      	lsls	r2, r3, #3
 80019ac:	4b62      	ldr	r3, [pc, #392]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019ae:	430a      	orrs	r2, r1
 80019b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b2:	e01e      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019b4:	4b60      	ldr	r3, [pc, #384]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019ba:	2104      	movs	r1, #4
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	438a      	bics	r2, r1
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff f93c 	bl	8000c48 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019d6:	f7ff f937 	bl	8000c48 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0a2      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f1      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d100      	bne.n	80019fc <HAL_RCC_OscConfig+0x4ec>
 80019fa:	e097      	b.n	8001b2c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	220c      	movs	r2, #12
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4fa>
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d14c      	bne.n	8001aac <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b49      	ldr	r3, [pc, #292]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b48      	ldr	r3, [pc, #288]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a18:	494a      	ldr	r1, [pc, #296]	@ (8001b44 <HAL_RCC_OscConfig+0x634>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f913 	bl	8000c48 <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f90e 	bl	8000c48 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e079      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	049b      	lsls	r3, r3, #18
 8001a42:	4013      	ands	r3, r2
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a46:	4b3c      	ldr	r3, [pc, #240]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a54:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a5a:	4b37      	ldr	r3, [pc, #220]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b48 <HAL_RCC_OscConfig+0x638>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	4b32      	ldr	r3, [pc, #200]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b2f      	ldr	r3, [pc, #188]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	0449      	lsls	r1, r1, #17
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f8e1 	bl	8000c48 <HAL_GetTick>
 8001a86:	0003      	movs	r3, r0
 8001a88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f8dc 	bl	8000c48 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e047      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9e:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	049b      	lsls	r3, r3, #18
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x57c>
 8001aaa:	e03f      	b.n	8001b2c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001ab2:	4924      	ldr	r1, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x634>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f8c6 	bl	8000c48 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f8c1 	bl	8000c48 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e02c      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	049b      	lsls	r3, r3, #18
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5b2>
 8001ae0:	e024      	b.n	8001b2c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e01f      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001af4:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	23c0      	movs	r3, #192	@ 0xc0
 8001afe:	025b      	lsls	r3, r3, #9
 8001b00:	401a      	ands	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10e      	bne.n	8001b28 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	401a      	ands	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	23f0      	movs	r3, #240	@ 0xf0
 8001b1c:	039b      	lsls	r3, r3, #14
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b008      	add	sp, #32
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	00001388 	.word	0x00001388
 8001b40:	efffffff 	.word	0xefffffff
 8001b44:	feffffff 	.word	0xfeffffff
 8001b48:	ffc27fff 	.word	0xffc27fff

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0b3      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d911      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b55      	ldr	r3, [pc, #340]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b80:	4b53      	ldr	r3, [pc, #332]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e09a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d015      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d006      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001bac:	21e0      	movs	r1, #224	@ 0xe0
 8001bae:	00c9      	lsls	r1, r1, #3
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	22f0      	movs	r2, #240	@ 0xf0
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d040      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d114      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06e      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	049b      	lsls	r3, r3, #18
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e062      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b34      	ldr	r3, [pc, #208]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e05b      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f810 	bl	8000c48 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7ff f80b 	bl	8000c48 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_RCC_ClockConfig+0x18c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e042      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	220c      	movs	r2, #12
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d211      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_RCC_ClockConfig+0x184>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <HAL_RCC_ClockConfig+0x190>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ca4:	f000 f820 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_RCC_ClockConfig+0x188>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x194>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x198>)
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f7fe ff7b 	bl	8000bbc <HAL_InitTick>
  
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	00001388 	.word	0x00001388
 8001cdc:	fffff8ff 	.word	0xfffff8ff
 8001ce0:	08003064 	.word	0x08003064
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x30>
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x36>
 8001d16:	e02e      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	e02e      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	220f      	movs	r2, #15
 8001d24:	4013      	ands	r3, r2
 8001d26:	4a1a      	ldr	r2, [pc, #104]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	220f      	movs	r2, #15
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	23c0      	movs	r3, #192	@ 0xc0
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	401a      	ands	r2, r3
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	025b      	lsls	r3, r3, #9
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	480f      	ldr	r0, [pc, #60]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d4e:	f7fe f9d9 	bl	8000104 <__udivsi3>
 8001d52:	0003      	movs	r3, r0
 8001d54:	001a      	movs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4353      	muls	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	480a      	ldr	r0, [pc, #40]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d62:	f7fe f9cf 	bl	8000104 <__udivsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	001a      	movs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4353      	muls	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
      break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d78:	613b      	str	r3, [r7, #16]
      break;
 8001d7a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d7c:	693b      	ldr	r3, [r7, #16]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b006      	add	sp, #24
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	0800307c 	.word	0x0800307c
 8001d94:	0800308c 	.word	0x0800308c

08001d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	@ (8001da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001db0:	f7ff fff2 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db4:	0001      	movs	r1, r0
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	40d9      	lsrs	r1, r3
 8001dc6:	000b      	movs	r3, r1
}    
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08003074 	.word	0x08003074

08001dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	4013      	ands	r3, r2
 8001df2:	d100      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001df4:	e08e      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2017      	movs	r0, #23
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b57      	ldr	r3, [pc, #348]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	055b      	lsls	r3, r3, #21
 8001e06:	4013      	ands	r3, r2
 8001e08:	d110      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b54      	ldr	r3, [pc, #336]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	4b53      	ldr	r3, [pc, #332]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	0549      	lsls	r1, r1, #21
 8001e14:	430a      	orrs	r2, r1
 8001e16:	61da      	str	r2, [r3, #28]
 8001e18:	4b50      	ldr	r3, [pc, #320]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d11a      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e38:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e3e:	2180      	movs	r1, #128	@ 0x80
 8001e40:	0049      	lsls	r1, r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7fe feff 	bl	8000c48 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7fe fefa 	bl	8000c48 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	@ 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e077      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	23c0      	movs	r3, #192	@ 0xc0
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d034      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	23c0      	movs	r3, #192	@ 0xc0
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d02c      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e90:	4b32      	ldr	r3, [pc, #200]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a33      	ldr	r2, [pc, #204]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e9a:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	0249      	lsls	r1, r1, #9
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eae:	492e      	ldr	r1, [pc, #184]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eb4:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fec1 	bl	8000c48 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	e009      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7fe febc 	bl	8000c48 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e038      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eea:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f0e:	4918      	ldr	r1, [pc, #96]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	2203      	movs	r2, #3
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	2210      	movs	r2, #16
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b006      	add	sp, #24
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	fffffcff 	.word	0xfffffcff
 8001f68:	fffeffff 	.word	0xfffeffff
 8001f6c:	00001388 	.word	0x00001388
 8001f70:	efffffff 	.word	0xefffffff

08001f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e042      	b.n	800200c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223d      	movs	r2, #61	@ 0x3d
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	223c      	movs	r2, #60	@ 0x3c
 8001f96:	2100      	movs	r1, #0
 8001f98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7fe fc8b 	bl	80008b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223d      	movs	r2, #61	@ 0x3d
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	0010      	movs	r0, r2
 8001fb6:	f000 f8f3 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2246      	movs	r2, #70	@ 0x46
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223e      	movs	r2, #62	@ 0x3e
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223f      	movs	r2, #63	@ 0x3f
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2240      	movs	r2, #64	@ 0x40
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2241      	movs	r2, #65	@ 0x41
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2242      	movs	r2, #66	@ 0x42
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2243      	movs	r2, #67	@ 0x43
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2244      	movs	r2, #68	@ 0x44
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2245      	movs	r2, #69	@ 0x45
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223d      	movs	r2, #61	@ 0x3d
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	2317      	movs	r3, #23
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	223c      	movs	r2, #60	@ 0x3c
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002032:	2302      	movs	r3, #2
 8002034:	e0ad      	b.n	8002192 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	223c      	movs	r2, #60	@ 0x3c
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d100      	bne.n	8002046 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002044:	e076      	b.n	8002134 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d900      	bls.n	800204e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800204c:	e095      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x166>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d04e      	beq.n	80020f2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b08      	cmp	r3, #8
 8002058:	d900      	bls.n	800205c <HAL_TIM_PWM_ConfigChannel+0x48>
 800205a:	e08e      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x166>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d021      	beq.n	80020ac <HAL_TIM_PWM_ConfigChannel+0x98>
 8002068:	e087      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	0011      	movs	r1, r2
 8002072:	0018      	movs	r0, r3
 8002074:	f000 f918 	bl	80022a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2108      	movs	r1, #8
 8002084:	430a      	orrs	r2, r1
 8002086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2104      	movs	r1, #4
 8002094:	438a      	bics	r2, r1
 8002096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6999      	ldr	r1, [r3, #24]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	619a      	str	r2, [r3, #24]
      break;
 80020aa:	e06b      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	0011      	movs	r1, r2
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 f97f 	bl	80023b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2180      	movs	r1, #128	@ 0x80
 80020c6:	0109      	lsls	r1, r1, #4
 80020c8:	430a      	orrs	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4931      	ldr	r1, [pc, #196]	@ (800219c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80020d8:	400a      	ands	r2, r1
 80020da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6999      	ldr	r1, [r3, #24]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	021a      	lsls	r2, r3, #8
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	619a      	str	r2, [r3, #24]
      break;
 80020f0:	e048      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	0011      	movs	r1, r2
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 f9e0 	bl	80024c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2108      	movs	r1, #8
 800210c:	430a      	orrs	r2, r1
 800210e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2104      	movs	r1, #4
 800211c:	438a      	bics	r2, r1
 800211e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69d9      	ldr	r1, [r3, #28]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	61da      	str	r2, [r3, #28]
      break;
 8002132:	e027      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fa45 	bl	80025cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	0109      	lsls	r1, r1, #4
 8002150:	430a      	orrs	r2, r1
 8002152:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	490f      	ldr	r1, [pc, #60]	@ (800219c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002160:	400a      	ands	r2, r1
 8002162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69d9      	ldr	r1, [r3, #28]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	021a      	lsls	r2, r3, #8
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
      break;
 8002178:	e004      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800217a:	2317      	movs	r3, #23
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	223c      	movs	r2, #60	@ 0x3c
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]

  return status;
 800218c:	2317      	movs	r3, #23
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b006      	add	sp, #24
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	fffffbff 	.word	0xfffffbff

080021a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a36      	ldr	r2, [pc, #216]	@ (800228c <TIM_Base_SetConfig+0xec>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_Base_SetConfig+0x20>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a35      	ldr	r2, [pc, #212]	@ (8002290 <TIM_Base_SetConfig+0xf0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d108      	bne.n	80021d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2270      	movs	r2, #112	@ 0x70
 80021c4:	4393      	bics	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <TIM_Base_SetConfig+0xec>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002290 <TIM_Base_SetConfig+0xf0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002294 <TIM_Base_SetConfig+0xf4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002298 <TIM_Base_SetConfig+0xf8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a29      	ldr	r2, [pc, #164]	@ (800229c <TIM_Base_SetConfig+0xfc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <TIM_Base_SetConfig+0x100>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a27      	ldr	r2, [pc, #156]	@ (80022a4 <TIM_Base_SetConfig+0x104>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2280      	movs	r2, #128	@ 0x80
 8002218:	4393      	bics	r3, r2
 800221a:	001a      	movs	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a13      	ldr	r2, [pc, #76]	@ (800228c <TIM_Base_SetConfig+0xec>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00b      	beq.n	800225a <TIM_Base_SetConfig+0xba>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <TIM_Base_SetConfig+0xf8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <TIM_Base_SetConfig+0xba>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <TIM_Base_SetConfig+0xfc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d003      	beq.n	800225a <TIM_Base_SetConfig+0xba>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <TIM_Base_SetConfig+0x100>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d103      	bne.n	8002262 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	2b01      	cmp	r3, #1
 8002272:	d106      	bne.n	8002282 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2201      	movs	r2, #1
 800227a:	4393      	bics	r3, r2
 800227c:	001a      	movs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]
  }
}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40000400 	.word	0x40000400
 8002294:	40002000 	.word	0x40002000
 8002298:	40014000 	.word	0x40014000
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800
 80022a4:	fffffcff 	.word	0xfffffcff

080022a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	2201      	movs	r2, #1
 80022be:	4393      	bics	r3, r2
 80022c0:	001a      	movs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2270      	movs	r2, #112	@ 0x70
 80022d6:	4393      	bics	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2203      	movs	r2, #3
 80022de:	4393      	bics	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2202      	movs	r2, #2
 80022f0:	4393      	bics	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a27      	ldr	r2, [pc, #156]	@ (80023a0 <TIM_OC1_SetConfig+0xf8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <TIM_OC1_SetConfig+0x76>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a26      	ldr	r2, [pc, #152]	@ (80023a4 <TIM_OC1_SetConfig+0xfc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_OC1_SetConfig+0x76>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a25      	ldr	r2, [pc, #148]	@ (80023a8 <TIM_OC1_SetConfig+0x100>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_OC1_SetConfig+0x76>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a24      	ldr	r2, [pc, #144]	@ (80023ac <TIM_OC1_SetConfig+0x104>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10c      	bne.n	8002338 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2208      	movs	r2, #8
 8002322:	4393      	bics	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2204      	movs	r2, #4
 8002334:	4393      	bics	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <TIM_OC1_SetConfig+0xf8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00b      	beq.n	8002358 <TIM_OC1_SetConfig+0xb0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a18      	ldr	r2, [pc, #96]	@ (80023a4 <TIM_OC1_SetConfig+0xfc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_OC1_SetConfig+0xb0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <TIM_OC1_SetConfig+0x100>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_OC1_SetConfig+0xb0>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a16      	ldr	r2, [pc, #88]	@ (80023ac <TIM_OC1_SetConfig+0x104>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4a15      	ldr	r2, [pc, #84]	@ (80023b0 <TIM_OC1_SetConfig+0x108>)
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <TIM_OC1_SetConfig+0x10c>)
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b006      	add	sp, #24
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40014000 	.word	0x40014000
 80023a8:	40014400 	.word	0x40014400
 80023ac:	40014800 	.word	0x40014800
 80023b0:	fffffeff 	.word	0xfffffeff
 80023b4:	fffffdff 	.word	0xfffffdff

080023b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	2210      	movs	r2, #16
 80023ce:	4393      	bics	r3, r2
 80023d0:	001a      	movs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a2e      	ldr	r2, [pc, #184]	@ (80024a0 <TIM_OC2_SetConfig+0xe8>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a2d      	ldr	r2, [pc, #180]	@ (80024a4 <TIM_OC2_SetConfig+0xec>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2220      	movs	r2, #32
 8002402:	4393      	bics	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a24      	ldr	r2, [pc, #144]	@ (80024a8 <TIM_OC2_SetConfig+0xf0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10d      	bne.n	8002436 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2280      	movs	r2, #128	@ 0x80
 800241e:	4393      	bics	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2240      	movs	r2, #64	@ 0x40
 8002432:	4393      	bics	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <TIM_OC2_SetConfig+0xf0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00b      	beq.n	8002456 <TIM_OC2_SetConfig+0x9e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1a      	ldr	r2, [pc, #104]	@ (80024ac <TIM_OC2_SetConfig+0xf4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <TIM_OC2_SetConfig+0x9e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <TIM_OC2_SetConfig+0xf8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d003      	beq.n	8002456 <TIM_OC2_SetConfig+0x9e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <TIM_OC2_SetConfig+0xfc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d113      	bne.n	800247e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4a17      	ldr	r2, [pc, #92]	@ (80024b8 <TIM_OC2_SetConfig+0x100>)
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <TIM_OC2_SetConfig+0x104>)
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	621a      	str	r2, [r3, #32]
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b006      	add	sp, #24
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	ffff8fff 	.word	0xffff8fff
 80024a4:	fffffcff 	.word	0xfffffcff
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40014000 	.word	0x40014000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800
 80024b8:	fffffbff 	.word	0xfffffbff
 80024bc:	fffff7ff 	.word	0xfffff7ff

080024c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a33      	ldr	r2, [pc, #204]	@ (80025a4 <TIM_OC3_SetConfig+0xe4>)
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2270      	movs	r2, #112	@ 0x70
 80024ec:	4393      	bics	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2203      	movs	r2, #3
 80024f4:	4393      	bics	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a28      	ldr	r2, [pc, #160]	@ (80025a8 <TIM_OC3_SetConfig+0xe8>)
 8002506:	4013      	ands	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a24      	ldr	r2, [pc, #144]	@ (80025ac <TIM_OC3_SetConfig+0xec>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10d      	bne.n	800253a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4a23      	ldr	r2, [pc, #140]	@ (80025b0 <TIM_OC3_SetConfig+0xf0>)
 8002522:	4013      	ands	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <TIM_OC3_SetConfig+0xf4>)
 8002536:	4013      	ands	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <TIM_OC3_SetConfig+0xec>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_OC3_SetConfig+0x9a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <TIM_OC3_SetConfig+0xf8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <TIM_OC3_SetConfig+0x9a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <TIM_OC3_SetConfig+0xfc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_OC3_SetConfig+0x9a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <TIM_OC3_SetConfig+0x100>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d113      	bne.n	8002582 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <TIM_OC3_SetConfig+0x104>)
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <TIM_OC3_SetConfig+0x108>)
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	621a      	str	r2, [r3, #32]
}
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b006      	add	sp, #24
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	fffffeff 	.word	0xfffffeff
 80025a8:	fffffdff 	.word	0xfffffdff
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	fffff7ff 	.word	0xfffff7ff
 80025b4:	fffffbff 	.word	0xfffffbff
 80025b8:	40014000 	.word	0x40014000
 80025bc:	40014400 	.word	0x40014400
 80025c0:	40014800 	.word	0x40014800
 80025c4:	ffffefff 	.word	0xffffefff
 80025c8:	ffffdfff 	.word	0xffffdfff

080025cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a26      	ldr	r2, [pc, #152]	@ (800267c <TIM_OC4_SetConfig+0xb0>)
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <TIM_OC4_SetConfig+0xb4>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <TIM_OC4_SetConfig+0xb8>)
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <TIM_OC4_SetConfig+0xbc>)
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	031b      	lsls	r3, r3, #12
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a19      	ldr	r2, [pc, #100]	@ (800268c <TIM_OC4_SetConfig+0xc0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00b      	beq.n	8002644 <TIM_OC4_SetConfig+0x78>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <TIM_OC4_SetConfig+0xc4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <TIM_OC4_SetConfig+0x78>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <TIM_OC4_SetConfig+0xc8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_OC4_SetConfig+0x78>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a16      	ldr	r2, [pc, #88]	@ (8002698 <TIM_OC4_SetConfig+0xcc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d109      	bne.n	8002658 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4a15      	ldr	r2, [pc, #84]	@ (800269c <TIM_OC4_SetConfig+0xd0>)
 8002648:	4013      	ands	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	621a      	str	r2, [r3, #32]
}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b006      	add	sp, #24
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	ffffefff 	.word	0xffffefff
 8002680:	ffff8fff 	.word	0xffff8fff
 8002684:	fffffcff 	.word	0xfffffcff
 8002688:	ffffdfff 	.word	0xffffdfff
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	ffffbfff 	.word	0xffffbfff

080026a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	223c      	movs	r2, #60	@ 0x3c
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e041      	b.n	800273c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	223c      	movs	r2, #60	@ 0x3c
 80026bc:	2101      	movs	r1, #1
 80026be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	223d      	movs	r2, #61	@ 0x3d
 80026c4:	2102      	movs	r1, #2
 80026c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2270      	movs	r2, #112	@ 0x70
 80026dc:	4393      	bics	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a13      	ldr	r2, [pc, #76]	@ (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10c      	bne.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2280      	movs	r2, #128	@ 0x80
 8002714:	4393      	bics	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	223d      	movs	r2, #61	@ 0x3d
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	223c      	movs	r2, #60	@ 0x3c
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400
 800274c:	40014000 	.word	0x40014000

08002750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223c      	movs	r2, #60	@ 0x3c
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002768:	2302      	movs	r3, #2
 800276a:	e03e      	b.n	80027ea <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223c      	movs	r2, #60	@ 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	22ff      	movs	r2, #255	@ 0xff
 8002778:	4393      	bics	r3, r2
 800277a:	001a      	movs	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002788:	401a      	ands	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002796:	401a      	ands	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80027a4:	401a      	ands	r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a13      	ldr	r2, [pc, #76]	@ (8002800 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80027b2:	401a      	ands	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a11      	ldr	r2, [pc, #68]	@ (8002804 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80027c0:	401a      	ands	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80027ce:	401a      	ands	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	223c      	movs	r2, #60	@ 0x3c
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b004      	add	sp, #16
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	fffffcff 	.word	0xfffffcff
 80027f8:	fffffbff 	.word	0xfffffbff
 80027fc:	fffff7ff 	.word	0xfffff7ff
 8002800:	ffffefff 	.word	0xffffefff
 8002804:	ffffdfff 	.word	0xffffdfff
 8002808:	ffffbfff 	.word	0xffffbfff

0800280c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e044      	b.n	80028a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2278      	movs	r2, #120	@ 0x78
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe f8a1 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2224      	movs	r2, #36	@ 0x24
 800283a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f99c 	bl	8002b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f828 	bl	80028b4 <UART_SetConfig>
 8002864:	0003      	movs	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e01c      	b.n	80028a8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	490d      	ldr	r1, [pc, #52]	@ (80028b0 <HAL_UART_Init+0xa4>)
 800287a:	400a      	ands	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2108      	movs	r1, #8
 800288a:	438a      	bics	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fa2b 	bl	8002cfc <UART_CheckIdleState>
 80028a6:	0003      	movs	r3, r0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	fffff7ff 	.word	0xfffff7ff

080028b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028bc:	231e      	movs	r3, #30
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4aa1      	ldr	r2, [pc, #644]	@ (8002b68 <UART_SetConfig+0x2b4>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a9c      	ldr	r2, [pc, #624]	@ (8002b6c <UART_SetConfig+0x2b8>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a93      	ldr	r2, [pc, #588]	@ (8002b70 <UART_SetConfig+0x2bc>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a8f      	ldr	r2, [pc, #572]	@ (8002b74 <UART_SetConfig+0x2c0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d127      	bne.n	800298a <UART_SetConfig+0xd6>
 800293a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b78 <UART_SetConfig+0x2c4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	2203      	movs	r2, #3
 8002940:	4013      	ands	r3, r2
 8002942:	2b03      	cmp	r3, #3
 8002944:	d00d      	beq.n	8002962 <UART_SetConfig+0xae>
 8002946:	d81b      	bhi.n	8002980 <UART_SetConfig+0xcc>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d014      	beq.n	8002976 <UART_SetConfig+0xc2>
 800294c:	d818      	bhi.n	8002980 <UART_SetConfig+0xcc>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <UART_SetConfig+0xa4>
 8002952:	2b01      	cmp	r3, #1
 8002954:	d00a      	beq.n	800296c <UART_SetConfig+0xb8>
 8002956:	e013      	b.n	8002980 <UART_SetConfig+0xcc>
 8002958:	231f      	movs	r3, #31
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e049      	b.n	80029f6 <UART_SetConfig+0x142>
 8002962:	231f      	movs	r3, #31
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e044      	b.n	80029f6 <UART_SetConfig+0x142>
 800296c:	231f      	movs	r3, #31
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2204      	movs	r2, #4
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e03f      	b.n	80029f6 <UART_SetConfig+0x142>
 8002976:	231f      	movs	r3, #31
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	2208      	movs	r2, #8
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e03a      	b.n	80029f6 <UART_SetConfig+0x142>
 8002980:	231f      	movs	r3, #31
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2210      	movs	r2, #16
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e035      	b.n	80029f6 <UART_SetConfig+0x142>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b7c <UART_SetConfig+0x2c8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d104      	bne.n	800299e <UART_SetConfig+0xea>
 8002994:	231f      	movs	r3, #31
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e02b      	b.n	80029f6 <UART_SetConfig+0x142>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a77      	ldr	r2, [pc, #476]	@ (8002b80 <UART_SetConfig+0x2cc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d104      	bne.n	80029b2 <UART_SetConfig+0xfe>
 80029a8:	231f      	movs	r3, #31
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e021      	b.n	80029f6 <UART_SetConfig+0x142>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a73      	ldr	r2, [pc, #460]	@ (8002b84 <UART_SetConfig+0x2d0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0x112>
 80029bc:	231f      	movs	r3, #31
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e017      	b.n	80029f6 <UART_SetConfig+0x142>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002b88 <UART_SetConfig+0x2d4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d104      	bne.n	80029da <UART_SetConfig+0x126>
 80029d0:	231f      	movs	r3, #31
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e00d      	b.n	80029f6 <UART_SetConfig+0x142>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6b      	ldr	r2, [pc, #428]	@ (8002b8c <UART_SetConfig+0x2d8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d104      	bne.n	80029ee <UART_SetConfig+0x13a>
 80029e4:	231f      	movs	r3, #31
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e003      	b.n	80029f6 <UART_SetConfig+0x142>
 80029ee:	231f      	movs	r3, #31
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2210      	movs	r2, #16
 80029f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d15c      	bne.n	8002abc <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8002a02:	231f      	movs	r3, #31
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d015      	beq.n	8002a38 <UART_SetConfig+0x184>
 8002a0c:	dc18      	bgt.n	8002a40 <UART_SetConfig+0x18c>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00d      	beq.n	8002a2e <UART_SetConfig+0x17a>
 8002a12:	dc15      	bgt.n	8002a40 <UART_SetConfig+0x18c>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <UART_SetConfig+0x16a>
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d005      	beq.n	8002a28 <UART_SetConfig+0x174>
 8002a1c:	e010      	b.n	8002a40 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1e:	f7ff f9c5 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8002a22:	0003      	movs	r3, r0
 8002a24:	61bb      	str	r3, [r7, #24]
        break;
 8002a26:	e012      	b.n	8002a4e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a28:	4b59      	ldr	r3, [pc, #356]	@ (8002b90 <UART_SetConfig+0x2dc>)
 8002a2a:	61bb      	str	r3, [r7, #24]
        break;
 8002a2c:	e00f      	b.n	8002a4e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2e:	f7ff f95b 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002a32:	0003      	movs	r3, r0
 8002a34:	61bb      	str	r3, [r7, #24]
        break;
 8002a36:	e00a      	b.n	8002a4e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	61bb      	str	r3, [r7, #24]
        break;
 8002a3e:	e006      	b.n	8002a4e <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a44:	231e      	movs	r3, #30
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
        break;
 8002a4c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d100      	bne.n	8002a56 <UART_SetConfig+0x1a2>
 8002a54:	e07a      	b.n	8002b4c <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	005a      	lsls	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	18d2      	adds	r2, r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0019      	movs	r1, r3
 8002a68:	0010      	movs	r0, r2
 8002a6a:	f7fd fb4b 	bl	8000104 <__udivsi3>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b0f      	cmp	r3, #15
 8002a76:	d91c      	bls.n	8002ab2 <UART_SetConfig+0x1fe>
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	025b      	lsls	r3, r3, #9
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d217      	bcs.n	8002ab2 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	200e      	movs	r0, #14
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2207      	movs	r2, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b299      	uxth	r1, r3
 8002a9c:	183b      	adds	r3, r7, r0
 8002a9e:	183a      	adds	r2, r7, r0
 8002aa0:	8812      	ldrh	r2, [r2, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	183a      	adds	r2, r7, r0
 8002aac:	8812      	ldrh	r2, [r2, #0]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	e04c      	b.n	8002b4c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab2:	231e      	movs	r3, #30
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e047      	b.n	8002b4c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002abc:	231f      	movs	r3, #31
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d015      	beq.n	8002af2 <UART_SetConfig+0x23e>
 8002ac6:	dc18      	bgt.n	8002afa <UART_SetConfig+0x246>
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d00d      	beq.n	8002ae8 <UART_SetConfig+0x234>
 8002acc:	dc15      	bgt.n	8002afa <UART_SetConfig+0x246>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <UART_SetConfig+0x224>
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d005      	beq.n	8002ae2 <UART_SetConfig+0x22e>
 8002ad6:	e010      	b.n	8002afa <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7ff f968 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8002adc:	0003      	movs	r3, r0
 8002ade:	61bb      	str	r3, [r7, #24]
        break;
 8002ae0:	e012      	b.n	8002b08 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b90 <UART_SetConfig+0x2dc>)
 8002ae4:	61bb      	str	r3, [r7, #24]
        break;
 8002ae6:	e00f      	b.n	8002b08 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae8:	f7ff f8fe 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002aec:	0003      	movs	r3, r0
 8002aee:	61bb      	str	r3, [r7, #24]
        break;
 8002af0:	e00a      	b.n	8002b08 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	61bb      	str	r3, [r7, #24]
        break;
 8002af8:	e006      	b.n	8002b08 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002afe:	231e      	movs	r3, #30
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
        break;
 8002b06:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01e      	beq.n	8002b4c <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	085a      	lsrs	r2, r3, #1
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	18d2      	adds	r2, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0010      	movs	r0, r2
 8002b20:	f7fd faf0 	bl	8000104 <__udivsi3>
 8002b24:	0003      	movs	r3, r0
 8002b26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d90a      	bls.n	8002b44 <UART_SetConfig+0x290>
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	025b      	lsls	r3, r3, #9
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d205      	bcs.n	8002b44 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e003      	b.n	8002b4c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002b44:	231e      	movs	r3, #30
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b58:	231e      	movs	r3, #30
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b008      	add	sp, #32
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	efff69f3 	.word	0xefff69f3
 8002b6c:	ffffcfff 	.word	0xffffcfff
 8002b70:	fffff4ff 	.word	0xfffff4ff
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40004800 	.word	0x40004800
 8002b84:	40004c00 	.word	0x40004c00
 8002b88:	40005000 	.word	0x40005000
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd8 <UART_AdvFeatureConfig+0x144>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a43      	ldr	r2, [pc, #268]	@ (8002cdc <UART_AdvFeatureConfig+0x148>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2202      	movs	r2, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ce0 <UART_AdvFeatureConfig+0x14c>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	2204      	movs	r2, #4
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d00b      	beq.n	8002c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a34      	ldr	r2, [pc, #208]	@ (8002ce4 <UART_AdvFeatureConfig+0x150>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	2210      	movs	r2, #16
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d00b      	beq.n	8002c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <UART_AdvFeatureConfig+0x154>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4a25      	ldr	r2, [pc, #148]	@ (8002cec <UART_AdvFeatureConfig+0x158>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	2240      	movs	r2, #64	@ 0x40
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d01d      	beq.n	8002cae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf0 <UART_AdvFeatureConfig+0x15c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	035b      	lsls	r3, r3, #13
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d10b      	bne.n	8002cae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	@ (8002cf4 <UART_AdvFeatureConfig+0x160>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf8 <UART_AdvFeatureConfig+0x164>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
  }
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	ffff7fff 	.word	0xffff7fff
 8002cdc:	fffdffff 	.word	0xfffdffff
 8002ce0:	fffeffff 	.word	0xfffeffff
 8002ce4:	fffbffff 	.word	0xfffbffff
 8002ce8:	ffffefff 	.word	0xffffefff
 8002cec:	ffffdfff 	.word	0xffffdfff
 8002cf0:	ffefffff 	.word	0xffefffff
 8002cf4:	ff9fffff 	.word	0xff9fffff
 8002cf8:	fff7ffff 	.word	0xfff7ffff

08002cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b092      	sub	sp, #72	@ 0x48
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2284      	movs	r2, #132	@ 0x84
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d0c:	f7fd ff9c 	bl	8000c48 <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d12c      	bne.n	8002d7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d24:	2280      	movs	r2, #128	@ 0x80
 8002d26:	0391      	lsls	r1, r2, #14
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4a46      	ldr	r2, [pc, #280]	@ (8002e44 <UART_CheckIdleState+0x148>)
 8002d2c:	9200      	str	r2, [sp, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f000 f88c 	bl	8002e4c <UART_WaitOnFlagUntilTimeout>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d021      	beq.n	8002d7c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d38:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d42:	2301      	movs	r3, #1
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	f383 8810 	msr	PRIMASK, r3
}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2278      	movs	r2, #120	@ 0x78
 8002d74:	2100      	movs	r1, #0
 8002d76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e05f      	b.n	8002e3c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d146      	bne.n	8002e18 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8c:	2280      	movs	r2, #128	@ 0x80
 8002d8e:	03d1      	lsls	r1, r2, #15
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4a2c      	ldr	r2, [pc, #176]	@ (8002e44 <UART_CheckIdleState+0x148>)
 8002d94:	9200      	str	r2, [sp, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f000 f858 	bl	8002e4c <UART_WaitOnFlagUntilTimeout>
 8002d9c:	1e03      	subs	r3, r0, #0
 8002d9e:	d03b      	beq.n	8002e18 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da0:	f3ef 8310 	mrs	r3, PRIMASK
 8002da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002da6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002daa:	2301      	movs	r3, #1
 8002dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4921      	ldr	r1, [pc, #132]	@ (8002e48 <UART_CheckIdleState+0x14c>)
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2101      	movs	r1, #1
 8002df4:	438a      	bics	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	@ 0x80
 8002e08:	2120      	movs	r1, #32
 8002e0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2278      	movs	r2, #120	@ 0x78
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e011      	b.n	8002e3c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2280      	movs	r2, #128	@ 0x80
 8002e22:	2120      	movs	r1, #32
 8002e24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2278      	movs	r2, #120	@ 0x78
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b010      	add	sp, #64	@ 0x40
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	01ffffff 	.word	0x01ffffff
 8002e48:	fffffedf 	.word	0xfffffedf

08002e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	1dfb      	adds	r3, r7, #7
 8002e5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5c:	e051      	b.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3301      	adds	r3, #1
 8002e62:	d04e      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e64:	f7fd fef0 	bl	8000c48 <HAL_GetTick>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d302      	bcc.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e051      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2204      	movs	r2, #4
 8002e86:	4013      	ands	r3, r2
 8002e88:	d03b      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b80      	cmp	r3, #128	@ 0x80
 8002e8e:	d038      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d035      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d111      	bne.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f83c 	bl	8002f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2284      	movs	r2, #132	@ 0x84
 8002eb8:	2108      	movs	r1, #8
 8002eba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2278      	movs	r2, #120	@ 0x78
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e02c      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d112      	bne.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2280      	movs	r2, #128	@ 0x80
 8002ee2:	0112      	lsls	r2, r2, #4
 8002ee4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f000 f81f 	bl	8002f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2284      	movs	r2, #132	@ 0x84
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2278      	movs	r2, #120	@ 0x78
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e00f      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	425a      	negs	r2, r3
 8002f12:	4153      	adcs	r3, r2
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	001a      	movs	r2, r3
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d09e      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b004      	add	sp, #16
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8310 	mrs	r3, PRIMASK
 8002f38:	617b      	str	r3, [r7, #20]
  return(result);
 8002f3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4926      	ldr	r1, [pc, #152]	@ (8002ff0 <UART_EndRxTransfer+0xc4>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f66:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d118      	bne.n	8002fd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002faa:	2301      	movs	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2280      	movs	r2, #128	@ 0x80
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b00e      	add	sp, #56	@ 0x38
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	fffffedf 	.word	0xfffffedf

08002ff4 <memset>:
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	1882      	adds	r2, r0, r2
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	7019      	strb	r1, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2600      	movs	r6, #0
 8003008:	4c0c      	ldr	r4, [pc, #48]	@ (800303c <__libc_init_array+0x38>)
 800300a:	4d0d      	ldr	r5, [pc, #52]	@ (8003040 <__libc_init_array+0x3c>)
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	2600      	movs	r6, #0
 8003016:	f000 f819 	bl	800304c <_init>
 800301a:	4c0a      	ldr	r4, [pc, #40]	@ (8003044 <__libc_init_array+0x40>)
 800301c:	4d0a      	ldr	r5, [pc, #40]	@ (8003048 <__libc_init_array+0x44>)
 800301e:	1b64      	subs	r4, r4, r5
 8003020:	10a4      	asrs	r4, r4, #2
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	00b3      	lsls	r3, r6, #2
 800302a:	58eb      	ldr	r3, [r5, r3]
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	00b3      	lsls	r3, r6, #2
 8003034:	58eb      	ldr	r3, [r5, r3]
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	0800309c 	.word	0x0800309c
 8003040:	0800309c 	.word	0x0800309c
 8003044:	080030a0 	.word	0x080030a0
 8003048:	0800309c 	.word	0x0800309c

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
